"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.supportedEndpoints = void 0;
const ethers_1 = require("ethers");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
exports.supportedEndpoints = ['allocations'];
const controllerABI = [
    {
        inputs: [],
        name: 'pools',
        outputs: [{ type: 'address' }],
        stateMutability: 'view',
        type: 'function',
    },
];
const addressListABI = [
    {
        inputs: [],
        name: 'length',
        outputs: [{ type: 'uint256' }],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [{ type: 'uint256' }],
        name: 'at',
        outputs: [{ type: 'address' }, { type: 'uint256' }],
        stateMutability: 'view',
        type: 'function',
    },
];
const vTokenABI = [
    {
        inputs: [],
        name: 'token',
        outputs: [{ type: 'address' }],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [],
        name: 'totalValue',
        outputs: [{ type: 'uint256' }],
        stateMutability: 'view',
        type: 'function',
    },
];
const tokenABI = [
    {
        inputs: [],
        name: 'symbol',
        outputs: [{ type: 'string' }],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [],
        name: 'decimals',
        outputs: [{ type: 'uint8' }],
        stateMutability: 'view',
        type: 'function',
    },
];
const getToken = async (tokenAddress, provider) => {
    const token = new ethers_1.ethers.Contract(tokenAddress, tokenABI, provider);
    let symbol = await token.symbol();
    // Instead of querying the WETH price, get ETH price
    if (symbol.toUpperCase() === 'WETH') {
        symbol = 'ETH';
    }
    const decimals = await token.decimals();
    return {
        symbol,
        decimals,
    };
};
const getTotalValue = async (vTokenAddress, provider) => {
    const vToken = new ethers_1.ethers.Contract(vTokenAddress, vTokenABI, provider);
    const tokenAddress = (await vToken.token());
    const token = await getToken(tokenAddress, provider);
    return {
        ...token,
        token: tokenAddress,
        balance: (await vToken.totalValue()),
    };
};
const getPoolValue = async (poolAddress, provider) => {
    const pool = new ethers_1.ethers.Contract(poolAddress, addressListABI, provider);
    const listLength = await pool.length();
    const _getValue = async (index) => getTotalValue((await pool.at(index))[0], provider);
    const getValues = new Array(listLength.toNumber()).fill(0).map((_, i) => _getValue(i));
    return Promise.all(getValues);
};
const execute = async (input, _, config) => {
    const validator = new ea_bootstrap_1.Validator(input, {});
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.jobRunID;
    const controllerAddress = config.controllerAddress;
    const provider = new ethers_1.ethers.providers.JsonRpcProvider(config.rpcUrl);
    const controller = new ethers_1.ethers.Contract(controllerAddress, controllerABI, provider);
    const pool = (await controller.pools());
    const values = await getPoolValue(pool, provider);
    const tokens = {};
    values.forEach(({ token, balance, symbol, decimals }) => {
        if (token in tokens) {
            tokens[token].balance = tokens[token].balance.add(balance);
        }
        else {
            tokens[token] = {
                symbol,
                decimals,
                balance,
            };
        }
    });
    const _convertBigNumberish = (input) => ({
        ...input,
        balance: input.balance.toString(),
    });
    const allocations = Object.values(tokens).map((token) => _convertBigNumberish(token));
    const response = {
        data: allocations,
    };
    return ea_bootstrap_1.Requester.success(jobRunID, response, true);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,