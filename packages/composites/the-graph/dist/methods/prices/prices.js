"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.NAME = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../../config");
const types_1 = require("../../types");
const ea_reference_data_reader_1 = require("@chainlink/ea-reference-data-reader");
exports.NAME = 'price';
const customParams = {
    baseCoinTicker: ['baseCoinTicker', 'base', 'from', 'coin'],
    quoteCoinTicker: ['quoteCoinTicker', 'quote', 'to', 'market'],
    dex: true,
    intermediaryToken: false,
    referenceContract: false,
    referenceContractDivisor: false,
    theGraphQuote: false,
    network: false,
};
const execute = async (input, _, config) => {
    const validator = new ea_bootstrap_1.Validator(input, customParams);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const { baseCoinTicker, quoteCoinTicker, dex, referenceContract, referenceContractDivisor, referenceModifierAction = types_1.ReferenceModifierAction.MULTIPLY, intermediaryToken = config_1.WETH, theGraphQuote, network, } = validator.validated.data;
    if (!theGraphQuote && !quoteCoinTicker) {
        throw new Error('quoteCoinTicker cannot be empty if theGraphQuote not supplied');
    }
    const dexToUpperCase = dex.toUpperCase();
    const dexSubgraph = config.dexSubgraphs[dexToUpperCase];
    if (!dexSubgraph) {
        throw new Error(`${dex} is currently not supported`);
    }
    const inputParams = {
        jobRunID,
        baseCoinTicker: baseCoinTicker.toUpperCase(),
        quoteCoinTicker: theGraphQuote ? theGraphQuote.toUpperCase() : quoteCoinTicker.toUpperCase(),
        dex: dexToUpperCase,
        referenceContract,
        referenceContractDivisor,
        referenceModifierAction: referenceModifierAction.toUpperCase(),
        intermediaryToken: intermediaryToken.toUpperCase(),
        network: network || config_1.DEFAULT_NETWORK,
    };
    if (baseCoinTicker === quoteCoinTicker) {
        throw new Error('Base and Quote coins must be different');
    }
    ea_bootstrap_1.Logger.info(`Fetching quote for ${quoteCoinTicker}/${baseCoinTicker} pair from ${dex}`);
    let price;
    try {
        price = await getQuotePrice(inputParams, dexSubgraph);
    }
    catch (e) {
        throw new Error(`Failed to get price.  Reason "${e}"`);
    }
    return ea_bootstrap_1.Requester.success(jobRunID, {
        status: 200,
        data: {
            result: price,
        },
    }, true);
};
exports.execute = execute;
const getQuotePrice = async (inputParams, dexSubgraph) => {
    const { jobRunID, baseCoinTicker, quoteCoinTicker, referenceContract } = inputParams;
    const token0 = await dexSubgraph.getToken(jobRunID, baseCoinTicker);
    const token1 = await dexSubgraph.getToken(jobRunID, quoteCoinTicker);
    let token1PerToken0 = await dexSubgraph.getTokenPairPrice(jobRunID, token0.id, token1.id);
    if (!token1PerToken0) {
        token1PerToken0 = await getPriceThroughCommonPair(inputParams, dexSubgraph, token0.id, token1.id);
    }
    ea_bootstrap_1.Logger.info(`Price of ${quoteCoinTicker}/${baseCoinTicker} is ${token1PerToken0}`);
    if (referenceContract) {
        token1PerToken0 = await modifyResultByFeedResult(inputParams, token1PerToken0);
    }
    return token1PerToken0;
};
const getPriceThroughCommonPair = async (inputParams, dexSubgraph, token0ID, token1ID) => {
    const { jobRunID, baseCoinTicker, quoteCoinTicker, intermediaryToken: intermediaryTokenTicker, } = inputParams;
    ea_bootstrap_1.Logger.info(`${quoteCoinTicker}/${baseCoinTicker} pair does not exist.  Determining price using intermediary token ${intermediaryTokenTicker}`);
    const intermediaryToken = await dexSubgraph.getToken(jobRunID, intermediaryTokenTicker);
    const refTokenPerToken0 = await dexSubgraph.getTokenPairPrice(jobRunID, token0ID, intermediaryToken.id);
    const refTokenPerToken1 = await dexSubgraph.getTokenPairPrice(jobRunID, token1ID, intermediaryToken.id);
    validateTokenPrices(refTokenPerToken0, refTokenPerToken1, baseCoinTicker, quoteCoinTicker);
    return refTokenPerToken0 / refTokenPerToken1;
};
const validateTokenPrices = (priceOne, priceTwo, priceOneTicker, priceTwoTicker) => {
    if (!priceOne || !priceTwo) {
        if (!priceOne) {
            throw new Error(`Failed to get price because we could not determine the price of ${priceOneTicker}`);
        }
        if (!priceTwo) {
            throw new Error(`Failed to get price because we could not determine the price of ${priceTwoTicker}`);
        }
    }
};
const modifyResultByFeedResult = async (inputParams, currentPrice) => {
    const { baseCoinTicker, quoteCoinTicker, referenceContract, referenceContractDivisor, referenceModifierAction, network, } = inputParams;
    ea_bootstrap_1.Logger.info(`Price of ${quoteCoinTicker}/${baseCoinTicker} is going to be modified by the result returned from ${referenceContract} by ${referenceContractDivisor}`);
    const modifierTokenPrice = await ea_reference_data_reader_1.getLatestAnswer(network, referenceContract, referenceContractDivisor);
    ea_bootstrap_1.Logger.info(`Feed ${referenceContract} returned a value of ${modifierTokenPrice}`);
    if (referenceModifierAction === types_1.ReferenceModifierAction.DIVIDE) {
        return currentPrice / modifierTokenPrice;
    }
    return currentPrice * modifierTokenPrice;
};
//# sourceMappingURL=data:application/json;base64,