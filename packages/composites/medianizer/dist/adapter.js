"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.median = exports.makeExecute = exports.parseSources = exports.execute = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("./config");
const customParams = {
    sources: true,
    minAnswers: false,
};
const execute = async (input, _, config) => {
    const validator = new ea_bootstrap_1.Validator(input, customParams);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.jobRunID;
    const sources = exports.parseSources(validator.validated.data.sources);
    const minAnswers = validator.validated.data.minAnswers || 1;
    const urls = sources.map((source) => ea_bootstrap_1.util.getRequiredURL(source.toUpperCase()));
    const result = await getExecuteMedian(urls, input, minAnswers, config);
    const response = { data: { result }, status: 200 };
    return ea_bootstrap_1.Requester.success(jobRunID, response);
};
exports.execute = execute;
const parseSources = (sources) => {
    if (Array.isArray(sources)) {
        return sources;
    }
    return sources.split(',');
};
exports.parseSources = parseSources;
const makeExecute = (config) => {
    return async (request, context) => exports.execute(request, context, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
const getExecuteMedian = async (urls, request, minAnswers, config) => {
    const responses = await Promise.allSettled(urls.map(async (url) => await ea_bootstrap_1.Requester.request({
        ...config.api,
        method: 'post',
        url,
        data: request,
    })));
    const values = responses
        .filter((result) => result.status === 'fulfilled' && 'value' in result)
        .map((result) => result.value.data.result);
    if (values.length < minAnswers)
        throw Error(`Not returning median: got ${values.length} answers, requiring min. ${minAnswers} answers`);
    return exports.median(values);
};
const median = (values) => {
    if (values.length === 0)
        return 0;
    values.sort((a, b) => a - b);
    const half = Math.floor(values.length / 2);
    if (values.length % 2)
        return values[half];
    return (values[half - 1] + values[half]) / 2.0;
};
exports.median = median;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUFvRTtBQVNwRSxxQ0FBcUM7QUFXckMsTUFBTSxZQUFZLEdBQUc7SUFDbkIsT0FBTyxFQUFFLElBQUk7SUFDYixVQUFVLEVBQUUsS0FBSztDQUNsQixDQUFBO0FBRU0sTUFBTSxPQUFPLEdBQThCLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFO0lBQzNFLE1BQU0sU0FBUyxHQUFHLElBQUksd0JBQVMsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUE7SUFDcEQsSUFBSSxTQUFTLENBQUMsS0FBSztRQUFFLE1BQU0sU0FBUyxDQUFDLEtBQUssQ0FBQTtJQUUxQyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQTtJQUM3QyxNQUFNLE9BQU8sR0FBRyxvQkFBWSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQzlELE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLENBQUE7SUFFM0QsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsbUJBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUMvRSxNQUFNLE1BQU0sR0FBRyxNQUFNLGdCQUFnQixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBRXRFLE1BQU0sUUFBUSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFBO0lBQ2xELE9BQU8sd0JBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0FBQzlDLENBQUMsQ0FBQTtBQWJZLFFBQUEsT0FBTyxXQWFuQjtBQUVNLE1BQU0sWUFBWSxHQUFHLENBQUMsT0FBMEIsRUFBWSxFQUFFO0lBQ25FLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUMxQixPQUFPLE9BQU8sQ0FBQTtLQUNmO0lBQ0QsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQzNCLENBQUMsQ0FBQTtBQUxZLFFBQUEsWUFBWSxnQkFLeEI7QUFFTSxNQUFNLFdBQVcsR0FBMkIsQ0FBQyxNQUFNLEVBQUUsRUFBRTtJQUM1RCxPQUFPLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxlQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLElBQUksbUJBQVUsRUFBRSxDQUFDLENBQUE7QUFDdEYsQ0FBQyxDQUFBO0FBRlksUUFBQSxXQUFXLGVBRXZCO0FBRUQsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLEVBQzVCLElBQWMsRUFDZCxPQUF1QixFQUN2QixVQUFrQixFQUNsQixNQUFjLEVBQ0csRUFBRTtJQUNuQixNQUFNLFNBQVMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxVQUFVLENBQ3hDLElBQUksQ0FBQyxHQUFHLENBQ04sS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQ1osTUFBTSx3QkFBUyxDQUFDLE9BQU8sQ0FBQztRQUN0QixHQUFHLE1BQU0sQ0FBQyxHQUFHO1FBQ2IsTUFBTSxFQUFFLE1BQU07UUFDZCxHQUFHO1FBQ0gsSUFBSSxFQUFFLE9BQU87S0FDZCxDQUFDLENBQ0wsQ0FDRixDQUFBO0lBQ0QsTUFBTSxNQUFNLEdBQUcsU0FBUztTQUNyQixNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEtBQUssV0FBVyxJQUFJLE9BQU8sSUFBSSxNQUFNLENBQUM7U0FDdEUsR0FBRyxDQUNGLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FDUixNQUFxRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUMzRixDQUFBO0lBQ0gsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLFVBQVU7UUFDNUIsTUFBTSxLQUFLLENBQ1QsNkJBQTZCLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixVQUFVLFVBQVUsQ0FDM0YsQ0FBQTtJQUNILE9BQU8sY0FBTSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ3ZCLENBQUMsQ0FBQTtBQUVNLE1BQU0sTUFBTSxHQUFHLENBQUMsTUFBZ0IsRUFBVSxFQUFFO0lBQ2pELElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDO1FBQUUsT0FBTyxDQUFDLENBQUE7SUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUM1QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFDMUMsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUM7UUFBRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUMxQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUE7QUFDaEQsQ0FBQyxDQUFBO0FBTlksUUFBQSxNQUFNLFVBTWxCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdGVyLCB1dGlsLCBWYWxpZGF0b3IgfSBmcm9tICdAY2hhaW5saW5rL2VhLWJvb3RzdHJhcCdcbmltcG9ydCB7XG4gIEFkYXB0ZXJSZXF1ZXN0LFxuICBFeGVjdXRlV2l0aENvbmZpZyxcbiAgQ29uZmlnLFxuICBFeGVjdXRlRmFjdG9yeSxcbiAgUmVxdWVzdENvbmZpZyxcbn0gZnJvbSAnQGNoYWlubGluay90eXBlcydcbmltcG9ydCB7IEF4aW9zUmVzcG9uc2UgfSBmcm9tICdheGlvcydcbmltcG9ydCB7IG1ha2VDb25maWcgfSBmcm9tICcuL2NvbmZpZydcblxuZXhwb3J0IHR5cGUgU291cmNlUmVxdWVzdE9wdGlvbnMgPSB7IFtzb3VyY2U6IHN0cmluZ106IFJlcXVlc3RDb25maWcgfVxuZXhwb3J0IHR5cGUgQ2hlY2tSZXF1ZXN0T3B0aW9ucyA9IHsgW2NoZWNrOiBzdHJpbmddOiBSZXF1ZXN0Q29uZmlnIH1cblxuZXhwb3J0IHR5cGUgQWRhcHRlck9wdGlvbnMgPSB7XG4gIHNvdXJjZXM6IFNvdXJjZVJlcXVlc3RPcHRpb25zXG4gIGNoZWNrczogQ2hlY2tSZXF1ZXN0T3B0aW9uc1xuICBhcGk6IGFueVxufVxuXG5jb25zdCBjdXN0b21QYXJhbXMgPSB7XG4gIHNvdXJjZXM6IHRydWUsXG4gIG1pbkFuc3dlcnM6IGZhbHNlLFxufVxuXG5leHBvcnQgY29uc3QgZXhlY3V0ZTogRXhlY3V0ZVdpdGhDb25maWc8Q29uZmlnPiA9IGFzeW5jIChpbnB1dCwgXywgY29uZmlnKSA9PiB7XG4gIGNvbnN0IHZhbGlkYXRvciA9IG5ldyBWYWxpZGF0b3IoaW5wdXQsIGN1c3RvbVBhcmFtcylcbiAgaWYgKHZhbGlkYXRvci5lcnJvcikgdGhyb3cgdmFsaWRhdG9yLmVycm9yXG5cbiAgY29uc3Qgam9iUnVuSUQgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmpvYlJ1bklEXG4gIGNvbnN0IHNvdXJjZXMgPSBwYXJzZVNvdXJjZXModmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLnNvdXJjZXMpXG4gIGNvbnN0IG1pbkFuc3dlcnMgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmRhdGEubWluQW5zd2VycyB8fCAxXG5cbiAgY29uc3QgdXJscyA9IHNvdXJjZXMubWFwKChzb3VyY2UpID0+IHV0aWwuZ2V0UmVxdWlyZWRVUkwoc291cmNlLnRvVXBwZXJDYXNlKCkpKVxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRFeGVjdXRlTWVkaWFuKHVybHMsIGlucHV0LCBtaW5BbnN3ZXJzLCBjb25maWcpXG5cbiAgY29uc3QgcmVzcG9uc2UgPSB7IGRhdGE6IHsgcmVzdWx0IH0sIHN0YXR1czogMjAwIH1cbiAgcmV0dXJuIFJlcXVlc3Rlci5zdWNjZXNzKGpvYlJ1bklELCByZXNwb25zZSlcbn1cblxuZXhwb3J0IGNvbnN0IHBhcnNlU291cmNlcyA9IChzb3VyY2VzOiBzdHJpbmcgfCBzdHJpbmdbXSk6IHN0cmluZ1tdID0+IHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc291cmNlcykpIHtcbiAgICByZXR1cm4gc291cmNlc1xuICB9XG4gIHJldHVybiBzb3VyY2VzLnNwbGl0KCcsJylcbn1cblxuZXhwb3J0IGNvbnN0IG1ha2VFeGVjdXRlOiBFeGVjdXRlRmFjdG9yeTxDb25maWc+ID0gKGNvbmZpZykgPT4ge1xuICByZXR1cm4gYXN5bmMgKHJlcXVlc3QsIGNvbnRleHQpID0+IGV4ZWN1dGUocmVxdWVzdCwgY29udGV4dCwgY29uZmlnIHx8IG1ha2VDb25maWcoKSlcbn1cblxuY29uc3QgZ2V0RXhlY3V0ZU1lZGlhbiA9IGFzeW5jIChcbiAgdXJsczogc3RyaW5nW10sXG4gIHJlcXVlc3Q6IEFkYXB0ZXJSZXF1ZXN0LFxuICBtaW5BbnN3ZXJzOiBudW1iZXIsXG4gIGNvbmZpZzogQ29uZmlnLFxuKTogUHJvbWlzZTxudW1iZXI+ID0+IHtcbiAgY29uc3QgcmVzcG9uc2VzID0gYXdhaXQgUHJvbWlzZS5hbGxTZXR0bGVkKFxuICAgIHVybHMubWFwKFxuICAgICAgYXN5bmMgKHVybCkgPT5cbiAgICAgICAgYXdhaXQgUmVxdWVzdGVyLnJlcXVlc3Qoe1xuICAgICAgICAgIC4uLmNvbmZpZy5hcGksXG4gICAgICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgICAgdXJsLFxuICAgICAgICAgIGRhdGE6IHJlcXVlc3QsXG4gICAgICAgIH0pLFxuICAgICksXG4gIClcbiAgY29uc3QgdmFsdWVzID0gcmVzcG9uc2VzXG4gICAgLmZpbHRlcigocmVzdWx0KSA9PiByZXN1bHQuc3RhdHVzID09PSAnZnVsZmlsbGVkJyAmJiAndmFsdWUnIGluIHJlc3VsdClcbiAgICAubWFwKFxuICAgICAgKHJlc3VsdCkgPT5cbiAgICAgICAgKHJlc3VsdCBhcyBQcm9taXNlRnVsZmlsbGVkUmVzdWx0PEF4aW9zUmVzcG9uc2U8UmVjb3JkPHN0cmluZywgYW55Pj4+KS52YWx1ZS5kYXRhLnJlc3VsdCxcbiAgICApXG4gIGlmICh2YWx1ZXMubGVuZ3RoIDwgbWluQW5zd2VycylcbiAgICB0aHJvdyBFcnJvcihcbiAgICAgIGBOb3QgcmV0dXJuaW5nIG1lZGlhbjogZ290ICR7dmFsdWVzLmxlbmd0aH0gYW5zd2VycywgcmVxdWlyaW5nIG1pbi4gJHttaW5BbnN3ZXJzfSBhbnN3ZXJzYCxcbiAgICApXG4gIHJldHVybiBtZWRpYW4odmFsdWVzKVxufVxuXG5leHBvcnQgY29uc3QgbWVkaWFuID0gKHZhbHVlczogbnVtYmVyW10pOiBudW1iZXIgPT4ge1xuICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcbiAgdmFsdWVzLnNvcnQoKGEsIGIpID0+IGEgLSBiKVxuICBjb25zdCBoYWxmID0gTWF0aC5mbG9vcih2YWx1ZXMubGVuZ3RoIC8gMilcbiAgaWYgKHZhbHVlcy5sZW5ndGggJSAyKSByZXR1cm4gdmFsdWVzW2hhbGZdXG4gIHJldHVybiAodmFsdWVzW2hhbGYgLSAxXSArIHZhbHVlc1toYWxmXSkgLyAyLjBcbn1cbiJdfQ==