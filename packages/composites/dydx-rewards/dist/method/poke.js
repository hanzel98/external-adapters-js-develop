"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.constructJsonTree = exports.constructMerkleTree = exports.hashFn = exports.keccakReward = exports.calcMarketMakerRewards = exports.calcTraderRewards = exports.calcRetroactiveRewards = exports.calculateRewards = exports.execute = exports.deconstructJsonTree = exports.NAME = void 0;
const tslib_1 = require("tslib");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const ethers_1 = require("ethers");
const contracts_1 = require("../contracts");
const ipfs_data_1 = require("../ipfs-data");
const IPFS = tslib_1.__importStar(require("@chainlink/ipfs-adapter"));
const merkletreejs_1 = require("merkletreejs");
const bn = tslib_1.__importStar(require("bignumber.js"));
exports.NAME = 'poke';
const deconstructJsonTree = (data) => {
    const res = {};
    for (const datum of data) {
        res[datum[0]] = ethers_1.BigNumber.from(datum[1]);
    }
    return res;
};
exports.deconstructJsonTree = deconstructJsonTree;
const customParams = {
    traderRewardsAmount: false,
    marketMakerRewardsAmount: false,
    ipnsName: true,
    traderScoreAlpha: true,
    callbackAddress: true,
    newEpoch: true,
    activeRootIpfsCid: true,
};
const parseAddress = (address) => {
    if (address.length === 42 && address.substring(0, 2) === '0x')
        return address;
    const buf = Buffer.from(address, 'base64');
    return `0x${buf.toString('hex').slice(-40)}`;
};
const execute = async (input, context, config) => {
    const validator = new ea_bootstrap_1.Validator(input, customParams);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.jobRunID;
    let traderRewardsAmount = new bn.BigNumber(config.traderRewardsAmount);
    let marketMakerRewardsAmount = new bn.BigNumber(config.marketMakerRewardsAmount);
    // Account for CBOR encoding issue
    if (validator.validated.data.marketMakerRewardsAmount &&
        validator.validated.data.marketMakerRewardsAmount !== 'traderRewardsAmount') {
        marketMakerRewardsAmount = new bn.BigNumber(validator.validated.data.marketMakerRewardsAmount);
    }
    if (validator.validated.data.traderRewardsAmount) {
        traderRewardsAmount = new bn.BigNumber(validator.validated.data.traderRewardsAmount);
    }
    const ipnsName = validator.validated.data.ipnsName;
    const traderScoreAlpha = new bn.BigNumber(validator.validated.data.traderScoreAlpha)
        .div('1e18')
        .toNumber();
    const callbackAddress = parseAddress(validator.validated.data.callbackAddress);
    const newEpoch = ethers_1.BigNumber.from(validator.validated.data.newEpoch);
    const activeRootIpfsCidBase64 = Buffer.from(validator.validated.data.activeRootIpfsCid, 'base64');
    const activeRootIpfsCid = activeRootIpfsCidBase64.toString();
    const requesterContract = new ethers_1.ethers.Contract(callbackAddress, contracts_1.OracleRequester, config.wallet);
    const ipfs = IPFS.makeExecute(IPFS.makeConfig(IPFS.NAME));
    const rewardsInput = {
        traderRewardsAmount,
        marketMakerRewardsAmount,
        ipnsName,
        traderScoreAlpha,
        newEpoch,
        activeRootIpfsCid,
        treasuryClaimAddress: config.treasuryClaimAddress,
    };
    const addressRewards = await exports.calculateRewards(jobRunID, rewardsInput, ipfs, context);
    const merkleTree = exports.constructMerkleTree(addressRewards);
    const jsonTree = exports.constructJsonTree(addressRewards);
    const newIpfsCid = await ipfs_data_1.storeJsonTree(jobRunID, ipfs, jsonTree, context);
    const tx = await requesterContract.writeOracleData(`0x${merkleTree.getRoot().toString('hex')}`, newEpoch, Buffer.from(newIpfsCid));
    await tx.wait();
    const response = { data: { result: 1 }, status: 200 };
    return ea_bootstrap_1.Requester.success(jobRunID, response);
};
exports.execute = execute;
const calculateRewards = async (jobRunID, input, ipfs, context) => {
    const epochData = await ipfs_data_1.getDataForEpoch(jobRunID, ipfs, input.ipnsName, input.newEpoch.toNumber(), context);
    const addressRewards = {};
    if (input.newEpoch.isZero()) {
        exports.calcRetroactiveRewards(epochData, addressRewards, input.treasuryClaimAddress);
    }
    exports.calcTraderRewards(epochData, addressRewards, input.traderRewardsAmount, input.traderScoreAlpha);
    exports.calcMarketMakerRewards(epochData, addressRewards, input.marketMakerRewardsAmount);
    if (!input.newEpoch.isZero()) {
        const previousCumulativeJsonTree = await ipfs_data_1.getDataForCID(jobRunID, ipfs, input.activeRootIpfsCid, context);
        const previousAddressRewards = exports.deconstructJsonTree(previousCumulativeJsonTree);
        calcCumulativeRewards(addressRewards, previousAddressRewards);
    }
    return addressRewards;
};
exports.calculateRewards = calculateRewards;
const addReward = (addressRewards, address, amount) => {
    address = ethers_1.ethers.utils.getAddress(address);
    if (address in addressRewards) {
        addressRewards[address] = addressRewards[address].add(amount);
    }
    else {
        addressRewards[address] = ethers_1.BigNumber.from(amount);
    }
};
// We expect the amount with 2 decimal points, and the token has 18 decimals.
const rewardAmountToBigNumber = (amount) => ethers_1.BigNumber.from(amount * 100).mul(ethers_1.BigNumber.from(10).pow(16));
// Retroactive tiers are sorted descending to make it easier to find the highest applicable tier
const retroactiveTiers = [
    {
        min: 1000000,
        reward: rewardAmountToBigNumber(9529.86),
        volumeRequirement: 100000,
    },
    {
        min: 100000,
        reward: rewardAmountToBigNumber(6413.91),
        volumeRequirement: 50000,
    },
    {
        min: 10000,
        reward: rewardAmountToBigNumber(4349.63),
        volumeRequirement: 5000,
    },
    {
        min: 1,
        reward: rewardAmountToBigNumber(1163.51),
        volumeRequirement: 500,
    },
    {
        min: 0,
        reward: rewardAmountToBigNumber(310.75),
        volumeRequirement: 1,
    },
];
// Retroactive rewards is 75M (hard-coded, as the above tiers would have to change if this was changed)
const totalRetroactiveRewards = ethers_1.BigNumber.from(75000000).mul(ethers_1.BigNumber.from(10).pow(18));
const findRetroactiveRewardsTier = (tradeVolume) => {
    // Do a strict check to avoid catching "0" - which is treated differently
    if (tradeVolume === false) {
        return {
            min: 0,
            reward: ethers_1.BigNumber.from(0),
            volumeRequirement: 1,
        };
    }
    const tier = retroactiveTiers.find(({ min }) => tradeVolume >= min);
    if (!tier) {
        throw new Error(`Unable to find tier for volume: ${tradeVolume}`);
    }
    return tier;
};
const EXPO_BONUS_TOKENS = rewardAmountToBigNumber(565.61);
const calcRetroactiveRewards = (epochData, addressRewards, treasuryClaimAddress) => {
    const combinedAddresses = [
        ...Object.keys(epochData.retroactiveTradeVolume || {}),
        ...Object.keys(epochData.isExpoUser || {}),
    ];
    const uniqueAddresses = [...new Set(combinedAddresses)];
    let sumRetroactivelyDistributedRewards = ethers_1.BigNumber.from(0);
    for (const addr of uniqueAddresses) {
        const volume = epochData.tradeVolume?.[addr] || 0;
        const retroactiveVolume = epochData.retroactiveTradeVolume?.[addr] ?? false;
        const tier = findRetroactiveRewardsTier(retroactiveVolume);
        const isExpoUser = epochData.isExpoUser?.[addr] || false;
        const userPotentialRewardTokens = tier.reward.add(isExpoUser ? EXPO_BONUS_TOKENS : 0);
        const earnedFraction = bn.BigNumber.min(1, new bn.BigNumber(volume).div(tier.volumeRequirement));
        const userRetroactiveRewardTokens = new bn.BigNumber(userPotentialRewardTokens.toString())
            .times(earnedFraction)
            .decimalPlaces(0, bn.BigNumber.ROUND_FLOOR)
            .toFixed();
        if (userRetroactiveRewardTokens != '0') {
            addReward(addressRewards, addr, userRetroactiveRewardTokens);
            sumRetroactivelyDistributedRewards = sumRetroactivelyDistributedRewards.add(userRetroactiveRewardTokens);
        }
    }
    // If there are tokens not claimed (by users not reaching volume requirements), send them to the
    // treasury's merkle root claim contract.
    const totalForfeitedTokens = totalRetroactiveRewards.sub(sumRetroactivelyDistributedRewards);
    if (!totalForfeitedTokens.isZero()) {
        addReward(addressRewards, treasuryClaimAddress, totalForfeitedTokens);
    }
};
exports.calcRetroactiveRewards = calcRetroactiveRewards;
const calcTraderRewards = (epochData, addressRewards, traderRewardsAmount, traderScoreAlpha) => {
    const F = Object.keys(epochData.tradeFeesPaid).reduce((sum, addr) => sum.plus(epochData.tradeFeesPaid[addr]), new bn.BigNumber(0));
    const G = Object.keys(epochData.openInterest).reduce((sum, addr) => sum.plus(epochData.openInterest[addr]), new bn.BigNumber(0));
    const traderScore = {};
    let traderScoreSum = new bn.BigNumber(0);
    Object.keys(epochData.tradeFeesPaid).forEach((addr) => {
        const f = epochData.tradeFeesPaid[addr];
        const g = epochData.openInterest[addr] || 0;
        const score = new bn.BigNumber((f / F.toNumber()) ** traderScoreAlpha).times((g / G.toNumber()) ** (1 - traderScoreAlpha));
        traderScore[addr] = score;
        traderScoreSum = traderScoreSum.plus(score);
    });
    Object.keys(traderScore).forEach((addr) => {
        const reward = traderRewardsAmount
            .times(traderScore[addr])
            .div(traderScoreSum)
            .decimalPlaces(0, bn.BigNumber.ROUND_FLOOR)
            .toFixed();
        if (reward !== '0') {
            addReward(addressRewards, addr, reward);
        }
    });
};
exports.calcTraderRewards = calcTraderRewards;
const calcMarketMakerRewards = (epochData, addressRewards, marketMakerRewardsAmount) => {
    const quoteScoreSum = Object.keys(epochData.quoteScore).reduce((sum, addr) => sum.plus(epochData.quoteScore[addr]), new bn.BigNumber(0));
    Object.keys(epochData.quoteScore).forEach((addr) => {
        const reward = marketMakerRewardsAmount
            .times(epochData.quoteScore[addr])
            .div(quoteScoreSum)
            .decimalPlaces(0, bn.BigNumber.ROUND_FLOOR)
            .toFixed();
        if (reward !== '0') {
            addReward(addressRewards, addr, reward);
        }
    });
};
exports.calcMarketMakerRewards = calcMarketMakerRewards;
const calcCumulativeRewards = (addressRewards, previousRewards) => {
    Object.keys(previousRewards).forEach((addr) => {
        addReward(addressRewards, addr, previousRewards[addr]);
    });
};
const keccakReward = (address, reward) => Buffer.from(ethers_1.ethers.utils
    .solidityKeccak256(['address', 'uint256'], [ethers_1.ethers.utils.getAddress(address), reward])
    .substr(2), 'hex');
exports.keccakReward = keccakReward;
const hashFn = (value) => Buffer.from(ethers_1.ethers.utils.keccak256(value).substr(2), 'hex');
exports.hashFn = hashFn;
const constructMerkleTree = (addressRewards) => {
    const leaves = Object.keys(addressRewards).map((addr) => exports.keccakReward(addr, addressRewards[addr]));
    const options = {
        sort: true,
    };
    return new merkletreejs_1.MerkleTree(leaves, exports.hashFn, options);
};
exports.constructMerkleTree = constructMerkleTree;
const constructJsonTree = (addressRewards) => Object.keys(addressRewards)
    .sort((a, b) => Buffer.compare(exports.keccakReward(a, addressRewards[a]), exports.keccakReward(b, addressRewards[b])))
    .map((addr) => [addr, addressRewards[addr].toString()]);
exports.constructJsonTree = constructJsonTree;
//# sourceMappingURL=data:application/json;base64,