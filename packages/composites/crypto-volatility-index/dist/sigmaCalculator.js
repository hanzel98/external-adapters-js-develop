"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SigmaCalculator = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const decimal_js_1 = require("decimal.js");
class SigmaCalculator {
    weightedSigma(sigmaData) {
        const { e1, e2, sigma1, sigma2, now } = sigmaData;
        const tm = new decimal_js_1.Decimal(60 * 60 * 24 * 30);
        const t1 = new decimal_js_1.Decimal(e1 - now);
        const t2 = new decimal_js_1.Decimal(e2 - now);
        const weighted = (t1.times(t2.minus(tm)).times(sigma1).minus((t2.times((t1.minus(tm)).times(sigma2)))))
            .div((t2.minus(t1)))
            .div(tm); // prettier-ignore
        return weighted;
    }
    T(nowTime, e) {
        return (e - nowTime) / (365 * 24 * 60 * 60);
    }
    oneSigma(expiration, exchangeRate, calls, puts, now) {
        const T = this.T(now, expiration);
        const r = new decimal_js_1.Decimal(0);
        let S = new decimal_js_1.Decimal(0);
        let dK = new decimal_js_1.Decimal(0);
        let F = new decimal_js_1.Decimal(0);
        let K0c = new decimal_js_1.Decimal(0);
        const compareCalls = calls.map((c) => c.midPrice ?? new decimal_js_1.Decimal(0));
        calls.forEach((call, idx) => {
            const { strikePrice, midPrice, underlyingPrice } = call;
            if (strikePrice.gt(underlyingPrice)) {
                if (!midPrice)
                    return;
                const prevMax = decimal_js_1.Decimal.max(...[0, ...compareCalls.slice(Math.max(0, idx - 10), idx)]);
                if (idx > 3 && !prevMax.isZero() && midPrice.greaterThan(prevMax.mul(2)))
                    return;
                F = underlyingPrice;
                if (idx === 0) {
                    dK = calls[idx + 1].strikePrice.minus(strikePrice);
                }
                else if (idx === calls.length - 1) {
                    dK = strikePrice.minus(calls[idx - 1].strikePrice);
                }
                else {
                    dK = calls[idx + 1].strikePrice.minus(calls[idx - 1].strikePrice).div(2);
                }
                S = S.plus(dK.times(midPrice).div(strikePrice.pow(2)));
            }
            else {
                K0c = strikePrice;
            }
        });
        let K0p = new decimal_js_1.Decimal(0);
        const comparePuts = puts.map((p) => p.midPrice ?? new decimal_js_1.Decimal(0));
        puts.forEach((put, idx) => {
            const { strikePrice, midPrice, underlyingPrice } = put;
            if (strikePrice.lt(underlyingPrice)) {
                if (!midPrice)
                    return;
                const prevMax = decimal_js_1.Decimal.max(...[0, ...comparePuts.slice(Math.max(0, idx - 10), idx)]);
                if (idx > 3 && !prevMax.isZero() && midPrice.greaterThan(prevMax.mul(2)))
                    return;
                F = underlyingPrice;
                if (idx === 0) {
                    dK = strikePrice.minus(puts[idx + 1].strikePrice);
                }
                else if (idx === puts.length - 1) {
                    dK = puts[idx - 1].strikePrice.minus(strikePrice);
                }
                else {
                    dK = puts[idx - 1].strikePrice.minus(puts[idx + 1].strikePrice).div(2);
                }
                S = S.plus(dK.times(midPrice).div(strikePrice.pow(2)));
            }
            else {
                K0p = strikePrice;
            }
        });
        const K0 = (K0c.plus(K0p)).div(2); // prettier-ignore
        const sigma = (new decimal_js_1.Decimal(2)
            .times(new decimal_js_1.Decimal(Math.exp(Number(r.mul(T).toFixed()))))
            .times(S)
            .times(exchangeRate)
            .minus((F.div(K0).minus(1)).pow(2)).div(T)); // prettier-ignore
        ea_bootstrap_1.Logger.debug(`Sigma:${sigma.toString()}`);
        return sigma;
    }
    sortByStrikePrice(currencyDerivativesData) {
        const { callsE1, putsE1, callsE2, putsE2 } = currencyDerivativesData;
        _sortByStrikePrice(callsE1);
        _sortByStrikePrice(callsE2);
        _sortByStrikePrice(putsE1, true);
        _sortByStrikePrice(putsE2, true);
    }
}
exports.SigmaCalculator = SigmaCalculator;
const _sortByStrikePrice = (optionData, isReversed = false) => {
    const sortFunc = isReversed
        ? (option1, option2) => Number(option2.strikePrice.minus(option1.strikePrice))
        : (option1, option2) => Number(option1.strikePrice.minus(option2.strikePrice));
    optionData.sort(sortFunc);
};
//# sourceMappingURL=data:application/json;base64,