"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculate = void 0;
const tslib_1 = require("tslib");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const ea_reference_data_reader_1 = require("@chainlink/ea-reference-data-reader");
const derivativesDataProvider_1 = require("./derivativesDataProvider");
const sigmaCalculator_1 = require("./sigmaCalculator");
const decimal_js_1 = require("decimal.js");
const moment_1 = tslib_1.__importDefault(require("moment"));
const dominanceDataProvider_1 = require("./dominanceDataProvider");
const config_1 = require("./config");
const calculate = async (validated, requestParams, context) => {
    const { contract: oracleAddress, multiply = 1e18, heartbeatMinutes = 60, isAdaptive = true, cryptoCurrencies = ['BTC', 'ETH'], deviationThreshold = 0.11, lambdaMin = 0.031, lambdaK = 0.31, network = config_1.DEFAULT_NETWORK, } = validated.data;
    // Get all of the required derivatives data for the calculations, for all the relevant currencies
    const derivativesData = await derivativesDataProvider_1.getDerivativesData(cryptoCurrencies);
    // Calculate vix values for all currencies
    const volatilityIndexData = await calculateVixValues(derivativesData, cryptoCurrencies);
    // Apply weights to calculate the Crypto Vix
    const weightedCVI = await calculateWeighted(volatilityIndexData, validated.id, requestParams, context, cryptoCurrencies);
    // Smooth CVI with previous on-chain value if exists
    const cvi = !isAdaptive
        ? toOnChainValue(weightedCVI, multiply)
        : await applySmoothing(weightedCVI, oracleAddress, multiply, heartbeatMinutes, deviationThreshold, lambdaMin, lambdaK, network);
    ea_bootstrap_1.Logger.info(`CVI: ${cvi}`);
    validateIndex(cvi);
    return cvi;
};
exports.calculate = calculate;
const calculateVixValues = async (derivativesData, cryptoCurrencies) => {
    const now = moment_1.default().utc().unix();
    const sigmaCalculator = new sigmaCalculator_1.SigmaCalculator();
    const vixValues = cryptoCurrencies.map((currency) => {
        sigmaCalculator.sortByStrikePrice(derivativesData[currency]);
        const { e1, e2, exchangeRate, callsE1, putsE1, callsE2, putsE2 } = derivativesData[currency];
        const weightedSigma = sigmaCalculator.weightedSigma({
            e1,
            e2,
            sigma1: sigmaCalculator.oneSigma(e1, exchangeRate, callsE1, putsE1, now),
            sigma2: sigmaCalculator.oneSigma(e2, exchangeRate, callsE2, putsE2, now),
            now,
        });
        return weightedSigma.sqrt().times(100);
    });
    return vixValues;
};
const calculateWeighted = async (vixData, id, requestParams, context, cryptoCurrencies) => {
    const dominanceByCurrency = await getDominanceByCurrency(id, requestParams, context, cryptoCurrencies);
    const weightedVix = cryptoCurrencies.reduce((vix, currency, idx) => {
        const dominance = dominanceByCurrency[currency];
        if (!dominance)
            throw new Error(`No dominance found for currency ${currency}`);
        const currencyVix = new decimal_js_1.Decimal(vixData[idx]);
        // Weight by dominance
        vix = vix.plus(currencyVix.times(new decimal_js_1.Decimal(dominance)));
        return vix;
    }, new decimal_js_1.Decimal(0));
    const weighted = Number(weightedVix.toFixed());
    ea_bootstrap_1.Logger.debug(`Weighted volatility index:${weighted}`);
    return weighted;
};
const getDominanceByCurrency = async (id, requestParams, context, cryptoCurrencies) => {
    const dominanceAdapter = await dominanceDataProvider_1.getDominanceAdapter();
    const allocations = cryptoCurrencies.map((symbol) => {
        return { symbol };
    });
    const quote = 'USD';
    const input = {
        id: id,
        data: {
            ...requestParams,
            allocations,
            quote,
        },
    };
    const dominanceData = await dominanceAdapter(input, context);
    return dominanceDataProvider_1.dominanceByCurrency(dominanceData.data, quote);
};
const applySmoothing = async (weightedCVI, oracleAddress, multiply, heartBeatMinutes, deviationThreshold, lambdaMin, lambdaK, network) => {
    const roundData = await ea_reference_data_reader_1.getRpcLatestRound(network, oracleAddress);
    const latestIndex = new decimal_js_1.Decimal(roundData.answer.toString()).div(multiply);
    const updatedAt = roundData.updatedAt.mul(1000).toNumber();
    if (latestIndex.lte(0)) {
        ea_bootstrap_1.Logger.warn('No on-chain index value found - Is first run of adapter?');
        return weightedCVI;
    }
    const now = moment_1.default().utc();
    const dtSeconds = moment_1.default.duration(now.diff(updatedAt)).asSeconds();
    if (dtSeconds < 0) {
        throw new Error('invalid time, please check the node clock');
    }
    const d = Math.abs(latestIndex.toNumber() / weightedCVI - 1);
    const l = d >= deviationThreshold ? lambdaMin : lambda(dtSeconds, heartBeatMinutes, lambdaMin, lambdaK);
    const smoothed = latestIndex.mul(new decimal_js_1.Decimal(1 - l)).add(new decimal_js_1.Decimal(weightedCVI).mul(l));
    ea_bootstrap_1.Logger.debug(`Previous value:${latestIndex}, updatedAt:${updatedAt}, dtSeconds:${dtSeconds}`);
    return smoothed.toNumber();
};
const lambda = function (t, heartBeatMinutes, lambdaMin, lambdaK) {
    const T = moment_1.default.duration(heartBeatMinutes, 'minutes').asSeconds();
    return lambdaMin + (lambdaK * Math.min(t, T)) / T;
};
const MAX_INDEX = 200;
const validateIndex = function (cvi) {
    if (cvi <= 0 || cvi > MAX_INDEX) {
        throw new Error('Invalid calculated index value');
    }
};
const toOnChainValue = function (cvi, multiply) {
    return Number(cvi.toFixed(multiply.toString().length - 1)); // Keep decimal precision in same magnitude as multiply
};
//# sourceMappingURL=data:application/json;base64,