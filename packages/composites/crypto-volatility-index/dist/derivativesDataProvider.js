"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDerivativesData = void 0;
const tslib_1 = require("tslib");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const moment_1 = tslib_1.__importDefault(require("moment"));
const decimal_js_1 = require("decimal.js");
const EXCHANGE_URL = `https://www.deribit.com/api/v2/public`;
const currencyEndpoint = `${EXCHANGE_URL}/get_index`;
const bookDataEndpoint = `${EXCHANGE_URL}/get_book_summary_by_currency`;
const instrumentEndpoint = `${EXCHANGE_URL}/get_instruments`;
const expirationHour = 8;
const getDerivativesData = async (cryptoCurrencies) => {
    const currencyValues = await Promise.all(cryptoCurrencies.map(async (currency) => {
        return await getCurrencyData(currency);
    }));
    ea_bootstrap_1.Logger.debug('currencyValues:', currencyValues);
    const optionsData = await Promise.all(cryptoCurrencies.map(async (currency, index) => {
        return await getOptionsData(currency, new decimal_js_1.Decimal(currencyValues[index]));
    }));
    // Return derivatives data mapped by currency
    return optionsData.reduce((obj, data, idx) => {
        obj[cryptoCurrencies[idx]] = data;
        return obj;
    }, {});
};
exports.getDerivativesData = getDerivativesData;
const getCurrencyData = async (currency) => {
    const config = {
        url: currencyEndpoint,
        params: { currency },
    };
    const response = await ea_bootstrap_1.Requester.request(config);
    const path = ['result', currency];
    return ea_bootstrap_1.Requester.validateResultNumber(response.data, path);
};
const getInstrumentData = async (currency) => {
    const config = {
        url: instrumentEndpoint,
        params: { currency },
    };
    const response = await ea_bootstrap_1.Requester.request(config);
    return response.data.result;
};
const olderThanHour = (instrumentName, hourAgo, instruments) => {
    for (const instrument of instruments) {
        if (instrument.instrument_name === instrumentName) {
            return hourAgo > instrument.creation_timestamp;
        }
    }
    return false;
};
const getOptionsData = async (currency, exchangeRate) => {
    const config = {
        url: bookDataEndpoint,
        params: { currency, kind: 'option' },
    };
    try {
        const response = await ea_bootstrap_1.Requester.request(config);
        const result = response.data.result;
        const calls = {};
        const puts = {};
        const instruments = await getInstrumentData(currency);
        const hourAgo = moment_1.default().utc().subtract(1, 'hours').unix() * 1000;
        result.map(convertToOptionData).forEach((optionData) => {
            const { instrumentName, expiration, type } = optionData;
            if (olderThanHour(instrumentName, hourAgo, instruments) &&
                moment_1.default.unix(expiration).weekday() == 5) {
                if (type === 'C') {
                    if (!calls[expiration])
                        calls[expiration] = [];
                    calls[expiration].push(optionData);
                }
                else if (type === 'P') {
                    if (!puts[expiration])
                        puts[expiration] = [];
                    puts[expiration].push(optionData);
                }
                else {
                    throw new Error(`Invalid option type:${type}`);
                }
            }
        });
        const { e1, e2 } = findNearMonthExpirations(calls);
        ea_bootstrap_1.Logger.debug(`e1:${e1},e2:${e2}`);
        ea_bootstrap_1.Logger.debug(`exchangeRate:${exchangeRate}`);
        return {
            e1: e1 + expirationHour * 60 * 60,
            e2: e2 + expirationHour * 60 * 60,
            callsE1: calls[e1],
            callsE2: calls[e2],
            putsE1: puts[e1],
            putsE2: puts[e2],
            exchangeRate,
        };
    }
    catch (error) {
        ea_bootstrap_1.Logger.error(error);
        ea_bootstrap_1.Logger.error(error.stack);
        throw new ea_bootstrap_1.AdapterError(error);
    }
};
function findNearMonthExpirations(calls) {
    const e30 = moment_1.default().utc().add(30, 'days').subtract(expirationHour, 'hours').unix();
    let e1;
    let e2;
    // Find last expiration before a full month && first expiration after a full month
    Object.keys(calls).forEach((expirationDate) => {
        const e = +expirationDate;
        if (e <= e30) {
            if (!e1 || e1 < e) {
                e1 = e;
            }
        }
        else if (e > e30) {
            if (!e2 || e2 > e) {
                e2 = e;
            }
        }
    });
    if (!e1)
        throw new Error('Could not find an expiration date before a full month');
    if (!e2)
        throw new Error('Could not find an expiration date after a full month');
    ea_bootstrap_1.Logger.debug(`e1:${e1} e2:${e2}`);
    return { e1, e2 };
}
function convertToOptionData(option) {
    const { instrument_name, mid_price, underlying_price } = option;
    const [, expiration, strikePrice, type] = instrument_name.split('-');
    const optionData = {
        instrumentName: instrument_name,
        strikePrice: new decimal_js_1.Decimal(strikePrice),
        midPrice: mid_price ? new decimal_js_1.Decimal(mid_price) : undefined,
        underlyingPrice: new decimal_js_1.Decimal(underlying_price),
        expiration: moment_1.default.utc(expiration, 'DDMMMYY').unix(),
        type,
    };
    return optionData;
}
//# sourceMappingURL=data:application/json;base64,