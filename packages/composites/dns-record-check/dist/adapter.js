"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExecute = void 0;
const tslib_1 = require("tslib");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const ea_bootstrap_2 = require("@chainlink/ea-bootstrap");
const dns_query_adapter_1 = tslib_1.__importDefault(require("@chainlink/dns-query-adapter"));
const config_1 = require("./config");
const inputParams = {
    record: true,
};
const execute = async (input, context, config) => {
    const validator = new ea_bootstrap_1.Validator(input, inputParams);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const { record } = validator.validated.data;
    const dnsExecute = dns_query_adapter_1.default.makeExecute(config);
    const dnsResponse = await dnsExecute(input, context);
    const dnsData = { ...dnsResponse.data };
    const foundRecord = dnsData.Answer.find((ans) => ans.data.includes(record));
    return ea_bootstrap_2.Requester.success(jobRunID, {
        status: 200,
        data: {
            result: !!foundRecord,
        },
    }, config.verbose);
};
const makeExecute = (config) => (input, context) => execute(input, context, config || config_1.makeConfig());
exports.makeExecute = makeExecute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSwwREFBbUQ7QUFDbkQsMERBQW1EO0FBQ25ELDZGQUE4QztBQUU5QyxxQ0FBcUM7QUFFckMsTUFBTSxXQUFXLEdBQUc7SUFDbEIsTUFBTSxFQUFFLElBQUk7Q0FDYixDQUFBO0FBRUQsTUFBTSxPQUFPLEdBQThCLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO0lBQzFFLE1BQU0sU0FBUyxHQUFHLElBQUksd0JBQVMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUE7SUFDbkQsSUFBSSxTQUFTLENBQUMsS0FBSztRQUFFLE1BQU0sU0FBUyxDQUFDLEtBQUssQ0FBQTtJQUUxQyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQTtJQUN2QyxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUE7SUFFM0MsTUFBTSxVQUFVLEdBQUcsMkJBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDMUMsTUFBTSxXQUFXLEdBQUcsTUFBTSxVQUFVLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQ3BELE1BQU0sT0FBTyxHQUFxQixFQUFFLEdBQUcsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFBO0lBQ3pELE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBYyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO0lBRXRGLE9BQU8sd0JBQVMsQ0FBQyxPQUFPLENBQ3RCLFFBQVEsRUFDUjtRQUNFLE1BQU0sRUFBRSxHQUFHO1FBQ1gsSUFBSSxFQUFFO1lBQ0osTUFBTSxFQUFFLENBQUMsQ0FBQyxXQUFXO1NBQ3RCO0tBQ0YsRUFDRCxNQUFNLENBQUMsT0FBTyxDQUNmLENBQUE7QUFDSCxDQUFDLENBQUE7QUFFTSxNQUFNLFdBQVcsR0FBMkIsQ0FBQyxNQUFlLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQ3pGLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sSUFBSSxtQkFBVSxFQUFFLENBQUMsQ0FBQTtBQURwQyxRQUFBLFdBQVcsZUFDeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeGVjdXRlV2l0aENvbmZpZywgRXhlY3V0ZUZhY3RvcnksIENvbmZpZyB9IGZyb20gJ0BjaGFpbmxpbmsvdHlwZXMnXG5pbXBvcnQgeyBWYWxpZGF0b3IgfSBmcm9tICdAY2hhaW5saW5rL2VhLWJvb3RzdHJhcCdcbmltcG9ydCB7IFJlcXVlc3RlciB9IGZyb20gJ0BjaGFpbmxpbmsvZWEtYm9vdHN0cmFwJ1xuaW1wb3J0IEROUyBmcm9tICdAY2hhaW5saW5rL2Rucy1xdWVyeS1hZGFwdGVyJ1xuaW1wb3J0IHsgRE5TUXVlcnlSZXNwb25zZSwgRE5TQW5zd2VyIH0gZnJvbSAnQGNoYWlubGluay9kbnMtcXVlcnktYWRhcHRlci9kaXN0L3R5cGVzJ1xuaW1wb3J0IHsgbWFrZUNvbmZpZyB9IGZyb20gJy4vY29uZmlnJ1xuXG5jb25zdCBpbnB1dFBhcmFtcyA9IHtcbiAgcmVjb3JkOiB0cnVlLFxufVxuXG5jb25zdCBleGVjdXRlOiBFeGVjdXRlV2l0aENvbmZpZzxDb25maWc+ID0gYXN5bmMgKGlucHV0LCBjb250ZXh0LCBjb25maWcpID0+IHtcbiAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihpbnB1dCwgaW5wdXRQYXJhbXMpXG4gIGlmICh2YWxpZGF0b3IuZXJyb3IpIHRocm93IHZhbGlkYXRvci5lcnJvclxuXG4gIGNvbnN0IGpvYlJ1bklEID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5pZFxuICBjb25zdCB7IHJlY29yZCB9ID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhXG5cbiAgY29uc3QgZG5zRXhlY3V0ZSA9IEROUy5tYWtlRXhlY3V0ZShjb25maWcpXG4gIGNvbnN0IGRuc1Jlc3BvbnNlID0gYXdhaXQgZG5zRXhlY3V0ZShpbnB1dCwgY29udGV4dClcbiAgY29uc3QgZG5zRGF0YTogRE5TUXVlcnlSZXNwb25zZSA9IHsgLi4uZG5zUmVzcG9uc2UuZGF0YSB9XG4gIGNvbnN0IGZvdW5kUmVjb3JkID0gZG5zRGF0YS5BbnN3ZXIuZmluZCgoYW5zOiBETlNBbnN3ZXIpID0+IGFucy5kYXRhLmluY2x1ZGVzKHJlY29yZCkpXG5cbiAgcmV0dXJuIFJlcXVlc3Rlci5zdWNjZXNzKFxuICAgIGpvYlJ1bklELFxuICAgIHtcbiAgICAgIHN0YXR1czogMjAwLFxuICAgICAgZGF0YToge1xuICAgICAgICByZXN1bHQ6ICEhZm91bmRSZWNvcmQsXG4gICAgICB9LFxuICAgIH0sXG4gICAgY29uZmlnLnZlcmJvc2UsXG4gIClcbn1cblxuZXhwb3J0IGNvbnN0IG1ha2VFeGVjdXRlOiBFeGVjdXRlRmFjdG9yeTxDb25maWc+ID0gKGNvbmZpZz86IENvbmZpZykgPT4gKGlucHV0LCBjb250ZXh0KSA9PlxuICBleGVjdXRlKGlucHV0LCBjb250ZXh0LCBjb25maWcgfHwgbWFrZUNvbmZpZygpKVxuIl19