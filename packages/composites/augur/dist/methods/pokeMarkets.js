"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.getUpcomingFriday4pmET = void 0;
const tslib_1 = require("tslib");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const ethers_1 = require("ethers");
const luxon_1 = require("luxon");
const index_1 = require("./index");
const AggregatorV3Interface_json_1 = tslib_1.__importDefault(require("../abis/AggregatorV3Interface.json"));
class RoundManagement {
    constructor(phase, justRound) {
        this.phase = ethers_1.BigNumber.from(phase);
        this.justRound = ethers_1.BigNumber.from(justRound);
    }
    get id() {
        return this.phase.shl(64).or(this.justRound);
    }
    nextRound() {
        return new RoundManagement(this.phase, this.justRound.add(1));
    }
    prevRound() {
        return new RoundManagement(this.phase, this.justRound.sub(1));
    }
    static decode(roundId) {
        roundId = ethers_1.BigNumber.from(roundId);
        const phase = roundId.shr(64);
        const justRoundId = roundId.sub(phase.shl(64));
        return new RoundManagement(phase, justRoundId);
    }
}
async function getNextWeekResolutionTimestamp(contract) {
    const contractNextResolutionTime = await contract.nextResolutionTime();
    const now = luxon_1.DateTime.now().setZone('America/New_York').toSeconds();
    if (contractNextResolutionTime > now) {
        ea_bootstrap_1.Logger.warn(`Augur: Next resolution time is in the future`);
        return 0;
    }
    return getUpcomingFriday4pmET();
}
function getUpcomingFriday4pmET() {
    const nowEastern = luxon_1.DateTime.now().setZone('America/New_York');
    const thisWeek = nowEastern.set({ weekday: 5, hour: 16, minute: 0, second: 0, millisecond: 0 });
    const past = thisWeek.diff(nowEastern).milliseconds < 0;
    const when = past ? thisWeek.plus({ week: 1 }) : thisWeek;
    return when.toSeconds();
}
exports.getUpcomingFriday4pmET = getUpcomingFriday4pmET;
const pokeParams = {
    contractAddress: true,
};
async function execute(input, context, config) {
    const validator = new ea_bootstrap_1.Validator(input, pokeParams);
    if (validator.error)
        throw validator.error;
    const jobRunID = input.id;
    const contractAddress = validator.validated.data.contractAddress;
    const contract = new ethers_1.ethers.Contract(contractAddress, index_1.CRYPTO_ABI, config.wallet);
    await pokeMarkets(contract, context, config);
    return ea_bootstrap_1.Requester.success(jobRunID, {});
}
exports.execute = execute;
async function fetchResolutionRoundIds(resolutionTime, contract, _, config) {
    const coins = await contract.getCoins();
    return Promise.all(coins.map(async (coin, index) => {
        const aggregator = new ethers_1.ethers.Contract(coin.priceFeed, AggregatorV3Interface_json_1.default, config.wallet);
        // Here we are going to walk backward through rounds to make sure that
        // we pick the *first* update after the passed-in resolutionTime
        let roundData = await aggregator.latestRoundData();
        // If any of the coins can't be resolved, don't resolve any of them we
        // may want to change this
        if (roundData.updatedAt < resolutionTime) {
            throw Error(`Augur: cryptoMarkets - oracle update for ${coin.name} has not occured yet, resolutionTime is ${resolutionTime} but oracle was updated at ${roundData.updatedAt}`);
        }
        let round = RoundManagement.decode(roundData.roundId);
        while (roundData.updatedAt >= resolutionTime) {
            roundData = await aggregator.getRoundData(round.prevRound().id);
            round = RoundManagement.decode(roundData.roundId);
        }
        return {
            coinId: index + 1,
            roundId: round.nextRound().id, // next round because we iterated one past the desired round
        };
    }));
}
async function createAndResolveMarkets(roundDataForCoins, nextWeek, contract, _, config) {
    //     function createAndResolveMarkets(uint80[] calldata _roundIds, uint256 _nextResolutionTime) public {
    const roundIds = [0].concat(roundDataForCoins.map((x) => x.roundId));
    const nonce = await config.wallet.getTransactionCount();
    try {
        await contract.createAndResolveMarkets(roundIds, nextWeek, { nonce });
        ea_bootstrap_1.Logger.log(`Augur: createAndResolveMarkets -- success`);
    }
    catch (e) {
        ea_bootstrap_1.Logger.log(`Augur: createAndResolveMarkets -- failure`);
        ea_bootstrap_1.Logger.error(e);
    }
}
async function pokeMarkets(contract, context, config) {
    const resolutionTime = await contract.nextResolutionTime();
    const nextResolutionTime = await getNextWeekResolutionTimestamp(contract);
    if (nextResolutionTime > 0) {
        const roundIds = await fetchResolutionRoundIds(resolutionTime.toNumber(), contract, context, config);
        await createAndResolveMarkets(roundIds, nextResolutionTime, contract, context, config);
    }
}
//# sourceMappingURL=data:application/json;base64,