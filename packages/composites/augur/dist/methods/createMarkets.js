"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = void 0;
const tslib_1 = require("tslib");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const index_1 = require("./index");
const ethers_1 = require("ethers");
const dataProviders_1 = require("../dataProviders");
const mma_json_1 = tslib_1.__importDefault(require("../abis/mma.json"));
const createParams = {
    sport: true,
    contractAddress: true,
};
const execute = async (input, context, config) => {
    const validator = new ea_bootstrap_1.Validator(input, createParams);
    if (validator.error)
        throw validator.error;
    const sport = validator.validated.data.sport.toLowerCase();
    const contractAddress = validator.validated.data.contractAddress;
    ea_bootstrap_1.Logger.debug(`Augur: Picking code path for sport ${sport}`);
    if (index_1.TEAM_SPORTS.includes(sport)) {
        ea_bootstrap_1.Logger.debug(`Augur: Picked TEAM code path for sport`);
        return await createTeam(input.id, sport, contractAddress, input, context, config);
    }
    else if (index_1.FIGHTER_SPORTS.includes(sport)) {
        ea_bootstrap_1.Logger.debug(`Augur: Picked FIGHTER code path for sport`);
        return await createFighter(input.id, sport, contractAddress, input, context, config);
    }
    else {
        throw Error(`Unable to identify sport "${sport}"`);
    }
};
exports.execute = execute;
const createTeam = async (jobRunID, sport, contractAddress, input, context, config) => {
    const contract = new ethers_1.ethers.Contract(contractAddress, sport === 'nfl' ? index_1.NFL_ABI : index_1.TEAM_ABI, config.wallet);
    const req = {
        id: jobRunID,
        data: {
            ...input.data,
            contract,
            sport,
        },
    };
    let events = [];
    ea_bootstrap_1.Logger.debug(`Augur: Choosing data source for sport ${sport}`);
    if (dataProviders_1.theRundown.SPORTS_SUPPORTED.includes(sport)) {
        ea_bootstrap_1.Logger.debug(`Augur: Chose TheRundown as the data source`);
        events = (await dataProviders_1.theRundown.create(req, context)).result;
    }
    else if (dataProviders_1.sportsdataio.SPORTS_SUPPORTED.includes(sport)) {
        ea_bootstrap_1.Logger.debug(`Augur: Chose SportsDataIO as the data source`);
        events = (await dataProviders_1.sportsdataio.createTeam(req, context)).result;
    }
    else {
        throw Error(`Unknown data provider for sport ${sport}`);
    }
    ea_bootstrap_1.Logger.debug(`Augur: Prepared to create ${events.length} events`);
    let failed = 0;
    let succeeded = 0;
    let nonce = await config.wallet.getTransactionCount();
    for (let i = 0; i < events.length; i++) {
        const event = events[i];
        const payload = sport === 'nfl'
            ? [
                event.id,
                event.homeTeamName,
                event.homeTeamId,
                event.awayTeamName,
                event.awayTeamId,
                Math.floor(event.startTime / 1000),
                Math.round(event.homeSpread * 10),
                Math.round(event.totalScore * 10),
                event.createSpread,
                event.createTotalScore,
                event.moneylines,
                { nonce },
            ]
            : [
                event.id,
                event.homeTeamId,
                event.awayTeamId,
                Math.floor(event.startTime / 1000),
                Math.round(event.homeSpread * 10),
                Math.round(event.totalScore * 10),
                event.createSpread,
                event.createTotalScore,
                event.moneylines,
                { nonce },
            ];
        try {
            const tx = await contract.createMarket(...payload);
            ea_bootstrap_1.Logger.debug(`Created tx: ${tx.hash}`);
            nonce++;
            succeeded++;
        }
        catch (e) {
            failed++;
            ea_bootstrap_1.Logger.error(e);
        }
    }
    ea_bootstrap_1.Logger.debug(`Augur: ${succeeded} created markets`);
    ea_bootstrap_1.Logger.debug(`Augur: ${failed} markets failed to create`);
    return ea_bootstrap_1.Requester.success(jobRunID, {});
};
const createFighter = async (jobRunID, sport, contractAddress, input, context, config) => {
    const contract = new ethers_1.ethers.Contract(contractAddress, mma_json_1.default, config.wallet);
    const req = {
        id: jobRunID,
        data: {
            ...input.data,
            contract,
            sport,
        },
    };
    ea_bootstrap_1.Logger.debug('Creating fighter with req:', req);
    let events = [];
    if (dataProviders_1.theRundown.SPORTS_SUPPORTED.includes(sport)) {
        // Note: currently no fighter sports implemented here
        events = (await dataProviders_1.theRundown.create(req, context)).result;
    }
    else if (dataProviders_1.sportsdataio.SPORTS_SUPPORTED.includes(sport)) {
        events = (await dataProviders_1.sportsdataio.createFighter(req, context)).result;
    }
    else {
        throw Error(`Unknown data provider for sport ${sport}`);
    }
    ea_bootstrap_1.Logger.debug(`Augur: Prepared to create ${events.length} events`);
    let failed = 0;
    let succeeded = 0;
    let nonce = await config.wallet.getTransactionCount();
    for (let i = 0; i < events.length; i++) {
        const event = events[i];
        const payload = [
            event.id,
            event.fighterAname,
            event.fighterA,
            event.fighterBname,
            event.fighterB,
            Math.floor(event.startTime / 1000),
            event.moneylines,
            { nonce },
        ];
        try {
            const tx = await contract.createMarket(...payload);
            ea_bootstrap_1.Logger.debug(`Created tx: ${tx.hash}`);
            nonce++;
            succeeded++;
        }
        catch (e) {
            failed++;
            ea_bootstrap_1.Logger.error(e);
        }
    }
    ea_bootstrap_1.Logger.debug(`Augur: ${succeeded} created markets`);
    ea_bootstrap_1.Logger.debug(`Augur: ${failed} markets failed to create`);
    return ea_bootstrap_1.Requester.success(jobRunID, {});
};
//# sourceMappingURL=data:application/json;base64,