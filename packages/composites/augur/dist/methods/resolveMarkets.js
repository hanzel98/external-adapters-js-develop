"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = void 0;
const tslib_1 = require("tslib");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const index_1 = require("./index");
const ethers_1 = require("ethers");
const dataProviders_1 = require("../dataProviders");
const mma_json_1 = tslib_1.__importDefault(require("../abis/mma.json"));
const resolveParams = {
    contractAddress: true,
    sport: true,
};
const statusCompleted = [
    4,
    2,
    3, // Postponed
];
const execute = async (input, context, config) => {
    const validator = new ea_bootstrap_1.Validator(input, resolveParams);
    if (validator.error)
        throw validator.error;
    const sport = validator.validated.data.sport.toLowerCase();
    const contractAddress = validator.validated.data.contractAddress;
    if (index_1.TEAM_SPORTS.includes(sport)) {
        return await resolveTeam(input.id, sport, contractAddress, context, config);
    }
    else if (index_1.FIGHTER_SPORTS.includes(sport)) {
        return await resolveFights(input.id, sport, contractAddress, context, config);
    }
    else {
        throw Error(`Unable to identify sport "${sport}"`);
    }
};
exports.execute = execute;
const resolveTeam = async (jobRunID, sport, contractAddress, context, config) => {
    // The difference isn't meaningful here using the proper abis anyway.
    const contract = new ethers_1.ethers.Contract(contractAddress, sport === 'nfl' ? index_1.NFL_ABI : index_1.TEAM_ABI, config.wallet);
    let getEvent;
    if (dataProviders_1.theRundown.SPORTS_SUPPORTED.includes(sport)) {
        getEvent = dataProviders_1.theRundown.resolve;
    }
    else if (dataProviders_1.sportsdataio.SPORTS_SUPPORTED.includes(sport)) {
        getEvent = dataProviders_1.sportsdataio.resolveTeam;
    }
    else {
        throw Error(`Unknown data provider for sport ${sport}`);
    }
    const eventIDs = await contract.listResolvableEvents();
    const events = [];
    for (const eventId of eventIDs) {
        try {
            const response = await getEvent({
                id: jobRunID,
                data: {
                    sport,
                    eventId,
                },
            }, context);
            events.push(response.result);
        }
        catch (e) {
            ea_bootstrap_1.Logger.error(e);
        }
    }
    ea_bootstrap_1.Logger.debug(`Augur: Found ${events.length} events to attempt to resolve`);
    // Filters out events that aren't yet ready to resolve.
    const eventReadyToResolve = events.filter(({ id, status }) => {
        ea_bootstrap_1.Logger.debug(`Augur: status info`, {
            id: id.toHexString().slice(2),
            status,
            needs_resolve: statusCompleted.includes(status),
        });
        return statusCompleted.includes(status);
    });
    ea_bootstrap_1.Logger.debug(`Augur: Prepared to resolve ${eventReadyToResolve.length} events`);
    let failed = 0;
    let succeeded = 0;
    let nonce = await config.wallet.getTransactionCount();
    for (let i = 0; i < eventReadyToResolve.length; i++) {
        ea_bootstrap_1.Logger.info(`Augur: resolving event "${eventReadyToResolve[i].id}"`);
        try {
            const tx = await contract.trustedResolveMarkets(eventReadyToResolve[i].id, eventReadyToResolve[i].status, eventReadyToResolve[i].homeScore, eventReadyToResolve[i].awayScore, { nonce });
            ea_bootstrap_1.Logger.info(`Augur: Created tx: ${tx.hash}`);
            nonce++;
            succeeded++;
        }
        catch (e) {
            failed++;
            ea_bootstrap_1.Logger.error(e);
        }
    }
    ea_bootstrap_1.Logger.debug(`Augur: ${succeeded} resolved markets`);
    ea_bootstrap_1.Logger.debug(`Augur: ${failed} markets failed to resolve`);
    return ea_bootstrap_1.Requester.success(jobRunID, {});
};
const fightStatusMapping = {
    unknown: 0,
    home: 1,
    away: 2,
    draw: 3,
};
const resolveFights = async (jobRunID, sport, contractAddress, context, config) => {
    const contract = new ethers_1.ethers.Contract(contractAddress, mma_json_1.default, config.wallet);
    let getEvent;
    if (dataProviders_1.theRundown.SPORTS_SUPPORTED.includes(sport)) {
        getEvent = dataProviders_1.theRundown.resolve;
    }
    else if (dataProviders_1.sportsdataio.SPORTS_SUPPORTED.includes(sport)) {
        getEvent = dataProviders_1.sportsdataio.resolveFight;
    }
    else {
        throw Error(`Unknown data provider for sport ${sport}`);
    }
    ea_bootstrap_1.Logger.debug('Augur: Getting list of potentially resolvable events');
    const eventIDs = await contract.listResolvableEvents();
    ea_bootstrap_1.Logger.debug(`Augur: Found ${eventIDs.length} potentially resolvable events`);
    const events = [];
    for (const eventId of eventIDs) {
        try {
            const response = await getEvent({
                id: jobRunID,
                data: {
                    sport,
                    eventId,
                },
            }, context);
            events.push(response.result);
        }
        catch (e) {
            ea_bootstrap_1.Logger.error(e);
        }
    }
    // Filters out events that aren't yet ready to resolve.
    const eventReadyToResolve = events.filter(({ status }) => statusCompleted.includes(status));
    let failed = 0;
    let succeeded = 0;
    let nonce = await config.wallet.getTransactionCount();
    for (const fight of eventReadyToResolve) {
        ea_bootstrap_1.Logger.info(`Augur: resolving event "${fight.id.toString()}"`);
        let fightStatus = 0;
        if (fight.draw) {
            fightStatus = fightStatusMapping.draw;
        }
        else if (fight.winnerId === fight.fighterA) {
            fightStatus = fightStatusMapping.home;
        }
        else if (fight.winnerId === fight.fighterB) {
            fightStatus = fightStatusMapping.away;
        }
        const payload = [fight.id, fight.status, fight.fighterA, fight.fighterB, fightStatus, { nonce }];
        // This call resolves markets.
        try {
            ea_bootstrap_1.Logger.debug(`Augur: Resolving market with these arguments: ${JSON.stringify(payload)}`);
            const tx = await contract.trustedResolveMarkets(...payload);
            ea_bootstrap_1.Logger.info(`Augur: Created tx: ${tx.hash}`);
            nonce++;
            succeeded++;
        }
        catch (e) {
            failed++;
            ea_bootstrap_1.Logger.error(e);
        }
    }
    ea_bootstrap_1.Logger.debug(`Augur: ${succeeded} resolved markets`);
    ea_bootstrap_1.Logger.debug(`Augur: ${failed} markets failed to resolve`);
    return ea_bootstrap_1.Requester.success(jobRunID, {});
};
//# sourceMappingURL=data:application/json;base64,