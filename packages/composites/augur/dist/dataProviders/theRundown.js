"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolve = exports.numToEventId = exports.create = exports.sportIdMapping = exports.SPORTS_SUPPORTED = void 0;
const tslib_1 = require("tslib");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const TheRundown = tslib_1.__importStar(require("@chainlink/therundown-adapter"));
const ethers_1 = require("ethers");
exports.SPORTS_SUPPORTED = ['mlb', 'nba'];
exports.sportIdMapping = {
    MLB: 3,
    NBA: 4,
};
const eventIdToNum = (eventId) => ethers_1.BigNumber.from(`0x${eventId}`);
const TBD_TEAM_ID = 2756;
const createParams = {
    sport: true,
    daysInAdvance: true,
    startBuffer: true,
    contract: true,
    affiliateIds: true,
};
const addDays = (date, days) => {
    const newDate = new Date(date);
    newDate.setDate(date.getDate() + days);
    return newDate;
};
const create = async (input, context) => {
    const validator = new ea_bootstrap_1.Validator(input, createParams);
    if (validator.error)
        throw validator.error;
    const sport = validator.validated.data.sport.toUpperCase();
    const sportId = exports.sportIdMapping[sport];
    const daysInAdvance = validator.validated.data.daysInAdvance;
    const startBuffer = validator.validated.data.startBuffer;
    const contract = validator.validated.data.contract;
    const affiliateIds = validator.validated.data.affiliateIds;
    const getAffiliateId = (event) => affiliateIds.find((id) => !!event.lines && id in event.lines);
    const params = {
        id: input.id,
        data: {
            sportId,
            status: 'STATUS_SCHEDULED',
            date: new Date(),
            endpoint: 'events',
        },
    };
    const theRundownExec = TheRundown.makeExecute(TheRundown.makeConfig(TheRundown.NAME));
    const events = [];
    ea_bootstrap_1.Logger.debug(`Augur theRundown: Fetching data from therundown for ${sport} (${sportId})`);
    for (let i = 0; i < daysInAdvance; i++) {
        params.data.date = addDays(params.data.date, 1);
        ea_bootstrap_1.Logger.debug(`Augur theRundown: Fetching data for date ${params.data.date}`);
        const response = await theRundownExec(params, context);
        events.push(...response.result);
    }
    ea_bootstrap_1.Logger.debug(`Augur theRundown: Got ${events.length} events from data provider`);
    let skipTBD = 0, skipStartBuffer = 0, skipNoTeams = 0, cantCreate = 0, skipTBDTeams = 0;
    // filter markets and build payloads for market creation
    const eventsToCreate = [];
    for (const event of events) {
        if (event.score.event_status_detail.toUpperCase() === 'TBD') {
            skipTBD++;
            continue;
        }
        const startTime = Date.parse(event.event_date);
        if ((startTime - Date.now()) / 1000 < startBuffer) {
            // markets would end too soon
            skipStartBuffer++;
            continue;
        }
        // skip if data is missing
        const affiliateId = getAffiliateId(event);
        const homeTeam = event.teams_normalized.find((team) => team.is_home);
        const awayTeam = event.teams_normalized.find((team) => team.is_away);
        if (!homeTeam || !awayTeam) {
            skipNoTeams++;
            continue;
        }
        // skip if a team hasn't been announced yet
        if (homeTeam.team_id === TBD_TEAM_ID || awayTeam.team_id === TBD_TEAM_ID) {
            skipTBDTeams++;
            continue;
        }
        const eventId = eventIdToNum(event.event_id);
        const [headToHeadMarket, spreadMarket, totalScoreMarket] = await contract.getEventMarkets(eventId);
        // Only create head-to-head market if moneylines exist. Only create spread and total-score markets if their lines exist.
        const moneylineHome = transformSpecialNone(affiliateId && event.lines?.[affiliateId].moneyline.moneyline_home);
        const moneylineAway = transformSpecialNone(affiliateId && event.lines?.[affiliateId].moneyline.moneyline_away);
        const homeSpread = transformSpecialNone(affiliateId && event.lines?.[affiliateId].spread.point_spread_home);
        const totalScore = transformSpecialNone(affiliateId && event.lines?.[affiliateId].total.total_over);
        const createHeadToHead = headToHeadMarket.isZero() && moneylineHome && moneylineAway;
        const createSpread = sport !== 'MLB' && spreadMarket.isZero() && homeSpread !== undefined;
        const createTotalScore = sport !== 'MLB' && totalScoreMarket.isZero() && totalScore !== undefined;
        const canCreate = createHeadToHead || createSpread || createTotalScore;
        if (!canCreate) {
            cantCreate++;
            continue;
        }
        eventsToCreate.push({
            id: eventId,
            homeTeamName: 'Home',
            homeTeamId: homeTeam.team_id,
            awayTeamName: 'Away',
            awayTeamId: awayTeam.team_id,
            startTime,
            homeSpread: homeSpread || 0,
            totalScore: totalScore || 0,
            createSpread,
            createTotalScore,
            moneylines: [moneylineHome || 0, moneylineAway || 0],
        });
    }
    ea_bootstrap_1.Logger.debug(`Augur theRundown: Skipping ${skipTBD} due to TBD status`);
    ea_bootstrap_1.Logger.debug(`Augur theRundown: Skipping ${skipStartBuffer} due to startBuffer`);
    ea_bootstrap_1.Logger.debug(`Augur theRundown: Skipping ${skipNoTeams} due to no teams`);
    ea_bootstrap_1.Logger.debug(`Augur theRundown: Skipping ${skipTBDTeams} due to TBD teams`);
    ea_bootstrap_1.Logger.debug(`Augur theRundown: Skipping ${cantCreate} due to no market to create`);
    return ea_bootstrap_1.Requester.success(input.id, {
        data: { result: eventsToCreate },
    });
};
exports.create = create;
/**
 * TheRundown API returns `0.0001` as a special case which should
 * be treated as the value is `undefined`. This function transforms
 * `0.0001` to `undefined`, and leaves `val` unchanged otherwise.
 * @param {number} val - The value returned from the API
 * @return {number|undefined} Transformed `val`
 */
const transformSpecialNone = (val) => (val === 0.0001 ? undefined : val);
const eventStatus = {
    STATUS_SCHEDULED: 1,
    STATUS_FINAL: 2,
    STATUS_POSTPONED: 3,
    STATUS_CANCELED: 4,
    STATUS_SUSPENDED: 4, // treating as canceled
};
const resolveParams = {
    sport: true,
    eventId: true,
};
const numToEventId = (num) => num.toHexString().slice(2);
exports.numToEventId = numToEventId;
const resolve = async (input, context) => {
    const validator = new ea_bootstrap_1.Validator(input, resolveParams);
    if (validator.error)
        throw validator.error;
    const theRundownExec = TheRundown.makeExecute({
        ...TheRundown.makeConfig(TheRundown.NAME),
        // Need ALL the response data.
        verbose: true,
    });
    const sport = validator.validated.data.sport;
    const sportId = exports.sportIdMapping[sport.toUpperCase()];
    const eventId = exports.numToEventId(validator.validated.data.eventId);
    const req = {
        id: input.id,
        data: {
            endpoint: 'event',
            sportId,
            eventId,
        },
    };
    const response = (await theRundownExec(req, context)).data;
    const event = {
        id: eventIdToNum(response.event_id),
        status: eventStatus[response.score.event_status],
        homeScore: response.score.score_home,
        awayScore: response.score.score_away,
    };
    return ea_bootstrap_1.Requester.success(input.id, {
        data: { result: event },
    });
};
exports.resolve = resolve;
//# sourceMappingURL=data:application/json;base64,