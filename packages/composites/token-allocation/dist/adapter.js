"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExecute = exports.execute = exports.marketCapTotalValue = exports.priceTotalValue = void 0;
const config_1 = require("./config");
const decimal_js_1 = require("decimal.js");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const ethers_1 = require("ethers");
const dataProvider_1 = require("./dataProvider");
decimal_js_1.Decimal.set({ precision: 100 });
const priceTotalValue = (source, allocations, quote, data) => {
    return allocations
        .reduce((acc, t) => {
        const val = data[t.symbol].quote[quote].price;
        if (!val)
            throw new Error(`ERROR: No price value found for ${t.symbol}/${quote} from the ${source} adapter.`);
        const coins = new decimal_js_1.Decimal(t.balance.toString(10)).div(10 ** t.decimals);
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return acc.add(coins.mul(val));
    }, new decimal_js_1.Decimal(0))
        .toNumber();
};
exports.priceTotalValue = priceTotalValue;
const marketCapTotalValue = (source, allocations, quote, data) => {
    return allocations
        .reduce((acc, t) => {
        const val = data[t.symbol].quote[quote].marketCap;
        if (!val)
            throw new Error(`ERROR: No marketcap value found for ${t.symbol}/${quote} from the ${source} adapter.`);
        const coins = new decimal_js_1.Decimal(t.balance.toString(10)).div(10 ** t.decimals);
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return acc.add(coins.mul(val));
    }, new decimal_js_1.Decimal(0))
        .toNumber();
};
exports.marketCapTotalValue = marketCapTotalValue;
const toValidAllocations = (allocations) => {
    const _toValidSymbol = (symbol) => {
        if (!symbol)
            throw new ea_bootstrap_1.AdapterError({ message: `Symbol not available for all tokens.`, statusCode: 400 });
        return symbol.toUpperCase();
    };
    const _toValidDecimals = (decimals) => {
        if (decimals === undefined)
            return config_1.DEFAULT_TOKEN_DECIMALS;
        return Number.isInteger(decimals) && decimals >= 0 ? decimals : config_1.DEFAULT_TOKEN_DECIMALS;
    };
    const _toValidBalance = (balance, decimals) => {
        if (!balance)
            return config_1.DEFAULT_TOKEN_BALANCE * 10 ** decimals;
        let BNbalance;
        try {
            BNbalance = ethers_1.BigNumber.from(balance.toString());
        }
        catch (e) {
            throw new ea_bootstrap_1.AdapterError({ message: `Invalid balance: ${e.message}`, statusCode: 400 });
        }
        if (BNbalance.isNegative())
            throw new ea_bootstrap_1.AdapterError({ message: `Balance cannot be negative`, statusCode: 400 });
        return balance;
    };
    return allocations.map((t) => {
        const decimals = _toValidDecimals(t.decimals);
        return {
            symbol: _toValidSymbol(t.symbol),
            decimals,
            balance: _toValidBalance(t.balance, decimals),
        };
    });
};
const computePrice = async (source, getPrices, allocations, quote) => {
    const symbols = allocations.map((t) => t.symbol);
    const payload = await getPrices(symbols, quote);
    const result = exports.priceTotalValue(source, allocations, quote, payload);
    return { payload, result };
};
const computeMarketCap = async (source, getPrices, allocations, quote) => {
    const symbols = allocations.map((t) => t.symbol);
    const payload = await getPrices(symbols, quote, true);
    const result = exports.marketCapTotalValue(source, allocations, quote, payload);
    return { payload, result };
};
const inputParams = {
    source: false,
    allocations: true,
    quote: false,
    method: false,
};
const execute = async (input, config) => {
    const paramOptions = config_1.makeOptions(config);
    const validator = new ea_bootstrap_1.Validator(input, inputParams, paramOptions);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const { quote = config.defaultQuote, method = config.defaultMethod } = validator.validated.data;
    const allocations = toValidAllocations(validator.validated.data.allocations);
    const source = (validator.validated.data.source ||
        config.defaultSource ||
        '').toLowerCase();
    if (source === '') {
        throw Error('No source specified in the request or config!');
    }
    const sourceConfig = config.sources[source];
    const _success = (payload, result) => ea_bootstrap_1.Requester.success(jobRunID, {
        status: 200,
        data: { sources: [], payload, result },
    }, true);
    const getPrices = dataProvider_1.getPriceProvider(source, jobRunID, sourceConfig.api);
    switch (method.toLowerCase()) {
        case 'price': {
            const price = await computePrice(source, getPrices, allocations, quote);
            return _success(price.payload, price.result);
        }
        case 'marketcap': {
            const marketCap = await computeMarketCap(source, getPrices, allocations, quote);
            return _success(marketCap.payload, marketCap.result);
        }
        default:
            throw new ea_bootstrap_1.AdapterError({
                jobRunID,
                message: `Method ${method} not supported.`,
                statusCode: 400,
            });
    }
};
exports.execute = execute;
const makeExecute = (config) => {
    return async (request) => exports.execute(request, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
//# sourceMappingURL=data:application/json;base64,