"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExecute = exports.execute = void 0;
const tslib_1 = require("tslib");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const index_allocations_1 = require("./index-allocations");
const TokenAllocation = tslib_1.__importStar(require("@chainlink/token-allocation-adapter"));
const config_1 = require("./config");
const customParams = {
    name: false,
    asset: false,
    address: true,
    adapter: true,
};
const execute = async (input, context, config) => {
    ea_bootstrap_1.Logger.warn(`WARN: This EA will be deprecated, 'set-token-index' will be used for future reference.`);
    const validator = new ea_bootstrap_1.Validator(input, customParams);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const asset = validator.validated.data;
    const allocations = await index_allocations_1.getAllocations(asset.adapter, asset.address, config.rpcUrl, config.network);
    const _execute = TokenAllocation.makeExecute();
    return await _execute({ id: jobRunID, data: { ...input.data, allocations } }, context);
};
exports.execute = execute;
const makeExecute = (config) => {
    return async (request, context) => exports.execute(request, context, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSwwREFBMkQ7QUFFM0QsMkRBQW9EO0FBQ3BELDZGQUFzRTtBQUN0RSxxQ0FBNkM7QUFFN0MsTUFBTSxZQUFZLEdBQUc7SUFDbkIsSUFBSSxFQUFFLEtBQUs7SUFDWCxLQUFLLEVBQUUsS0FBSztJQUNaLE9BQU8sRUFBRSxJQUFJO0lBQ2IsT0FBTyxFQUFFLElBQUk7Q0FDZCxDQUFBO0FBRU0sTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUMxQixLQUFxQixFQUNyQixPQUF1QixFQUN2QixNQUFjLEVBQ1ksRUFBRTtJQUM1QixxQkFBTSxDQUFDLElBQUksQ0FDVCx3RkFBd0YsQ0FDekYsQ0FBQTtJQUNELE1BQU0sU0FBUyxHQUFHLElBQUksd0JBQVMsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUE7SUFDcEQsSUFBSSxTQUFTLENBQUMsS0FBSztRQUFFLE1BQU0sU0FBUyxDQUFDLEtBQUssQ0FBQTtJQUUxQyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQTtJQUN2QyxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQTtJQUV0QyxNQUFNLFdBQVcsR0FBRyxNQUFNLGtDQUFjLENBQ3RDLEtBQUssQ0FBQyxPQUFPLEVBQ2IsS0FBSyxDQUFDLE9BQU8sRUFDYixNQUFNLENBQUMsTUFBTSxFQUNiLE1BQU0sQ0FBQyxPQUFPLENBQ2YsQ0FBQTtJQUVELE1BQU0sUUFBUSxHQUFHLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUM5QyxPQUFPLE1BQU0sUUFBUSxDQUFDLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQTtBQUN4RixDQUFDLENBQUE7QUF2QlksUUFBQSxPQUFPLFdBdUJuQjtBQUVNLE1BQU0sV0FBVyxHQUFHLENBQUMsTUFBZSxFQUFXLEVBQUU7SUFDdEQsT0FBTyxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsZUFBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxJQUFJLG1CQUFVLEVBQUUsQ0FBQyxDQUFBO0FBQ3RGLENBQUMsQ0FBQTtBQUZZLFFBQUEsV0FBVyxlQUV2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvZ2dlciwgVmFsaWRhdG9yIH0gZnJvbSAnQGNoYWlubGluay9lYS1ib290c3RyYXAnXG5pbXBvcnQgeyBBZGFwdGVyUmVzcG9uc2UsIEFkYXB0ZXJSZXF1ZXN0LCBFeGVjdXRlLCBBZGFwdGVyQ29udGV4dCB9IGZyb20gJ0BjaGFpbmxpbmsvdHlwZXMnXG5pbXBvcnQgeyBnZXRBbGxvY2F0aW9ucyB9IGZyb20gJy4vaW5kZXgtYWxsb2NhdGlvbnMnXG5pbXBvcnQgKiBhcyBUb2tlbkFsbG9jYXRpb24gZnJvbSAnQGNoYWlubGluay90b2tlbi1hbGxvY2F0aW9uLWFkYXB0ZXInXG5pbXBvcnQgeyBtYWtlQ29uZmlnLCBDb25maWcgfSBmcm9tICcuL2NvbmZpZydcblxuY29uc3QgY3VzdG9tUGFyYW1zID0ge1xuICBuYW1lOiBmYWxzZSxcbiAgYXNzZXQ6IGZhbHNlLFxuICBhZGRyZXNzOiB0cnVlLFxuICBhZGFwdGVyOiB0cnVlLFxufVxuXG5leHBvcnQgY29uc3QgZXhlY3V0ZSA9IGFzeW5jIChcbiAgaW5wdXQ6IEFkYXB0ZXJSZXF1ZXN0LFxuICBjb250ZXh0OiBBZGFwdGVyQ29udGV4dCxcbiAgY29uZmlnOiBDb25maWcsXG4pOiBQcm9taXNlPEFkYXB0ZXJSZXNwb25zZT4gPT4ge1xuICBMb2dnZXIud2FybihcbiAgICBgV0FSTjogVGhpcyBFQSB3aWxsIGJlIGRlcHJlY2F0ZWQsICdzZXQtdG9rZW4taW5kZXgnIHdpbGwgYmUgdXNlZCBmb3IgZnV0dXJlIHJlZmVyZW5jZS5gLFxuICApXG4gIGNvbnN0IHZhbGlkYXRvciA9IG5ldyBWYWxpZGF0b3IoaW5wdXQsIGN1c3RvbVBhcmFtcylcbiAgaWYgKHZhbGlkYXRvci5lcnJvcikgdGhyb3cgdmFsaWRhdG9yLmVycm9yXG5cbiAgY29uc3Qgam9iUnVuSUQgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmlkXG4gIGNvbnN0IGFzc2V0ID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhXG5cbiAgY29uc3QgYWxsb2NhdGlvbnMgPSBhd2FpdCBnZXRBbGxvY2F0aW9ucyhcbiAgICBhc3NldC5hZGFwdGVyLFxuICAgIGFzc2V0LmFkZHJlc3MsXG4gICAgY29uZmlnLnJwY1VybCxcbiAgICBjb25maWcubmV0d29yayxcbiAgKVxuXG4gIGNvbnN0IF9leGVjdXRlID0gVG9rZW5BbGxvY2F0aW9uLm1ha2VFeGVjdXRlKClcbiAgcmV0dXJuIGF3YWl0IF9leGVjdXRlKHsgaWQ6IGpvYlJ1bklELCBkYXRhOiB7IC4uLmlucHV0LmRhdGEsIGFsbG9jYXRpb25zIH0gfSwgY29udGV4dClcbn1cblxuZXhwb3J0IGNvbnN0IG1ha2VFeGVjdXRlID0gKGNvbmZpZz86IENvbmZpZyk6IEV4ZWN1dGUgPT4ge1xuICByZXR1cm4gYXN5bmMgKHJlcXVlc3QsIGNvbnRleHQpID0+IGV4ZWN1dGUocmVxdWVzdCwgY29udGV4dCwgY29uZmlnIHx8IG1ha2VDb25maWcoKSlcbn1cbiJdfQ==