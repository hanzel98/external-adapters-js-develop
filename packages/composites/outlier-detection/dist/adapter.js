"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExecute = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const ea_reference_data_reader_1 = require("@chainlink/ea-reference-data-reader");
const config_1 = require("./config");
const customParams = {
    referenceContract: ['referenceContract', 'contract'],
    multiply: true,
    source: true,
    check: false,
    check_threshold: false,
    onchain_threshold: false,
    network: false,
};
const execute = async (input, _, config) => {
    const paramOptions = config_1.makeOptions(config);
    const validator = new ea_bootstrap_1.Validator(input, customParams, paramOptions);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.jobRunID;
    const source = validator.validated.data.source.toUpperCase();
    const check = validator.validated.data.check?.toUpperCase();
    const check_threshold = validator.validated.data.check_threshold || config_1.DEFAULT_CHECK_THRESHOLD;
    const onchain_threshold = validator.validated.data.onchain_threshold || config_1.DEFAULT_ONCHAIN_THRESHOLD;
    const { referenceContract, multiply } = validator.validated.data;
    const network = validator.validated.data.network || config_1.DEFAULT_NETWORK;
    const onchainValue = await ea_reference_data_reader_1.getLatestAnswer(network, referenceContract, multiply, input.meta);
    const sourceMedian = await getExecuteMedian(config.sources, source, input);
    if (onchain_threshold > 0) {
        if (difference(sourceMedian, onchainValue) > onchain_threshold) {
            return success(jobRunID, onchainValue);
        }
    }
    if (check_threshold > 0) {
        if (!check) {
            throw Error('No check adapters provided');
        }
        const checkMedian = await getExecuteMedian(config.checks, check, input);
        if (difference(sourceMedian, checkMedian) > check_threshold) {
            return success(jobRunID, onchainValue);
        }
    }
    return success(jobRunID, sourceMedian);
};
const getExecuteMedian = async (options, adapters, request) => {
    const responses = await Promise.allSettled(adapters.split(',').map(async (a) => await ea_bootstrap_1.Requester.request({
        ...options[a],
        data: request,
    })));
    const values = responses
        .filter((result) => result.status === 'fulfilled' && 'value' in result)
        .map((result) => result.value.data.result);
    if (values.length === 0)
        throw Error('Unable to fetch value from any of the data providers');
    return median(values);
};
const median = (values) => {
    if (values.length === 0)
        return 0;
    values.sort((a, b) => a - b);
    const half = Math.floor(values.length / 2);
    if (values.length % 2)
        return values[half];
    return (values[half - 1] + values[half]) / 2.0;
};
const difference = (a, b) => {
    return (Math.abs(a - b) / ((a + b) / 2)) * 100;
};
const success = (jobRunID, result) => {
    const response = { data: { result }, status: 200 };
    return ea_bootstrap_1.Requester.success(jobRunID, response);
};
const makeExecute = (config) => {
    return async (request, context) => execute(request, context, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
//# sourceMappingURL=data:application/json;base64,