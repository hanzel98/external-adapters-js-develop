"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeOptions = exports.makeRequestOptions = exports.makeConfig = exports.DEFAULT_NETWORK = exports.DEFAULT_ONCHAIN_THRESHOLD = exports.DEFAULT_CHECK_THRESHOLD = void 0;
const tslib_1 = require("tslib");
const ea_1 = tslib_1.__importDefault(require("@chainlink/ea"));
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
exports.DEFAULT_CHECK_THRESHOLD = 0;
exports.DEFAULT_ONCHAIN_THRESHOLD = 0;
exports.DEFAULT_NETWORK = 'ETHEREUM';
const makeConfig = (prefix = '') => {
    const sources = {};
    const checks = {};
    for (const a of ea_1.default.sources) {
        const url = ea_bootstrap_1.util.getURL(a.toUpperCase());
        if (url) {
            sources[a] = exports.makeRequestOptions(prefix, url);
            checks[a] = exports.makeRequestOptions(prefix, url);
        }
    }
    return { sources, checks, api: {} };
};
exports.makeConfig = makeConfig;
const makeRequestOptions = (prefix, url) => {
    const defaultConfig = ea_bootstrap_1.Requester.getDefaultConfig(prefix);
    return {
        ...defaultConfig.api,
        method: 'post',
        url,
    };
};
exports.makeRequestOptions = makeRequestOptions;
const makeOptions = ({ sources, checks }) => {
    return {
        source: ea_bootstrap_1.util.permutator(Object.keys(sources).map((value) => value.toLowerCase()), ','),
        check: ea_bootstrap_1.util.permutator(Object.keys(checks).map((value) => value.toLowerCase()), ','),
    };
};
exports.makeOptions = makeOptions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsK0RBQWlDO0FBQ2pDLDBEQUF5RDtBQUc1QyxRQUFBLHVCQUF1QixHQUFHLENBQUMsQ0FBQTtBQUMzQixRQUFBLHlCQUF5QixHQUFHLENBQUMsQ0FBQTtBQUM3QixRQUFBLGVBQWUsR0FBRyxVQUFVLENBQUE7QUFXbEMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxNQUFNLEdBQUcsRUFBRSxFQUFVLEVBQUU7SUFDaEQsTUFBTSxPQUFPLEdBQXlCLEVBQUUsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBd0IsRUFBRSxDQUFBO0lBQ3RDLEtBQUssTUFBTSxDQUFDLElBQUksWUFBSyxDQUFDLE9BQU8sRUFBRTtRQUM3QixNQUFNLEdBQUcsR0FBRyxtQkFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQTtRQUN4QyxJQUFJLEdBQUcsRUFBRTtZQUNQLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRywwQkFBa0IsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUE7WUFDNUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLDBCQUFrQixDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQTtTQUM1QztLQUNGO0lBQ0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFBO0FBQ3JDLENBQUMsQ0FBQTtBQVhZLFFBQUEsVUFBVSxjQVd0QjtBQUVNLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxNQUFjLEVBQUUsR0FBVyxFQUFpQixFQUFFO0lBQy9FLE1BQU0sYUFBYSxHQUFHLHdCQUFTLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDeEQsT0FBTztRQUNMLEdBQUcsYUFBYSxDQUFDLEdBQUc7UUFDcEIsTUFBTSxFQUFFLE1BQU07UUFDZCxHQUFHO0tBQ0osQ0FBQTtBQUNILENBQUMsQ0FBQTtBQVBZLFFBQUEsa0JBQWtCLHNCQU85QjtBQUVNLE1BQU0sV0FBVyxHQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFVLEVBQUUsRUFBRTtJQUN6RCxPQUFPO1FBQ0wsTUFBTSxFQUFFLG1CQUFJLENBQUMsVUFBVSxDQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQ3hELEdBQUcsQ0FDSjtRQUNELEtBQUssRUFBRSxtQkFBSSxDQUFDLFVBQVUsQ0FDcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUN2RCxHQUFHLENBQ0o7S0FDRixDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBWFksUUFBQSxXQUFXLGVBV3ZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxlZ29zIGZyb20gJ0BjaGFpbmxpbmsvZWEnXG5pbXBvcnQgeyBSZXF1ZXN0ZXIsIHV0aWwgfSBmcm9tICdAY2hhaW5saW5rL2VhLWJvb3RzdHJhcCdcbmltcG9ydCB7IENvbmZpZyBhcyBCYXNlQ29uZmlnLCBSZXF1ZXN0Q29uZmlnIH0gZnJvbSAnQGNoYWlubGluay90eXBlcydcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfQ0hFQ0tfVEhSRVNIT0xEID0gMFxuZXhwb3J0IGNvbnN0IERFRkFVTFRfT05DSEFJTl9USFJFU0hPTEQgPSAwXG5leHBvcnQgY29uc3QgREVGQVVMVF9ORVRXT1JLID0gJ0VUSEVSRVVNJ1xuXG5leHBvcnQgdHlwZSBTb3VyY2VSZXF1ZXN0T3B0aW9ucyA9IHsgW3NvdXJjZTogc3RyaW5nXTogUmVxdWVzdENvbmZpZyB9XG5leHBvcnQgdHlwZSBDaGVja1JlcXVlc3RPcHRpb25zID0geyBbY2hlY2s6IHN0cmluZ106IFJlcXVlc3RDb25maWcgfVxuXG5leHBvcnQgdHlwZSBDb25maWcgPSBCYXNlQ29uZmlnICYge1xuICBzb3VyY2VzOiBTb3VyY2VSZXF1ZXN0T3B0aW9uc1xuICBjaGVja3M6IENoZWNrUmVxdWVzdE9wdGlvbnNcbiAgYXBpOiBhbnlcbn1cblxuZXhwb3J0IGNvbnN0IG1ha2VDb25maWcgPSAocHJlZml4ID0gJycpOiBDb25maWcgPT4ge1xuICBjb25zdCBzb3VyY2VzOiBTb3VyY2VSZXF1ZXN0T3B0aW9ucyA9IHt9XG4gIGNvbnN0IGNoZWNrczogQ2hlY2tSZXF1ZXN0T3B0aW9ucyA9IHt9XG4gIGZvciAoY29uc3QgYSBvZiBsZWdvcy5zb3VyY2VzKSB7XG4gICAgY29uc3QgdXJsID0gdXRpbC5nZXRVUkwoYS50b1VwcGVyQ2FzZSgpKVxuICAgIGlmICh1cmwpIHtcbiAgICAgIHNvdXJjZXNbYV0gPSBtYWtlUmVxdWVzdE9wdGlvbnMocHJlZml4LCB1cmwpXG4gICAgICBjaGVja3NbYV0gPSBtYWtlUmVxdWVzdE9wdGlvbnMocHJlZml4LCB1cmwpXG4gICAgfVxuICB9XG4gIHJldHVybiB7IHNvdXJjZXMsIGNoZWNrcywgYXBpOiB7fSB9XG59XG5cbmV4cG9ydCBjb25zdCBtYWtlUmVxdWVzdE9wdGlvbnMgPSAocHJlZml4OiBzdHJpbmcsIHVybDogc3RyaW5nKTogUmVxdWVzdENvbmZpZyA9PiB7XG4gIGNvbnN0IGRlZmF1bHRDb25maWcgPSBSZXF1ZXN0ZXIuZ2V0RGVmYXVsdENvbmZpZyhwcmVmaXgpXG4gIHJldHVybiB7XG4gICAgLi4uZGVmYXVsdENvbmZpZy5hcGksXG4gICAgbWV0aG9kOiAncG9zdCcsXG4gICAgdXJsLFxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBtYWtlT3B0aW9ucyA9ICh7IHNvdXJjZXMsIGNoZWNrcyB9OiBDb25maWcpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBzb3VyY2U6IHV0aWwucGVybXV0YXRvcihcbiAgICAgIE9iamVjdC5rZXlzKHNvdXJjZXMpLm1hcCgodmFsdWUpID0+IHZhbHVlLnRvTG93ZXJDYXNlKCkpLFxuICAgICAgJywnLFxuICAgICksXG4gICAgY2hlY2s6IHV0aWwucGVybXV0YXRvcihcbiAgICAgIE9iamVjdC5rZXlzKGNoZWNrcykubWFwKCh2YWx1ZSkgPT4gdmFsdWUudG9Mb3dlckNhc2UoKSksXG4gICAgICAnLCcsXG4gICAgKSxcbiAgfVxufVxuIl19