"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExecute = exports.execute = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("./config");
const customParams = {
    primarySource: true,
    secondarySource: true,
};
const execute = async (input, _, config) => {
    const validator = new ea_bootstrap_1.Validator(input, customParams);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.jobRunID;
    const primarySource = validator.validated.data.primarySource;
    const secondarySource = validator.validated.data.secondarySource;
    const sources = secondarySource ? [primarySource, secondarySource] : [primarySource];
    const urls = sources.map((source) => ea_bootstrap_1.util.getRequiredURL(source.toUpperCase()));
    return getResults(jobRunID, sources, urls, input, config);
};
exports.execute = execute;
const makeExecute = (config) => {
    return async (request, context) => exports.execute(request, context, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
const getResults = async (jobRunID, sources, urls, request, config) => {
    try {
        ea_bootstrap_1.Logger.info(`Trying to get result from ${sources[0]}`);
        return ea_bootstrap_1.Requester.success(jobRunID, await ea_bootstrap_1.Requester.request({
            ...config.api,
            method: 'post',
            url: urls[0],
            data: request,
        }));
    }
    catch (e) {
        ea_bootstrap_1.Logger.info(`Could not get result from ${sources[0]}, trying to get result from ${sources[1]}`);
        return ea_bootstrap_1.Requester.success(jobRunID, await ea_bootstrap_1.Requester.request({
            ...config.api,
            method: 'post',
            url: urls[1],
            data: request,
        }));
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUE0RTtBQVE1RSxxQ0FBcUM7QUFFckMsTUFBTSxZQUFZLEdBQUc7SUFDbkIsYUFBYSxFQUFFLElBQUk7SUFDbkIsZUFBZSxFQUFFLElBQUk7Q0FDdEIsQ0FBQTtBQUVNLE1BQU0sT0FBTyxHQUE4QixLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRTtJQUMzRSxNQUFNLFNBQVMsR0FBRyxJQUFJLHdCQUFTLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFBO0lBQ3BELElBQUksU0FBUyxDQUFDLEtBQUs7UUFBRSxNQUFNLFNBQVMsQ0FBQyxLQUFLLENBQUE7SUFFMUMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUE7SUFDN0MsTUFBTSxhQUFhLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFBO0lBQzVELE1BQU0sZUFBZSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQTtJQUNoRSxNQUFNLE9BQU8sR0FBRyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBQ3BGLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLG1CQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDL0UsT0FBTyxVQUFVLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0FBQzNELENBQUMsQ0FBQTtBQVZZLFFBQUEsT0FBTyxXQVVuQjtBQUVNLE1BQU0sV0FBVyxHQUEyQixDQUFDLE1BQU0sRUFBRSxFQUFFO0lBQzVELE9BQU8sS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLGVBQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sSUFBSSxtQkFBVSxFQUFFLENBQUMsQ0FBQTtBQUN0RixDQUFDLENBQUE7QUFGWSxRQUFBLFdBQVcsZUFFdkI7QUFFRCxNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQ3RCLFFBQWdCLEVBQ2hCLE9BQWlCLEVBQ2pCLElBQWMsRUFDZCxPQUF1QixFQUN2QixNQUFjLEVBQ1ksRUFBRTtJQUM1QixJQUFJO1FBQ0YscUJBQU0sQ0FBQyxJQUFJLENBQUMsNkJBQTZCLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDdEQsT0FBTyx3QkFBUyxDQUFDLE9BQU8sQ0FDdEIsUUFBUSxFQUNSLE1BQU0sd0JBQVMsQ0FBQyxPQUFPLENBQUM7WUFDdEIsR0FBRyxNQUFNLENBQUMsR0FBRztZQUNiLE1BQU0sRUFBRSxNQUFNO1lBQ2QsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDWixJQUFJLEVBQUUsT0FBTztTQUNkLENBQUMsQ0FDSCxDQUFBO0tBQ0Y7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLHFCQUFNLENBQUMsSUFBSSxDQUFDLDZCQUE2QixPQUFPLENBQUMsQ0FBQyxDQUFDLCtCQUErQixPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQy9GLE9BQU8sd0JBQVMsQ0FBQyxPQUFPLENBQ3RCLFFBQVEsRUFDUixNQUFNLHdCQUFTLENBQUMsT0FBTyxDQUFDO1lBQ3RCLEdBQUcsTUFBTSxDQUFDLEdBQUc7WUFDYixNQUFNLEVBQUUsTUFBTTtZQUNkLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ1osSUFBSSxFQUFFLE9BQU87U0FDZCxDQUFDLENBQ0gsQ0FBQTtLQUNGO0FBQ0gsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdGVyLCB1dGlsLCBWYWxpZGF0b3IsIExvZ2dlciB9IGZyb20gJ0BjaGFpbmxpbmsvZWEtYm9vdHN0cmFwJ1xuaW1wb3J0IHtcbiAgQWRhcHRlclJlc3BvbnNlLFxuICBBZGFwdGVyUmVxdWVzdCxcbiAgRXhlY3V0ZVdpdGhDb25maWcsXG4gIENvbmZpZyxcbiAgRXhlY3V0ZUZhY3RvcnksXG59IGZyb20gJ0BjaGFpbmxpbmsvdHlwZXMnXG5pbXBvcnQgeyBtYWtlQ29uZmlnIH0gZnJvbSAnLi9jb25maWcnXG5cbmNvbnN0IGN1c3RvbVBhcmFtcyA9IHtcbiAgcHJpbWFyeVNvdXJjZTogdHJ1ZSxcbiAgc2Vjb25kYXJ5U291cmNlOiB0cnVlLFxufVxuXG5leHBvcnQgY29uc3QgZXhlY3V0ZTogRXhlY3V0ZVdpdGhDb25maWc8Q29uZmlnPiA9IGFzeW5jIChpbnB1dCwgXywgY29uZmlnKSA9PiB7XG4gIGNvbnN0IHZhbGlkYXRvciA9IG5ldyBWYWxpZGF0b3IoaW5wdXQsIGN1c3RvbVBhcmFtcylcbiAgaWYgKHZhbGlkYXRvci5lcnJvcikgdGhyb3cgdmFsaWRhdG9yLmVycm9yXG5cbiAgY29uc3Qgam9iUnVuSUQgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmpvYlJ1bklEXG4gIGNvbnN0IHByaW1hcnlTb3VyY2UgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmRhdGEucHJpbWFyeVNvdXJjZVxuICBjb25zdCBzZWNvbmRhcnlTb3VyY2UgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmRhdGEuc2Vjb25kYXJ5U291cmNlXG4gIGNvbnN0IHNvdXJjZXMgPSBzZWNvbmRhcnlTb3VyY2UgPyBbcHJpbWFyeVNvdXJjZSwgc2Vjb25kYXJ5U291cmNlXSA6IFtwcmltYXJ5U291cmNlXVxuICBjb25zdCB1cmxzID0gc291cmNlcy5tYXAoKHNvdXJjZSkgPT4gdXRpbC5nZXRSZXF1aXJlZFVSTChzb3VyY2UudG9VcHBlckNhc2UoKSkpXG4gIHJldHVybiBnZXRSZXN1bHRzKGpvYlJ1bklELCBzb3VyY2VzLCB1cmxzLCBpbnB1dCwgY29uZmlnKVxufVxuXG5leHBvcnQgY29uc3QgbWFrZUV4ZWN1dGU6IEV4ZWN1dGVGYWN0b3J5PENvbmZpZz4gPSAoY29uZmlnKSA9PiB7XG4gIHJldHVybiBhc3luYyAocmVxdWVzdCwgY29udGV4dCkgPT4gZXhlY3V0ZShyZXF1ZXN0LCBjb250ZXh0LCBjb25maWcgfHwgbWFrZUNvbmZpZygpKVxufVxuXG5jb25zdCBnZXRSZXN1bHRzID0gYXN5bmMgKFxuICBqb2JSdW5JRDogc3RyaW5nLFxuICBzb3VyY2VzOiBzdHJpbmdbXSxcbiAgdXJsczogc3RyaW5nW10sXG4gIHJlcXVlc3Q6IEFkYXB0ZXJSZXF1ZXN0LFxuICBjb25maWc6IENvbmZpZyxcbik6IFByb21pc2U8QWRhcHRlclJlc3BvbnNlPiA9PiB7XG4gIHRyeSB7XG4gICAgTG9nZ2VyLmluZm8oYFRyeWluZyB0byBnZXQgcmVzdWx0IGZyb20gJHtzb3VyY2VzWzBdfWApXG4gICAgcmV0dXJuIFJlcXVlc3Rlci5zdWNjZXNzKFxuICAgICAgam9iUnVuSUQsXG4gICAgICBhd2FpdCBSZXF1ZXN0ZXIucmVxdWVzdCh7XG4gICAgICAgIC4uLmNvbmZpZy5hcGksXG4gICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgICB1cmw6IHVybHNbMF0sXG4gICAgICAgIGRhdGE6IHJlcXVlc3QsXG4gICAgICB9KSxcbiAgICApXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBMb2dnZXIuaW5mbyhgQ291bGQgbm90IGdldCByZXN1bHQgZnJvbSAke3NvdXJjZXNbMF19LCB0cnlpbmcgdG8gZ2V0IHJlc3VsdCBmcm9tICR7c291cmNlc1sxXX1gKVxuICAgIHJldHVybiBSZXF1ZXN0ZXIuc3VjY2VzcyhcbiAgICAgIGpvYlJ1bklELFxuICAgICAgYXdhaXQgUmVxdWVzdGVyLnJlcXVlc3Qoe1xuICAgICAgICAuLi5jb25maWcuYXBpLFxuICAgICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgICAgdXJsOiB1cmxzWzFdLFxuICAgICAgICBkYXRhOiByZXF1ZXN0LFxuICAgICAgfSksXG4gICAgKVxuICB9XG59XG4iXX0=