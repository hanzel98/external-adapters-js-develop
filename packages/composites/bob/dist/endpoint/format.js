"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParams = exports.NAME = void 0;
const tslib_1 = require("tslib");
const json_rpc_adapter_1 = tslib_1.__importDefault(require("@chainlink/json-rpc-adapter"));
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
const ethers_1 = require("ethers");
exports.NAME = 'format';
exports.inputParams = {
    url: false,
    chainId: true,
    blockNumber: true,
};
const execute = async (request, context, config) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParams);
    if (validator.error)
        throw validator.error;
    const url = validator.validated.data.url || config.RPC_URL || config_1.DEFAULT_RPC_URL;
    const provider = new ethers_1.ethers.providers.JsonRpcProvider(url);
    const jobRunID = validator.validated.id;
    const chainId = validator.validated.data.chainId;
    const blockNumber = validator.validated.data.blockNumber;
    const block = await provider.getBlock(blockNumber);
    const response = await json_rpc_adapter_1.default.execute({
        ...request,
        data: { ...request.data, method: 'eth_getBlockByHash', params: [block.hash, false] },
    }, context, config);
    const coder = new ethers_1.ethers.utils.AbiCoder();
    response.data.result = coder.encode(['uint8', 'bytes32', 'bytes32'], [chainId, response.data.result.hash, response.data.result.receiptsRoot]);
    response.data = response.data;
    response.data.result = response.data.result.slice(2);
    return ea_bootstrap_1.Requester.success(jobRunID, response);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VuZHBvaW50L2Zvcm1hdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsMkZBQWlEO0FBRWpELDBEQUE4RDtBQUM5RCxzQ0FBMkQ7QUFDM0QsbUNBQStCO0FBRWxCLFFBQUEsSUFBSSxHQUFHLFFBQVEsQ0FBQTtBQUVmLFFBQUEsV0FBVyxHQUFHO0lBQ3pCLEdBQUcsRUFBRSxLQUFLO0lBQ1YsT0FBTyxFQUFFLElBQUk7SUFDYixXQUFXLEVBQUUsSUFBSTtDQUNsQixDQUFBO0FBeUJNLE1BQU0sT0FBTyxHQUFzQyxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtJQUMzRixNQUFNLFNBQVMsR0FBRyxJQUFJLHdCQUFTLENBQUMsT0FBTyxFQUFFLG1CQUFXLENBQUMsQ0FBQTtJQUNyRCxJQUFJLFNBQVMsQ0FBQyxLQUFLO1FBQUUsTUFBTSxTQUFTLENBQUMsS0FBSyxDQUFBO0lBQzFDLE1BQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsT0FBTyxJQUFJLHdCQUFlLENBQUE7SUFDN0UsTUFBTSxRQUFRLEdBQUcsSUFBSSxlQUFNLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUMxRCxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQTtJQUV2QyxNQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUE7SUFDaEQsTUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFBO0lBRXhELE1BQU0sS0FBSyxHQUFHLE1BQU0sUUFBUSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUVsRCxNQUFNLFFBQVEsR0FBRyxNQUFNLDBCQUFPLENBQUMsT0FBTyxDQUNwQztRQUNFLEdBQUcsT0FBTztRQUNWLElBQUksRUFBRSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRTtLQUNyRixFQUNELE9BQU8sRUFDUCxNQUFNLENBQ1AsQ0FBQTtJQUNELE1BQU0sS0FBSyxHQUFHLElBQUksZUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQTtJQUN6QyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUNqQyxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLEVBQy9CLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FDeEUsQ0FBQTtJQUNELFFBQVEsQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQXNCLENBQUE7SUFDL0MsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3BELE9BQU8sd0JBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0FBQzlDLENBQUMsQ0FBQTtBQTVCWSxRQUFBLE9BQU8sV0E0Qm5CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTT05SUEMgZnJvbSAnQGNoYWlubGluay9qc29uLXJwYy1hZGFwdGVyJ1xuaW1wb3J0IHsgRXhlY3V0ZVdpdGhDb25maWcgfSBmcm9tICdAY2hhaW5saW5rL3R5cGVzJ1xuaW1wb3J0IHsgVmFsaWRhdG9yLCBSZXF1ZXN0ZXIgfSBmcm9tICdAY2hhaW5saW5rL2VhLWJvb3RzdHJhcCdcbmltcG9ydCB7IERFRkFVTFRfUlBDX1VSTCwgRXh0ZW5kZWRDb25maWcgfSBmcm9tICcuLi9jb25maWcnXG5pbXBvcnQgeyBldGhlcnMgfSBmcm9tICdldGhlcnMnXG5cbmV4cG9ydCBjb25zdCBOQU1FID0gJ2Zvcm1hdCdcblxuZXhwb3J0IGNvbnN0IGlucHV0UGFyYW1zID0ge1xuICB1cmw6IGZhbHNlLFxuICBjaGFpbklkOiB0cnVlLFxuICBibG9ja051bWJlcjogdHJ1ZSxcbn1cblxuaW50ZXJmYWNlIFJlc3BvbnNlU2NoZW1hIHtcbiAgZGlmZmljdWx0eTogc3RyaW5nXG4gIGV4dHJhRGF0YTogc3RyaW5nXG4gIGdhc0xpbWl0OiBzdHJpbmdcbiAgZ2FzVXNlZDogc3RyaW5nXG4gIGhhc2g6IHN0cmluZ1xuICBsb2dzQmxvb206IHN0cmluZ1xuICBtaW5lcjogc3RyaW5nXG4gIG1peEhhc2g6IHN0cmluZ1xuICBub25jZTogc3RyaW5nXG4gIG51bWJlcjogc3RyaW5nXG4gIHBhcmVudEhhc2g6IHN0cmluZ1xuICByZWNlaXB0c1Jvb3Q6IHN0cmluZ1xuICBzaGEzVW5jbGVzOiBzdHJpbmdcbiAgc2l6ZTogc3RyaW5nXG4gIHN0YXRlUm9vdDogc3RyaW5nXG4gIHRpbWVzdGFtcDogc3RyaW5nXG4gIHRvdGFsRGlmZmljdWx0eTogc3RyaW5nXG4gIHRyYW5zYWN0aW9uczogc3RyaW5nW11cbiAgdHJhbnNhY3Rpb25zUm9vdDogc3RyaW5nXG4gIHVuY2xlczogc3RyaW5nW11cbn1cblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGU6IEV4ZWN1dGVXaXRoQ29uZmlnPEV4dGVuZGVkQ29uZmlnPiA9IGFzeW5jIChyZXF1ZXN0LCBjb250ZXh0LCBjb25maWcpID0+IHtcbiAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihyZXF1ZXN0LCBpbnB1dFBhcmFtcylcbiAgaWYgKHZhbGlkYXRvci5lcnJvcikgdGhyb3cgdmFsaWRhdG9yLmVycm9yXG4gIGNvbnN0IHVybCA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS51cmwgfHwgY29uZmlnLlJQQ19VUkwgfHwgREVGQVVMVF9SUENfVVJMXG4gIGNvbnN0IHByb3ZpZGVyID0gbmV3IGV0aGVycy5wcm92aWRlcnMuSnNvblJwY1Byb3ZpZGVyKHVybClcbiAgY29uc3Qgam9iUnVuSUQgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmlkXG5cbiAgY29uc3QgY2hhaW5JZCA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5jaGFpbklkXG4gIGNvbnN0IGJsb2NrTnVtYmVyID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLmJsb2NrTnVtYmVyXG5cbiAgY29uc3QgYmxvY2sgPSBhd2FpdCBwcm92aWRlci5nZXRCbG9jayhibG9ja051bWJlcilcblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IEpTT05SUEMuZXhlY3V0ZShcbiAgICB7XG4gICAgICAuLi5yZXF1ZXN0LFxuICAgICAgZGF0YTogeyAuLi5yZXF1ZXN0LmRhdGEsIG1ldGhvZDogJ2V0aF9nZXRCbG9ja0J5SGFzaCcsIHBhcmFtczogW2Jsb2NrLmhhc2gsIGZhbHNlXSB9LFxuICAgIH0sXG4gICAgY29udGV4dCxcbiAgICBjb25maWcsXG4gIClcbiAgY29uc3QgY29kZXIgPSBuZXcgZXRoZXJzLnV0aWxzLkFiaUNvZGVyKClcbiAgcmVzcG9uc2UuZGF0YS5yZXN1bHQgPSBjb2Rlci5lbmNvZGUoXG4gICAgWyd1aW50OCcsICdieXRlczMyJywgJ2J5dGVzMzInXSxcbiAgICBbY2hhaW5JZCwgcmVzcG9uc2UuZGF0YS5yZXN1bHQuaGFzaCwgcmVzcG9uc2UuZGF0YS5yZXN1bHQucmVjZWlwdHNSb290XSxcbiAgKVxuICByZXNwb25zZS5kYXRhID0gcmVzcG9uc2UuZGF0YSBhcyBSZXNwb25zZVNjaGVtYVxuICByZXNwb25zZS5kYXRhLnJlc3VsdCA9IHJlc3BvbnNlLmRhdGEucmVzdWx0LnNsaWNlKDIpXG4gIHJldHVybiBSZXF1ZXN0ZXIuc3VjY2Vzcyhqb2JSdW5JRCwgcmVzcG9uc2UpXG59XG4iXX0=