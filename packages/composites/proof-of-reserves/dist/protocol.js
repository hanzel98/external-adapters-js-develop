"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runProtocolAdapter = exports.adapters = exports.LIST_ADAPTER = void 0;
const tslib_1 = require("tslib");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const adapter_1 = require("./adapter");
// protocol adapters
const renvm_address_set_adapter_1 = tslib_1.__importDefault(require("@chainlink/renvm-address-set-adapter"));
const wBTC = tslib_1.__importStar(require("@chainlink/wbtc-address-set-adapter"));
const Gemini = tslib_1.__importStar(require("@chainlink/gemini-adapter"));
const chainReserveWallets = tslib_1.__importStar(require("@chainlink/chain-reserve-wallet-adapter"));
exports.LIST_ADAPTER = 'LIST';
exports.adapters = [wBTC, renvm_address_set_adapter_1.default, Gemini, chainReserveWallets];
// Get address set for protocol
const runProtocolAdapter = async (jobRunID, context, protocol, data, config) => {
    if (protocol === exports.LIST_ADAPTER)
        return listAdapter(jobRunID, data);
    const execute = adapter_1.makeRequestFactory(config, protocol);
    const next = {
        id: jobRunID,
        data,
    };
    return adapter_1.callAdapter(execute, context, next, '_onProtocol');
};
exports.runProtocolAdapter = runProtocolAdapter;
const listAdapter = (jobRunID, data) => {
    if (!('addresses' in data)) {
        throw Error(`Missing "addresses" in request data`);
    }
    const result = data.addresses.map((address) => ({ address }));
    return ea_bootstrap_1.Requester.success(jobRunID, { data: { result } });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdG9jb2wuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcHJvdG9jb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLDBEQUFtRDtBQUNuRCx1Q0FBMkQ7QUFDM0Qsb0JBQW9CO0FBQ3BCLDZHQUF3RDtBQUN4RCxrRkFBMkQ7QUFDM0QsMEVBQW1EO0FBQ25ELHFHQUE4RTtBQUVqRSxRQUFBLFlBQVksR0FBRyxNQUFNLENBQUE7QUFFckIsUUFBQSxRQUFRLEdBQTRCLENBQUMsSUFBSSxFQUFFLG1DQUFLLEVBQUUsTUFBTSxFQUFFLG1CQUFtQixDQUFDLENBQUE7QUFJM0YsK0JBQStCO0FBQ3hCLE1BQU0sa0JBQWtCLEdBQUcsS0FBSyxFQUNyQyxRQUFnQixFQUNoQixPQUF1QixFQUN2QixRQUFrQixFQUNsQixJQUFTLEVBQ1QsTUFBYyxFQUNZLEVBQUU7SUFDNUIsSUFBSSxRQUFRLEtBQUssb0JBQVk7UUFBRSxPQUFPLFdBQVcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFFakUsTUFBTSxPQUFPLEdBQUcsNEJBQWtCLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ3BELE1BQU0sSUFBSSxHQUFHO1FBQ1gsRUFBRSxFQUFFLFFBQVE7UUFDWixJQUFJO0tBQ0wsQ0FBQTtJQUNELE9BQU8scUJBQVcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQTtBQUMzRCxDQUFDLENBQUE7QUFmWSxRQUFBLGtCQUFrQixzQkFlOUI7QUFFRCxNQUFNLFdBQVcsR0FBRyxDQUFDLFFBQWdCLEVBQUUsSUFBUyxFQUFFLEVBQUU7SUFDbEQsSUFBSSxDQUFDLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxFQUFFO1FBQzFCLE1BQU0sS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUE7S0FDbkQ7SUFFRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQWUsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUNyRSxPQUFPLHdCQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUMxRCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZGFwdGVySW1wbGVtZW50YXRpb24sIENvbmZpZywgQWRhcHRlclJlc3BvbnNlLCBBZGFwdGVyQ29udGV4dCB9IGZyb20gJ0BjaGFpbmxpbmsvdHlwZXMnXG5pbXBvcnQgeyBSZXF1ZXN0ZXIgfSBmcm9tICdAY2hhaW5saW5rL2VhLWJvb3RzdHJhcCdcbmltcG9ydCB7IGNhbGxBZGFwdGVyLCBtYWtlUmVxdWVzdEZhY3RvcnkgfSBmcm9tICcuL2FkYXB0ZXInXG4vLyBwcm90b2NvbCBhZGFwdGVyc1xuaW1wb3J0IHJlblZNIGZyb20gJ0BjaGFpbmxpbmsvcmVudm0tYWRkcmVzcy1zZXQtYWRhcHRlcidcbmltcG9ydCAqIGFzIHdCVEMgZnJvbSAnQGNoYWlubGluay93YnRjLWFkZHJlc3Mtc2V0LWFkYXB0ZXInXG5pbXBvcnQgKiBhcyBHZW1pbmkgZnJvbSAnQGNoYWlubGluay9nZW1pbmktYWRhcHRlcidcbmltcG9ydCAqIGFzIGNoYWluUmVzZXJ2ZVdhbGxldHMgZnJvbSAnQGNoYWlubGluay9jaGFpbi1yZXNlcnZlLXdhbGxldC1hZGFwdGVyJ1xuXG5leHBvcnQgY29uc3QgTElTVF9BREFQVEVSID0gJ0xJU1QnXG5cbmV4cG9ydCBjb25zdCBhZGFwdGVyczogQWRhcHRlckltcGxlbWVudGF0aW9uW10gPSBbd0JUQywgcmVuVk0sIEdlbWluaSwgY2hhaW5SZXNlcnZlV2FsbGV0c11cblxuZXhwb3J0IHR5cGUgUHJvdG9jb2wgPSB0eXBlb2YgYWRhcHRlcnNbbnVtYmVyXVsnTkFNRSddXG5cbi8vIEdldCBhZGRyZXNzIHNldCBmb3IgcHJvdG9jb2xcbmV4cG9ydCBjb25zdCBydW5Qcm90b2NvbEFkYXB0ZXIgPSBhc3luYyAoXG4gIGpvYlJ1bklEOiBzdHJpbmcsXG4gIGNvbnRleHQ6IEFkYXB0ZXJDb250ZXh0LFxuICBwcm90b2NvbDogUHJvdG9jb2wsXG4gIGRhdGE6IGFueSxcbiAgY29uZmlnOiBDb25maWcsXG4pOiBQcm9taXNlPEFkYXB0ZXJSZXNwb25zZT4gPT4ge1xuICBpZiAocHJvdG9jb2wgPT09IExJU1RfQURBUFRFUikgcmV0dXJuIGxpc3RBZGFwdGVyKGpvYlJ1bklELCBkYXRhKVxuXG4gIGNvbnN0IGV4ZWN1dGUgPSBtYWtlUmVxdWVzdEZhY3RvcnkoY29uZmlnLCBwcm90b2NvbClcbiAgY29uc3QgbmV4dCA9IHtcbiAgICBpZDogam9iUnVuSUQsXG4gICAgZGF0YSxcbiAgfVxuICByZXR1cm4gY2FsbEFkYXB0ZXIoZXhlY3V0ZSwgY29udGV4dCwgbmV4dCwgJ19vblByb3RvY29sJylcbn1cblxuY29uc3QgbGlzdEFkYXB0ZXIgPSAoam9iUnVuSUQ6IHN0cmluZywgZGF0YTogYW55KSA9PiB7XG4gIGlmICghKCdhZGRyZXNzZXMnIGluIGRhdGEpKSB7XG4gICAgdGhyb3cgRXJyb3IoYE1pc3NpbmcgXCJhZGRyZXNzZXNcIiBpbiByZXF1ZXN0IGRhdGFgKVxuICB9XG5cbiAgY29uc3QgcmVzdWx0ID0gZGF0YS5hZGRyZXNzZXMubWFwKChhZGRyZXNzOiBzdHJpbmcpID0+ICh7IGFkZHJlc3MgfSkpXG4gIHJldHVybiBSZXF1ZXN0ZXIuc3VjY2Vzcyhqb2JSdW5JRCwgeyBkYXRhOiB7IHJlc3VsdCB9IH0pXG59XG4iXX0=