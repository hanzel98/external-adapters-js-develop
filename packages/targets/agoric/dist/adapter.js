"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExecute = exports.execute = exports.getRequiredFee = void 0;
const ethers_1 = require("ethers");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("./config");
// We're on localhost, so retries just confuse the oracle state.
const NUM_RETRIES = 1;
const inputParams = {
    request_id: ['request_id'],
    result: ['result'],
    payment: ['payment'],
};
// FIXME: Ideally, these would be the same.
const LINK_UNIT = ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(18));
const LINK_AGORIC_UNIT = ethers_1.BigNumber.from(10).pow(ethers_1.BigNumber.from(6));
// Convert the payment in $LINK into Agoric's pegged $LINK token.
const getRequiredFee = (value) => {
    const paymentCL = ethers_1.BigNumber.from(value);
    const paymentAgoricLink = paymentCL.mul(LINK_AGORIC_UNIT).div(LINK_UNIT);
    return paymentAgoricLink.toNumber();
};
exports.getRequiredFee = getRequiredFee;
const executeImpl = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, inputParams);
    if (validator.error) {
        throw validator.error;
    }
    ea_bootstrap_1.Requester.logConfig(config);
    const jobRunID = validator.validated.id;
    const { request_id: queryId, result, payment } = validator.validated.data;
    const requiredFee = exports.getRequiredFee(payment);
    const obj = {
        type: 'oracleServer/reply',
        data: { queryId, reply: result, requiredFee },
    };
    const response = await ea_bootstrap_1.Requester.request({
        ...config.api,
        method: 'POST',
        data: obj,
    }, undefined, NUM_RETRIES);
    const pr = response.data;
    if (!pr.ok) {
        throw Error(`${obj.type} response failed: ${pr.rej}`);
    }
    return ea_bootstrap_1.Requester.success(jobRunID, {
        data: { result },
        status: 200,
    });
};
const tryExecuteLogError = (execute) => async (request, context, config) => {
    try {
        return await execute(request, context, config);
    }
    catch (e) {
        const queryId = request.data?.request_id;
        const rest = { queryId };
        await ea_bootstrap_1.Requester.request({
            ...config.api,
            method: 'POST',
            data: {
                type: 'oracleServer/error',
                data: { error: `${(e && e.message) || e}`, ...(queryId && rest) },
            },
        }, undefined, NUM_RETRIES).catch((e2) => console.error(`Cannot reflect error to caller:`, e2));
        // See https://github.com/smartcontractkit/external-adapters-js/issues/204
        // for discussion of why this code is necessary.
        if (e instanceof ea_bootstrap_1.AdapterError) {
            throw e;
        }
        throw new ea_bootstrap_1.AdapterError({
            jobRunID: request.id,
            statusCode: 500,
            message: `${(e && e.message) || e}`,
            cause: e,
        });
    }
};
exports.execute = tryExecuteLogError(executeImpl);
const makeExecute = (config) => {
    return async (request, context) => exports.execute(request, context, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
//# sourceMappingURL=data:application/json;base64,