"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.NAME = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const js_conflux_sdk_1 = require("js-conflux-sdk");
const ethers_1 = require("ethers");
const sendFulfillment = async (provider, account, to, dataPrefix, functionSelector, value) => {
    const dataPrefixBz = ethers_1.ethers.utils.arrayify(dataPrefix);
    const functionSelectorBz = ethers_1.ethers.utils.arrayify(functionSelector);
    const valueBz = ethers_1.ethers.utils.zeroPad(ethers_1.ethers.utils.arrayify(Number(value)), 32);
    const data = ethers_1.ethers.utils.concat([functionSelectorBz, dataPrefixBz, valueBz]);
    const tx = {
        from: account.address,
        to: to,
        data: ethers_1.ethers.utils.hexlify(data),
        gas: 500000,
        gasPrice: 1,
    };
    return await provider.sendTransaction(tx).executed();
};
// const customError = (data: any) => data.Response === 'Error'
const customParams = {
    // Use two sets of possible keys in case the node operator
    // is using a non-EI initiator where the primary keys are reserved.
    address: ['address', 'cfxAddress'],
    dataPrefix: ['dataPrefix', 'cfxDataPrefix'],
    functionSelector: ['functionSelector', 'cfxFunctionSelector'],
    value: ['result', 'value'],
};
exports.NAME = 'conflux';
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, customParams);
    if (validator.error)
        throw validator.error;
    const provider = new js_conflux_sdk_1.Conflux({
        url: config.rpcUrl,
        networkId: Number(config.networkId),
        defaultGasRatio: 1.3,
        defaultStorageRatio: 1.3,
    });
    const account = provider.wallet.addPrivateKey(config.privateKey);
    const jobRunID = validator.validated.id;
    const address = validator.validated.data.address;
    const dataPrefix = validator.validated.data.dataPrefix;
    const functionSelector = validator.validated.data.functionSelector;
    const value = validator.validated.data.value;
    // handling the multiplying
    // if (request.data.times !== undefined) {
    //   value = String(Math.round(Number(value)*Number(request.data.times)))
    // }
    const { transactionHash: txHash } = await sendFulfillment(provider, account, address, dataPrefix, functionSelector, value);
    return ea_bootstrap_1.Requester.success(jobRunID, {
        data: { result: txHash },
        status: 200,
    });
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmx1eC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbmRwb2ludC9jb25mbHV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUE4RDtBQUU5RCxtREFBd0M7QUFDeEMsbUNBQStCO0FBRy9CLE1BQU0sZUFBZSxHQUFHLEtBQUssRUFDM0IsUUFBYSxFQUNiLE9BQVksRUFDWixFQUFVLEVBQ1YsVUFBa0IsRUFDbEIsZ0JBQXdCLEVBQ3hCLEtBQWEsRUFDYixFQUFFO0lBQ0YsTUFBTSxZQUFZLEdBQUcsZUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDdEQsTUFBTSxrQkFBa0IsR0FBRyxlQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0lBQ2xFLE1BQU0sT0FBTyxHQUFHLGVBQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGVBQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQzlFLE1BQU0sSUFBSSxHQUFHLGVBQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsa0JBQWtCLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUE7SUFFN0UsTUFBTSxFQUFFLEdBQUc7UUFDVCxJQUFJLEVBQUUsT0FBTyxDQUFDLE9BQU87UUFDckIsRUFBRSxFQUFFLEVBQUU7UUFDTixJQUFJLEVBQUUsZUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ2hDLEdBQUcsRUFBRSxNQUFNO1FBQ1gsUUFBUSxFQUFFLENBQUM7S0FDWixDQUFBO0lBRUQsT0FBTyxNQUFNLFFBQVEsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUE7QUFDdEQsQ0FBQyxDQUFBO0FBRUQsK0RBQStEO0FBRS9ELE1BQU0sWUFBWSxHQUFHO0lBQ25CLDBEQUEwRDtJQUMxRCxtRUFBbUU7SUFDbkUsT0FBTyxFQUFFLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQztJQUNsQyxVQUFVLEVBQUUsQ0FBQyxZQUFZLEVBQUUsZUFBZSxDQUFDO0lBQzNDLGdCQUFnQixFQUFFLENBQUMsa0JBQWtCLEVBQUUscUJBQXFCLENBQUM7SUFDN0QsS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQztDQUMzQixDQUFBO0FBRVksUUFBQSxJQUFJLEdBQUcsU0FBUyxDQUFBO0FBRXRCLE1BQU0sT0FBTyxHQUE4QixLQUFLLEVBQ3JELE9BQU8sRUFDUCxDQUFDLEVBQ0QsTUFBTSxFQUNvQixFQUFFO0lBQzVCLE1BQU0sU0FBUyxHQUFHLElBQUksd0JBQVMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUE7SUFDdEQsSUFBSSxTQUFTLENBQUMsS0FBSztRQUFFLE1BQU0sU0FBUyxDQUFDLEtBQUssQ0FBQTtJQUUxQyxNQUFNLFFBQVEsR0FBRyxJQUFJLHdCQUFPLENBQUM7UUFDM0IsR0FBRyxFQUFFLE1BQU0sQ0FBQyxNQUFNO1FBQ2xCLFNBQVMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztRQUNuQyxlQUFlLEVBQUUsR0FBRztRQUNwQixtQkFBbUIsRUFBRSxHQUFHO0tBQ3pCLENBQUMsQ0FBQTtJQUNGLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUVoRSxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQTtJQUN2QyxNQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUE7SUFDaEQsTUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFBO0lBQ3RELE1BQU0sZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUE7SUFDbEUsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFBO0lBRTVDLDJCQUEyQjtJQUMzQiwwQ0FBMEM7SUFDMUMseUVBQXlFO0lBQ3pFLElBQUk7SUFDSixNQUFNLEVBQUUsZUFBZSxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sZUFBZSxDQUN2RCxRQUFRLEVBQ1IsT0FBTyxFQUNQLE9BQU8sRUFDUCxVQUFVLEVBQ1YsZ0JBQWdCLEVBQ2hCLEtBQUssQ0FDTixDQUFBO0lBRUQsT0FBTyx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUU7UUFDakMsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRTtRQUN4QixNQUFNLEVBQUUsR0FBRztLQUNaLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQTtBQXZDWSxRQUFBLE9BQU8sV0F1Q25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdGVyLCBWYWxpZGF0b3IgfSBmcm9tICdAY2hhaW5saW5rL2VhLWJvb3RzdHJhcCdcbmltcG9ydCB7IEFkYXB0ZXJSZXNwb25zZSwgRXhlY3V0ZVdpdGhDb25maWcgfSBmcm9tICdAY2hhaW5saW5rL3R5cGVzJ1xuaW1wb3J0IHsgQ29uZmx1eCB9IGZyb20gJ2pzLWNvbmZsdXgtc2RrJ1xuaW1wb3J0IHsgZXRoZXJzIH0gZnJvbSAnZXRoZXJzJ1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJ1xuXG5jb25zdCBzZW5kRnVsZmlsbG1lbnQgPSBhc3luYyAoXG4gIHByb3ZpZGVyOiBhbnksXG4gIGFjY291bnQ6IGFueSxcbiAgdG86IHN0cmluZyxcbiAgZGF0YVByZWZpeDogc3RyaW5nLFxuICBmdW5jdGlvblNlbGVjdG9yOiBzdHJpbmcsXG4gIHZhbHVlOiBudW1iZXIsXG4pID0+IHtcbiAgY29uc3QgZGF0YVByZWZpeEJ6ID0gZXRoZXJzLnV0aWxzLmFycmF5aWZ5KGRhdGFQcmVmaXgpXG4gIGNvbnN0IGZ1bmN0aW9uU2VsZWN0b3JCeiA9IGV0aGVycy51dGlscy5hcnJheWlmeShmdW5jdGlvblNlbGVjdG9yKVxuICBjb25zdCB2YWx1ZUJ6ID0gZXRoZXJzLnV0aWxzLnplcm9QYWQoZXRoZXJzLnV0aWxzLmFycmF5aWZ5KE51bWJlcih2YWx1ZSkpLCAzMilcbiAgY29uc3QgZGF0YSA9IGV0aGVycy51dGlscy5jb25jYXQoW2Z1bmN0aW9uU2VsZWN0b3JCeiwgZGF0YVByZWZpeEJ6LCB2YWx1ZUJ6XSlcblxuICBjb25zdCB0eCA9IHtcbiAgICBmcm9tOiBhY2NvdW50LmFkZHJlc3MsXG4gICAgdG86IHRvLFxuICAgIGRhdGE6IGV0aGVycy51dGlscy5oZXhsaWZ5KGRhdGEpLFxuICAgIGdhczogNTAwMDAwLFxuICAgIGdhc1ByaWNlOiAxLFxuICB9XG5cbiAgcmV0dXJuIGF3YWl0IHByb3ZpZGVyLnNlbmRUcmFuc2FjdGlvbih0eCkuZXhlY3V0ZWQoKVxufVxuXG4vLyBjb25zdCBjdXN0b21FcnJvciA9IChkYXRhOiBhbnkpID0+IGRhdGEuUmVzcG9uc2UgPT09ICdFcnJvcidcblxuY29uc3QgY3VzdG9tUGFyYW1zID0ge1xuICAvLyBVc2UgdHdvIHNldHMgb2YgcG9zc2libGUga2V5cyBpbiBjYXNlIHRoZSBub2RlIG9wZXJhdG9yXG4gIC8vIGlzIHVzaW5nIGEgbm9uLUVJIGluaXRpYXRvciB3aGVyZSB0aGUgcHJpbWFyeSBrZXlzIGFyZSByZXNlcnZlZC5cbiAgYWRkcmVzczogWydhZGRyZXNzJywgJ2NmeEFkZHJlc3MnXSxcbiAgZGF0YVByZWZpeDogWydkYXRhUHJlZml4JywgJ2NmeERhdGFQcmVmaXgnXSxcbiAgZnVuY3Rpb25TZWxlY3RvcjogWydmdW5jdGlvblNlbGVjdG9yJywgJ2NmeEZ1bmN0aW9uU2VsZWN0b3InXSxcbiAgdmFsdWU6IFsncmVzdWx0JywgJ3ZhbHVlJ10sXG59XG5cbmV4cG9ydCBjb25zdCBOQU1FID0gJ2NvbmZsdXgnXG5cbmV4cG9ydCBjb25zdCBleGVjdXRlOiBFeGVjdXRlV2l0aENvbmZpZzxDb25maWc+ID0gYXN5bmMgKFxuICByZXF1ZXN0LFxuICBfLFxuICBjb25maWcsXG4pOiBQcm9taXNlPEFkYXB0ZXJSZXNwb25zZT4gPT4ge1xuICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgVmFsaWRhdG9yKHJlcXVlc3QsIGN1c3RvbVBhcmFtcylcbiAgaWYgKHZhbGlkYXRvci5lcnJvcikgdGhyb3cgdmFsaWRhdG9yLmVycm9yXG5cbiAgY29uc3QgcHJvdmlkZXIgPSBuZXcgQ29uZmx1eCh7XG4gICAgdXJsOiBjb25maWcucnBjVXJsLFxuICAgIG5ldHdvcmtJZDogTnVtYmVyKGNvbmZpZy5uZXR3b3JrSWQpLFxuICAgIGRlZmF1bHRHYXNSYXRpbzogMS4zLFxuICAgIGRlZmF1bHRTdG9yYWdlUmF0aW86IDEuMyxcbiAgfSlcbiAgY29uc3QgYWNjb3VudCA9IHByb3ZpZGVyLndhbGxldC5hZGRQcml2YXRlS2V5KGNvbmZpZy5wcml2YXRlS2V5KVxuXG4gIGNvbnN0IGpvYlJ1bklEID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5pZFxuICBjb25zdCBhZGRyZXNzID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLmFkZHJlc3NcbiAgY29uc3QgZGF0YVByZWZpeCA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5kYXRhUHJlZml4XG4gIGNvbnN0IGZ1bmN0aW9uU2VsZWN0b3IgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmRhdGEuZnVuY3Rpb25TZWxlY3RvclxuICBjb25zdCB2YWx1ZSA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS52YWx1ZVxuXG4gIC8vIGhhbmRsaW5nIHRoZSBtdWx0aXBseWluZ1xuICAvLyBpZiAocmVxdWVzdC5kYXRhLnRpbWVzICE9PSB1bmRlZmluZWQpIHtcbiAgLy8gICB2YWx1ZSA9IFN0cmluZyhNYXRoLnJvdW5kKE51bWJlcih2YWx1ZSkqTnVtYmVyKHJlcXVlc3QuZGF0YS50aW1lcykpKVxuICAvLyB9XG4gIGNvbnN0IHsgdHJhbnNhY3Rpb25IYXNoOiB0eEhhc2ggfSA9IGF3YWl0IHNlbmRGdWxmaWxsbWVudChcbiAgICBwcm92aWRlcixcbiAgICBhY2NvdW50LFxuICAgIGFkZHJlc3MsXG4gICAgZGF0YVByZWZpeCxcbiAgICBmdW5jdGlvblNlbGVjdG9yLFxuICAgIHZhbHVlLFxuICApXG5cbiAgcmV0dXJuIFJlcXVlc3Rlci5zdWNjZXNzKGpvYlJ1bklELCB7XG4gICAgZGF0YTogeyByZXN1bHQ6IHR4SGFzaCB9LFxuICAgIHN0YXR1czogMjAwLFxuICB9KVxufVxuIl19