"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExecute = exports.execute = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const core_1 = require("@harmony-js/core");
const crypto_1 = require("@harmony-js/crypto");
const utils_1 = require("@harmony-js/utils");
const config_1 = require("./config");
const inputParams = {
    address: ['address'],
    functionSelector: ['functionSelector'],
    dataPrefix: false,
    dataToSend: ['dataToSend', 'result'],
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, inputParams);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const address = validator.validated.data.address;
    const functionSelector = validator.validated.data.functionSelector;
    const dataPrefix = validator.validated.data.dataPrefix || '';
    const dataToSend = validator.validated.data.dataToSend || '';
    const transactionData = crypto_1.hexlify(crypto_1.concat([
        crypto_1.hexToByteArray(functionSelector),
        crypto_1.hexToByteArray(dataPrefix),
        crypto_1.hexToByteArray(dataToSend),
    ]));
    const url = config.api.baseURL || config_1.DEFAULT_API_ENDPOINT;
    const hmy = new core_1.Harmony(url, {
        chainType: utils_1.ChainType.Harmony,
        chainId: Number(config.chainID),
    });
    const transaction = hmy.transactions.newTx({
        to: crypto_1.getAddress(address).checksum,
        data: transactionData,
        gasLimit: config.gasLimit,
        gasPrice: new hmy.utils.Unit('1').asGwei().toWei(),
    });
    hmy.wallet.addByPrivateKey(config.privateKey);
    const signedTxn = await hmy.wallet.signTransaction(transaction);
    const result = await hmy.blockchain.sendTransaction(signedTxn);
    const txHash = ea_bootstrap_1.Requester.validateResultNumber(result, ['result']);
    return ea_bootstrap_1.Requester.success(jobRunID, {
        data: { txHash },
        status: 200,
    });
};
exports.execute = execute;
const makeExecute = (config) => {
    return async (request, context) => exports.execute(request, context, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUE4RDtBQUU5RCwyQ0FBMEM7QUFDMUMsK0NBQWdGO0FBQ2hGLDZDQUE2QztBQUM3QyxxQ0FBbUU7QUFFbkUsTUFBTSxXQUFXLEdBQUc7SUFDbEIsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDO0lBQ3BCLGdCQUFnQixFQUFFLENBQUMsa0JBQWtCLENBQUM7SUFDdEMsVUFBVSxFQUFFLEtBQUs7SUFDakIsVUFBVSxFQUFFLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQztDQUNyQyxDQUFBO0FBRU0sTUFBTSxPQUFPLEdBQThCLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFO0lBQzdFLE1BQU0sU0FBUyxHQUFHLElBQUksd0JBQVMsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUE7SUFDckQsSUFBSSxTQUFTLENBQUMsS0FBSztRQUFFLE1BQU0sU0FBUyxDQUFDLEtBQUssQ0FBQTtJQUUxQyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQTtJQUN2QyxNQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUE7SUFDaEQsTUFBTSxnQkFBZ0IsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQTtJQUNsRSxNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFBO0lBQzVELE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUE7SUFFNUQsTUFBTSxlQUFlLEdBQUcsZ0JBQU8sQ0FDN0IsZUFBTSxDQUFDO1FBQ0wsdUJBQWMsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNoQyx1QkFBYyxDQUFDLFVBQVUsQ0FBQztRQUMxQix1QkFBYyxDQUFDLFVBQVUsQ0FBQztLQUMzQixDQUFDLENBQ0gsQ0FBQTtJQUVELE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLDZCQUFvQixDQUFBO0lBQ3RELE1BQU0sR0FBRyxHQUFHLElBQUksY0FBTyxDQUFDLEdBQUcsRUFBRTtRQUMzQixTQUFTLEVBQUUsaUJBQVMsQ0FBQyxPQUFPO1FBQzVCLE9BQU8sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztLQUNoQyxDQUFDLENBQUE7SUFFRixNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztRQUN6QyxFQUFFLEVBQUUsbUJBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRO1FBQ2hDLElBQUksRUFBRSxlQUFlO1FBQ3JCLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUTtRQUN6QixRQUFRLEVBQUUsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUU7S0FDbkQsQ0FBQyxDQUFBO0lBRUYsR0FBRyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQzdDLE1BQU0sU0FBUyxHQUFHLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDL0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxHQUFHLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUM5RCxNQUFNLE1BQU0sR0FBRyx3QkFBUyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7SUFFakUsT0FBTyx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUU7UUFDakMsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFO1FBQ2hCLE1BQU0sRUFBRSxHQUFHO0tBQ1osQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFBO0FBeENZLFFBQUEsT0FBTyxXQXdDbkI7QUFFTSxNQUFNLFdBQVcsR0FBMkIsQ0FBQyxNQUFNLEVBQUUsRUFBRTtJQUM1RCxPQUFPLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxlQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLElBQUksbUJBQVUsRUFBRSxDQUFDLENBQUE7QUFDdEYsQ0FBQyxDQUFBO0FBRlksUUFBQSxXQUFXLGVBRXZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdGVyLCBWYWxpZGF0b3IgfSBmcm9tICdAY2hhaW5saW5rL2VhLWJvb3RzdHJhcCdcbmltcG9ydCB7IEV4ZWN1dGVXaXRoQ29uZmlnLCBFeGVjdXRlRmFjdG9yeSB9IGZyb20gJ0BjaGFpbmxpbmsvdHlwZXMnXG5pbXBvcnQgeyBIYXJtb255IH0gZnJvbSAnQGhhcm1vbnktanMvY29yZSdcbmltcG9ydCB7IGdldEFkZHJlc3MsIGhleFRvQnl0ZUFycmF5LCBoZXhsaWZ5LCBjb25jYXQgfSBmcm9tICdAaGFybW9ueS1qcy9jcnlwdG8nXG5pbXBvcnQgeyBDaGFpblR5cGUgfSBmcm9tICdAaGFybW9ueS1qcy91dGlscydcbmltcG9ydCB7IENvbmZpZywgbWFrZUNvbmZpZywgREVGQVVMVF9BUElfRU5EUE9JTlQgfSBmcm9tICcuL2NvbmZpZydcblxuY29uc3QgaW5wdXRQYXJhbXMgPSB7XG4gIGFkZHJlc3M6IFsnYWRkcmVzcyddLFxuICBmdW5jdGlvblNlbGVjdG9yOiBbJ2Z1bmN0aW9uU2VsZWN0b3InXSxcbiAgZGF0YVByZWZpeDogZmFsc2UsXG4gIGRhdGFUb1NlbmQ6IFsnZGF0YVRvU2VuZCcsICdyZXN1bHQnXSxcbn1cblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGU6IEV4ZWN1dGVXaXRoQ29uZmlnPENvbmZpZz4gPSBhc3luYyAocmVxdWVzdCwgXywgY29uZmlnKSA9PiB7XG4gIGNvbnN0IHZhbGlkYXRvciA9IG5ldyBWYWxpZGF0b3IocmVxdWVzdCwgaW5wdXRQYXJhbXMpXG4gIGlmICh2YWxpZGF0b3IuZXJyb3IpIHRocm93IHZhbGlkYXRvci5lcnJvclxuXG4gIGNvbnN0IGpvYlJ1bklEID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5pZFxuICBjb25zdCBhZGRyZXNzID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLmFkZHJlc3NcbiAgY29uc3QgZnVuY3Rpb25TZWxlY3RvciA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5mdW5jdGlvblNlbGVjdG9yXG4gIGNvbnN0IGRhdGFQcmVmaXggPSB2YWxpZGF0b3IudmFsaWRhdGVkLmRhdGEuZGF0YVByZWZpeCB8fCAnJ1xuICBjb25zdCBkYXRhVG9TZW5kID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLmRhdGFUb1NlbmQgfHwgJydcblxuICBjb25zdCB0cmFuc2FjdGlvbkRhdGEgPSBoZXhsaWZ5KFxuICAgIGNvbmNhdChbXG4gICAgICBoZXhUb0J5dGVBcnJheShmdW5jdGlvblNlbGVjdG9yKSxcbiAgICAgIGhleFRvQnl0ZUFycmF5KGRhdGFQcmVmaXgpLFxuICAgICAgaGV4VG9CeXRlQXJyYXkoZGF0YVRvU2VuZCksXG4gICAgXSksXG4gIClcblxuICBjb25zdCB1cmwgPSBjb25maWcuYXBpLmJhc2VVUkwgfHwgREVGQVVMVF9BUElfRU5EUE9JTlRcbiAgY29uc3QgaG15ID0gbmV3IEhhcm1vbnkodXJsLCB7XG4gICAgY2hhaW5UeXBlOiBDaGFpblR5cGUuSGFybW9ueSxcbiAgICBjaGFpbklkOiBOdW1iZXIoY29uZmlnLmNoYWluSUQpLFxuICB9KVxuXG4gIGNvbnN0IHRyYW5zYWN0aW9uID0gaG15LnRyYW5zYWN0aW9ucy5uZXdUeCh7XG4gICAgdG86IGdldEFkZHJlc3MoYWRkcmVzcykuY2hlY2tzdW0sXG4gICAgZGF0YTogdHJhbnNhY3Rpb25EYXRhLFxuICAgIGdhc0xpbWl0OiBjb25maWcuZ2FzTGltaXQsXG4gICAgZ2FzUHJpY2U6IG5ldyBobXkudXRpbHMuVW5pdCgnMScpLmFzR3dlaSgpLnRvV2VpKCksXG4gIH0pXG5cbiAgaG15LndhbGxldC5hZGRCeVByaXZhdGVLZXkoY29uZmlnLnByaXZhdGVLZXkpXG4gIGNvbnN0IHNpZ25lZFR4biA9IGF3YWl0IGhteS53YWxsZXQuc2lnblRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKVxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBobXkuYmxvY2tjaGFpbi5zZW5kVHJhbnNhY3Rpb24oc2lnbmVkVHhuKVxuICBjb25zdCB0eEhhc2ggPSBSZXF1ZXN0ZXIudmFsaWRhdGVSZXN1bHROdW1iZXIocmVzdWx0LCBbJ3Jlc3VsdCddKVxuXG4gIHJldHVybiBSZXF1ZXN0ZXIuc3VjY2Vzcyhqb2JSdW5JRCwge1xuICAgIGRhdGE6IHsgdHhIYXNoIH0sXG4gICAgc3RhdHVzOiAyMDAsXG4gIH0pXG59XG5cbmV4cG9ydCBjb25zdCBtYWtlRXhlY3V0ZTogRXhlY3V0ZUZhY3Rvcnk8Q29uZmlnPiA9IChjb25maWcpID0+IHtcbiAgcmV0dXJuIGFzeW5jIChyZXF1ZXN0LCBjb250ZXh0KSA9PiBleGVjdXRlKHJlcXVlc3QsIGNvbnRleHQsIGNvbmZpZyB8fCBtYWtlQ29uZmlnKCkpXG59XG4iXX0=