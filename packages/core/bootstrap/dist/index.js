"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RateLimit = exports.server = exports.util = exports.Logger = exports.Builder = exports.AdapterError = exports.Validator = exports.Requester = exports.expose = exports.executeSync = exports.withMiddleware = exports.makeMiddleware = exports.withNormalizedInput = exports.withDebug = exports.store = void 0;
const tslib_1 = require("tslib");
const redux_1 = require("redux");
const cache_1 = require("./lib/cache");
const cacheWarmer = tslib_1.__importStar(require("./lib/cache-warmer"));
const config_1 = require("./lib/cache-warmer/config");
const external_adapter_1 = require("./lib/external-adapter");
Object.defineProperty(exports, "AdapterError", { enumerable: true, get: function () { return external_adapter_1.AdapterError; } });
Object.defineProperty(exports, "Logger", { enumerable: true, get: function () { return external_adapter_1.logger; } });
Object.defineProperty(exports, "Requester", { enumerable: true, get: function () { return external_adapter_1.Requester; } });
Object.defineProperty(exports, "Validator", { enumerable: true, get: function () { return external_adapter_1.Validator; } });
Object.defineProperty(exports, "Builder", { enumerable: true, get: function () { return external_adapter_1.Builder; } });
const metrics = tslib_1.__importStar(require("./lib/metrics"));
const RateLimit = tslib_1.__importStar(require("./lib/rate-limit"));
exports.RateLimit = RateLimit;
const burstLimit = tslib_1.__importStar(require("./lib/burst-limit"));
const server = tslib_1.__importStar(require("./lib/server"));
exports.server = server;
const store_1 = require("./lib/store");
const util = tslib_1.__importStar(require("./lib/util"));
exports.util = util;
const ws = tslib_1.__importStar(require("./lib/ws"));
const REDUX_MIDDLEWARE = ['burstLimit', 'cacheWarmer', 'rateLimit', 'ws'];
const rootReducer = redux_1.combineReducers({
    burstLimit: burstLimit.reducer.rootReducer,
    cacheWarmer: cacheWarmer.reducer.rootReducer,
    rateLimit: RateLimit.reducer.rootReducer,
    ws: ws.reducer.rootReducer,
});
// Init store
const initState = { burstLimit: {}, cacheWarmer: {}, rateLimit: {}, ws: {} };
exports.store = store_1.configureStore(rootReducer, initState, [
    cacheWarmer.epics.epicMiddleware,
    ws.epics.epicMiddleware,
]);
// Run epics
cacheWarmer.epics.epicMiddleware.run(cacheWarmer.epics.rootEpic);
ws.epics.epicMiddleware.run(ws.epics.rootEpic);
const storeSlice = (slice) => ({
    getState: () => exports.store.getState()[slice],
    dispatch: (a) => exports.store.dispatch(a),
});
// Make sure data has the same statusCode as the one we got as a result
const withStatusCode = async (execute, context) => async (input) => {
    const { statusCode, data, ...rest } = await execute(input, context);
    if (data && typeof data === 'object' && data.statusCode) {
        return {
            ...rest,
            statusCode,
            data: {
                ...data,
                statusCode,
            },
        };
    }
    return { ...rest, statusCode, data };
};
// Log adapter input & output data
const withLogger = async (execute, context) => async (input) => {
    external_adapter_1.logger.debug('Input: ', { input });
    try {
        const result = await execute(input, context);
        external_adapter_1.logger.debug(`Output: [${result.statusCode}]: `, { output: result.data });
        return result;
    }
    catch (error) {
        external_adapter_1.logger.error(error.toString(), { stack: error.stack });
        throw error;
    }
};
const withMetrics = async (execute, context) => async (input) => {
    const feedId = metrics.util.getFeedId(input);
    const metricsMeta = {
        feedId,
    };
    const recordMetrics = () => {
        const labels = {
            is_cache_warming: String(input.id === config_1.WARMUP_REQUEST_ID),
            method: 'POST',
            feed_id: feedId,
        };
        const end = metrics.httpRequestDurationSeconds.startTimer();
        return (statusCode, type) => {
            labels.type = type;
            labels.status_code = metrics.util.normalizeStatusCode(statusCode);
            end();
            metrics.httpRequestsTotal.labels(labels).inc();
        };
    };
    const record = recordMetrics();
    try {
        const result = await execute({ ...input, metricsMeta }, context);
        record(result.statusCode, result.data.maxAge || result.maxAge
            ? metrics.HttpRequestType.CACHE_HIT
            : metrics.HttpRequestType.DATA_PROVIDER_HIT);
        return { ...result, metricsMeta: { ...result.metricsMeta, ...metricsMeta } };
    }
    catch (error) {
        record();
        throw error;
    }
};
const withDebug = async (execute, context) => async (input) => {
    const result = await execute(input, context);
    if (!util.isDebug()) {
        const { debug, ...rest } = result;
        return rest;
    }
    return result;
};
exports.withDebug = withDebug;
const withNormalizedInput = (endpointSelector) => async (execute, context) => async (input) => {
    const normalizedInput = endpointSelector ? external_adapter_1.normalizeInput(input, endpointSelector(input)) : input;
    return execute(normalizedInput, context);
};
exports.withNormalizedInput = withNormalizedInput;
const makeMiddleware = (execute, makeWsHandler, endpointSelector) => {
    const warmerMiddleware = [
        cache_1.withCache(storeSlice('burstLimit')),
        RateLimit.withRateLimit(storeSlice('rateLimit')),
        withStatusCode,
        exports.withNormalizedInput(endpointSelector),
    ].concat(metrics.METRICS_ENABLED ? [withMetrics] : []);
    return [
        withLogger,
        cache_1.withCache(storeSlice('burstLimit')),
        cacheWarmer.withCacheWarmer(storeSlice('cacheWarmer'), warmerMiddleware, {
            store: storeSlice('ws'),
            makeWSHandler: makeWsHandler,
        })(execute),
        ws.withWebSockets(storeSlice('ws'), makeWsHandler),
        RateLimit.withRateLimit(storeSlice('rateLimit')),
        withStatusCode,
        exports.withNormalizedInput(endpointSelector),
    ].concat(metrics.METRICS_ENABLED ? [withMetrics, exports.withDebug] : [exports.withDebug]);
};
exports.makeMiddleware = makeMiddleware;
// Wrap raw Execute function with middleware
const withMiddleware = async (execute, context, middleware) => {
    // Init and wrap middleware one by one
    for (let i = 0; i < middleware.length; i++) {
        execute = await middleware[i](execute, context);
    }
    return execute;
};
exports.withMiddleware = withMiddleware;
// Execution helper async => sync
const executeSync = async (data, execute, context, callback) => {
    try {
        const result = await execute(data, context);
        return callback(result.statusCode, result);
    }
    catch (error) {
        return callback(error.statusCode || 500, external_adapter_1.Requester.errored(data.id, error));
    }
};
exports.executeSync = executeSync;
const expose = (name, execute, makeWsHandler, endpointSelector) => {
    const middleware = exports.makeMiddleware(execute, makeWsHandler, endpointSelector);
    return {
        server: server.initHandler(name, execute, middleware),
    };
};
exports.expose = expose;
//# sourceMappingURL=data:application/json;base64,