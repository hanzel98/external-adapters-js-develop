"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Builder = exports.inputParameters = void 0;
const _1 = require(".");
const external_adapter_1 = require("../external-adapter");
exports.inputParameters = {
    endpoint: false,
};
const findSupportedEndpoint = (apiEndpoints, endpoint) => {
    for (const apiEndpoint of Object.values(apiEndpoints)) {
        // Iterate through supported endpoints of a given Chainlink endpoint
        for (const supportedChainlinkEndpoint of apiEndpoint.supportedEndpoints) {
            if (supportedChainlinkEndpoint.toLowerCase() === endpoint.toLowerCase()) {
                return apiEndpoint;
            }
        }
    }
    return null;
};
const selectEndpoint = (request, config, apiEndpoints, customParams) => {
    const params = customParams || exports.inputParameters;
    const validator = new _1.Validator(request, params);
    const jobRunID = validator.validated.id;
    const endpoint = validator.validated.data.endpoint || config.defaultEndpoint;
    if (!endpoint)
        throw new _1.AdapterError({
            jobRunID,
            message: `Endpoint not supplied and no default found`,
            statusCode: 400,
        });
    let apiEndpoint = findSupportedEndpoint(apiEndpoints, endpoint);
    if (!apiEndpoint && config.defaultEndpoint && endpoint !== config.defaultEndpoint) {
        external_adapter_1.logger.debug(`Endpoint ${endpoint} not found, trying default ${config.defaultEndpoint}`);
        apiEndpoint = findSupportedEndpoint(apiEndpoints, config.defaultEndpoint);
    }
    if (!apiEndpoint)
        throw new _1.AdapterError({
            jobRunID,
            message: `Endpoint ${endpoint} not supported.`,
            statusCode: 400,
        });
    if (apiEndpoint.endpointOverride) {
        const overridenEndpoint = apiEndpoint.endpointOverride(request);
        if (overridenEndpoint)
            apiEndpoint = findSupportedEndpoint(apiEndpoints, overridenEndpoint);
        if (request?.data?.endpoint)
            request.data.endpoint = overridenEndpoint;
        if (!apiEndpoint)
            throw new _1.AdapterError({
                jobRunID,
                message: `Overriden Endpoint ${overridenEndpoint} not supported.`,
                statusCode: 500,
            });
    }
    // Allow adapter endpoints to dynamically query different endpoint resultPaths
    if (apiEndpoint.endpointResultPaths && request.data && !request.data.resultPath) {
        const resultPath = apiEndpoint.endpointResultPaths[endpoint];
        if (typeof resultPath === 'function')
            request.data.resultPath = resultPath(request);
        else
            request.data.resultPath = resultPath;
    }
    return apiEndpoint;
};
const buildSelector = (request, context, config, apiEndpoints, customParams) => {
    _1.Requester.logConfig(config);
    const apiEndpoint = selectEndpoint(request, config, apiEndpoints, customParams);
    if (typeof apiEndpoint.execute === 'function') {
        return apiEndpoint.execute(request, context, config);
    }
    if (typeof apiEndpoint.makeExecute === 'function') {
        return apiEndpoint.makeExecute(config)(request, context);
    }
    throw new _1.AdapterError({
        message: `Internal error: no execute handler found.`,
        statusCode: 500,
    });
};
exports.Builder = { selectEndpoint, buildSelector };
//# sourceMappingURL=data:application/json;base64,