"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Requester = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const util_1 = require("../util");
const config_1 = require("./config");
const errors_1 = require("./errors");
const logger_1 = require("./logger");
const object_path_1 = tslib_1.__importDefault(require("object-path"));
const getFalse = () => false;
const DEFAULT_RETRY = 1;
class Requester {
    static async request(config, customError, retries = Number(process.env.RETRY) || DEFAULT_RETRY, delay = 1000) {
        if (typeof config === 'string')
            config = { url: config };
        if (typeof config.timeout === 'undefined') {
            const timeout = Number(process.env.TIMEOUT);
            config.timeout = !isNaN(timeout) ? timeout : 3000;
        }
        if (!customError)
            customError = getFalse;
        if (typeof customError !== 'function') {
            delay = retries;
            retries = customError;
            customError = getFalse;
        }
        const _retry = async (n) => {
            const _delayRetry = async (message) => {
                logger_1.logger.warn(message);
                await new Promise((resolve) => setTimeout(resolve, delay));
                return await _retry(n - 1);
            };
            let response;
            try {
                response = await axios_1.default(config);
            }
            catch (error) {
                // Request error
                if (n === 1) {
                    logger_1.logger.error(`Could not reach endpoint: ${JSON.stringify(error.message)}`);
                    throw new errors_1.AdapterError({
                        statusCode: error?.response?.status,
                        message: error?.message,
                        cause: error,
                    });
                }
                return await _delayRetry(`Caught error. Retrying: ${JSON.stringify(error.message)}`);
            }
            if (response.data.error || customError(response.data)) {
                // Response error
                if (n === 1) {
                    const message = `Could not retrieve valid data: ${JSON.stringify(response.data)}`;
                    logger_1.logger.error(message);
                    const cause = response.data.error || 'customError';
                    throw new errors_1.AdapterError({ message, cause });
                }
                return await _delayRetry(`Error in response. Retrying: ${JSON.stringify(response.data)}`);
            }
            // Success
            const { data, status, statusText } = response;
            logger_1.logger.debug({
                message: 'Received response',
                data,
                status,
                statusText,
            });
            return response;
        };
        return await _retry(retries);
    }
    static validateResultNumber(data, path, options) {
        const result = this.getResult(data, path);
        if (typeof result === 'undefined') {
            const message = 'Result could not be found in path';
            logger_1.logger.error(message, { data, path });
            throw new errors_1.AdapterError({ message });
        }
        if (Number(result) === 0 || isNaN(Number(result))) {
            const message = 'Invalid result';
            logger_1.logger.error(message, { data, path });
            throw new errors_1.AdapterError({ message });
        }
        const num = Number(result);
        if (options?.inverse && num != 0) {
            return 1 / num;
        }
        return num;
    }
    static getResult(data, path) {
        return object_path_1.default.get(data, path);
    }
    /**
     * Extend a typed Axios response with a single result or group of results
     * @param response Axios response object
     * @param result (optional) a single result value
     * @param results (optional) a group of results from a batch request
     */
    static withResult(response, result, results) {
        const isObj = util_1.deepType(response.data) === 'object';
        const output = isObj
            ? response
            : {
                ...response,
                data: { payload: response.data },
            };
        if (result)
            output.data.result = result;
        if (results)
            output.data.results = results;
        return output;
    }
    static errored(jobRunID = '1', error, statusCode = 500) {
        if (error instanceof errors_1.AdapterError) {
            error.jobRunID = jobRunID;
            return error.toJSONResponse();
        }
        if (error instanceof Error) {
            return new errors_1.AdapterError({
                jobRunID,
                statusCode,
                message: error.message,
                cause: error,
            }).toJSONResponse();
        }
        return new errors_1.AdapterError({ jobRunID, statusCode, message: error }).toJSONResponse();
    }
    /**
     * Conforms the .request() response to the expected Chainlink response structure
     * @param jobRunID
     * @param response The response data object
     * @param verbose Return full response data (optional, default: false)
     */
    static success(jobRunID = '1', response, verbose = false, batchablePropertyPath) {
        const debug = batchablePropertyPath ? { batchablePropertyPath } : undefined;
        return {
            jobRunID,
            data: verbose ? response.data : { result: response.data?.result },
            result: response.data?.result,
            statusCode: response.status || 200,
            debug,
        };
    }
}
exports.Requester = Requester;
Requester.getDefaultConfig = config_1.getDefaultConfig;
Requester.logConfig = config_1.logConfig;
Requester.toVendorName = (key, names) => names[String(key)];
//# sourceMappingURL=data:application/json;base64,