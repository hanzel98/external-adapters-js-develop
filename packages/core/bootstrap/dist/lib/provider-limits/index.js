"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWSLimits = exports.getRateLimit = exports.getHTTPLimit = exports.DEFAULT_WS_SUBSCRIPTIONS = exports.DEFAULT_WS_CONNECTIONS = exports.BURST_UNDEFINED_QUOTA_MULTIPLE = exports.DEFAULT_MINUTE_RATE_LIMIT = void 0;
const tslib_1 = require("tslib");
const external_adapter_1 = require("../external-adapter");
const limits_json_1 = tslib_1.__importDefault(require("./limits.json"));
exports.DEFAULT_MINUTE_RATE_LIMIT = 60;
exports.BURST_UNDEFINED_QUOTA_MULTIPLE = 2;
exports.DEFAULT_WS_CONNECTIONS = 2;
exports.DEFAULT_WS_SUBSCRIPTIONS = 10;
const getHTTPLimit = (provider, tier, timeframe) => {
    const providerLimit = getProviderLimits(provider, tier, 'http');
    return providerLimit?.[timeframe] || 0;
};
exports.getHTTPLimit = getHTTPLimit;
const getRateLimit = (provider, tier) => {
    const providerLimit = getProviderLimits(provider, tier, 'http');
    return calculateRateLimit(providerLimit);
};
exports.getRateLimit = getRateLimit;
const getWSLimits = (provider, tier) => {
    const providerLimit = getProviderLimits(provider, tier, 'ws');
    return calculateWSLimits(providerLimit);
};
exports.getWSLimits = getWSLimits;
const getProviderLimits = (provider, tier, protocol) => {
    const parsedLimits = parseLimits(limits_json_1.default);
    const providerConfig = parsedLimits[provider.toLowerCase()];
    if (!providerConfig)
        throw new Error(`Rate Limit: Provider: "${provider}" doesn't match any provider spec in limits.json`);
    const protocolConfig = providerConfig[protocol];
    if (!protocolConfig)
        throw new Error(`Rate Limit: "${provider}" doesn't have any configuration for ${protocol} in limits.json`);
    let limitsConfig = protocolConfig[tier.toLowerCase()];
    if (!limitsConfig) {
        external_adapter_1.logger.debug(`Rate Limit: "${provider} does not have tier ${tier} defined. Falling back to lowest tier"`);
        limitsConfig = Object.values(protocolConfig)?.[0];
    }
    if (!limitsConfig)
        throw new Error(`Rate Limit: Provider: "${provider}" has no tiers defined for ${protocol} in limits.json`);
    return limitsConfig;
};
const parseLimits = (limits) => {
    const _mapObject = (fn) => (o) => Object.fromEntries(Object.entries(o).map(fn));
    const _formatProtocol = _mapObject((entry) => {
        const [tierName, rest] = entry;
        return [tierName.toLowerCase(), { ...rest }];
    });
    const _formatProvider = _mapObject((entry) => {
        const [providerName, protocol] = entry;
        const http = _formatProtocol(protocol.http);
        const ws = _formatProtocol(protocol?.ws);
        return [providerName.toLowerCase(), { http, ws }];
    });
    return _formatProvider(limits);
};
const calculateWSLimits = (providerLimit) => {
    return {
        connections: providerLimit.connections,
        subscriptions: providerLimit.subscriptions,
    };
};
const calculateRateLimit = (providerLimit) => {
    let quota = providerLimit.rateLimit1m;
    if (!quota && providerLimit?.rateLimit1h) {
        quota = providerLimit?.rateLimit1h / 60;
    }
    else if (!quota && providerLimit?.rateLimit1s) {
        quota = providerLimit?.rateLimit1s * 60;
    }
    return {
        second: providerLimit?.rateLimit1s || (quota / 60) * exports.BURST_UNDEFINED_QUOTA_MULTIPLE,
        minute: quota,
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3Byb3ZpZGVyLWxpbWl0cy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsMERBQTRDO0FBQzVDLHdFQUFrQztBQUVyQixRQUFBLHlCQUF5QixHQUFHLEVBQUUsQ0FBQTtBQUM5QixRQUFBLDhCQUE4QixHQUFHLENBQUMsQ0FBQTtBQUVsQyxRQUFBLHNCQUFzQixHQUFHLENBQUMsQ0FBQTtBQUMxQixRQUFBLHdCQUF3QixHQUFHLEVBQUUsQ0FBQTtBQTZCbkMsTUFBTSxZQUFZLEdBQUcsQ0FDMUIsUUFBZ0IsRUFDaEIsSUFBWSxFQUNaLFNBQTZCLEVBQ3JCLEVBQUU7SUFDVixNQUFNLGFBQWEsR0FBRyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQy9ELE9BQVEsYUFBMEIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUN0RCxDQUFDLENBQUE7QUFQWSxRQUFBLFlBQVksZ0JBT3hCO0FBRU0sTUFBTSxZQUFZLEdBQUcsQ0FBQyxRQUFnQixFQUFFLElBQVksRUFBcUIsRUFBRTtJQUNoRixNQUFNLGFBQWEsR0FBRyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQy9ELE9BQU8sa0JBQWtCLENBQUMsYUFBeUIsQ0FBQyxDQUFBO0FBQ3RELENBQUMsQ0FBQTtBQUhZLFFBQUEsWUFBWSxnQkFHeEI7QUFFTSxNQUFNLFdBQVcsR0FBRyxDQUFDLFFBQWdCLEVBQUUsSUFBWSxFQUFVLEVBQUU7SUFDcEUsTUFBTSxhQUFhLEdBQUcsaUJBQWlCLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUM3RCxPQUFPLGlCQUFpQixDQUFDLGFBQXVCLENBQUMsQ0FBQTtBQUNuRCxDQUFDLENBQUE7QUFIWSxRQUFBLFdBQVcsZUFH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LEVBQUUsQ0FBQTtLQUN4QztTQUFNLElBQUksQ0FBQyxLQUFLLElBQUksYUFBYSxFQUFFLFdBQVcsRUFBRTtRQUMvQyxLQUFLLEdBQUcsYUFBYSxFQUFFLFdBQVcsR0FBRyxFQUFFLENBQUE7S0FDeEM7SUFDRCxPQUFPO1FBQ0wsTUFBTSxFQUFFLGFBQWEsRUFBRSxXQUFXLElBQUksQ0FBRSxLQUFnQixHQUFHLEVBQUUsQ0FBQyxHQUFHLHNDQUE4QjtRQUMvRixNQUFNLEVBQUUsS0FBZTtLQUN4QixDQUFBO0FBQ0gsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi4vZXh0ZXJuYWwtYWRhcHRlcidcbmltcG9ydCBsaW1pdHMgZnJvbSAnLi9saW1pdHMuanNvbidcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfTUlOVVRFX1JBVEVfTElNSVQgPSA2MFxuZXhwb3J0IGNvbnN0IEJVUlNUX1VOREVGSU5FRF9RVU9UQV9NVUxUSVBMRSA9IDJcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfV1NfQ09OTkVDVElPTlMgPSAyXG5leHBvcnQgY29uc3QgREVGQVVMVF9XU19TVUJTQ1JJUFRJT05TID0gMTBcblxudHlwZSBSYXRlTGltaXRUaW1lRnJhbWUgPSAncmF0ZUxpbWl0MXMnIHwgJ3JhdGVMaW1pdDFtJyB8ICdyYXRlTGltaXQxaCdcblxudHlwZSBIVFRQVGllciA9IHtcbiAgW2tleSBpbiBSYXRlTGltaXRUaW1lRnJhbWVdOiBudW1iZXJcbn1cblxudHlwZSBXU1RpZXIgPSB7XG4gIGNvbm5lY3Rpb25zOiBudW1iZXJcbiAgc3Vic2NyaXB0aW9uczogbnVtYmVyXG59XG5cbmludGVyZmFjZSBMaW1pdHMge1xuICBbcHJvdmlkZXJOYW1lOiBzdHJpbmddOiB7XG4gICAgaHR0cDoge1xuICAgICAgW3RpZXJOYW1lOiBzdHJpbmddOiBIVFRQVGllclxuICAgIH1cbiAgICB3czoge1xuICAgICAgW3RpZXJOYW1lOiBzdHJpbmddOiBXU1RpZXJcbiAgICB9XG4gIH1cbn1cblxuaW50ZXJmYWNlIFByb3ZpZGVyUmF0ZUxpbWl0IHtcbiAgc2Vjb25kOiBudW1iZXJcbiAgbWludXRlOiBudW1iZXJcbn1cblxuZXhwb3J0IGNvbnN0IGdldEhUVFBMaW1pdCA9IChcbiAgcHJvdmlkZXI6IHN0cmluZyxcbiAgdGllcjogc3RyaW5nLFxuICB0aW1lZnJhbWU6IFJhdGVMaW1pdFRpbWVGcmFtZSxcbik6IG51bWJlciA9PiB7XG4gIGNvbnN0IHByb3ZpZGVyTGltaXQgPSBnZXRQcm92aWRlckxpbWl0cyhwcm92aWRlciwgdGllciwgJ2h0dHAnKVxuICByZXR1cm4gKHByb3ZpZGVyTGltaXQgYXMgSFRUUFRpZXIpPy5bdGltZWZyYW1lXSB8fCAwXG59XG5cbmV4cG9ydCBjb25zdCBnZXRSYXRlTGltaXQgPSAocHJvdmlkZXI6IHN0cmluZywgdGllcjogc3RyaW5nKTogUHJvdmlkZXJSYXRlTGltaXQgPT4ge1xuICBjb25zdCBwcm92aWRlckxpbWl0ID0gZ2V0UHJvdmlkZXJMaW1pdHMocHJvdmlkZXIsIHRpZXIsICdodHRwJylcbiAgcmV0dXJuIGNhbGN1bGF0ZVJhdGVMaW1pdChwcm92aWRlckxpbWl0IGFzIEhUVFBUaWVyKVxufVxuXG5leHBvcnQgY29uc3QgZ2V0V1NMaW1pdHMgPSAocHJvdmlkZXI6IHN0cmluZywgdGllcjogc3RyaW5nKTogV1NUaWVyID0+IHtcbiAgY29uc3QgcHJvdmlkZXJMaW1pdCA9IGdldFByb3ZpZGVyTGltaXRzKHByb3ZpZGVyLCB0aWVyLCAnd3MnKVxuICByZXR1cm4gY2FsY3VsYXRlV1NMaW1pdHMocHJvdmlkZXJMaW1pdCBhcyBXU1RpZXIpXG59XG5cbmNvbnN0IGdldFByb3ZpZGVyTGltaXRzID0gKFxuICBwcm92aWRlcjogc3RyaW5nLFxuICB0aWVyOiBzdHJpbmcsXG4gIHByb3RvY29sOiAnd3MnIHwgJ2h0dHAnLFxuKTogSFRUUFRpZXIgfCBXU1RpZXIgfCB1bmRlZmluZWQgPT4ge1xuICBjb25zdCBwYXJzZWRMaW1pdHMgPSBwYXJzZUxpbWl0cyhsaW1pdHMpXG4gIGNvbnN0IHByb3ZpZGVyQ29uZmlnID0gcGFyc2VkTGltaXRzW3Byb3ZpZGVyLnRvTG93ZXJDYXNlKCldXG4gIGlmICghcHJvdmlkZXJDb25maWcpXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFJhdGUgTGltaXQ6IFByb3ZpZGVyOiBcIiR7cHJvdmlkZXJ9XCIgZG9lc24ndCBtYXRjaCBhbnkgcHJvdmlkZXIgc3BlYyBpbiBsaW1pdHMuanNvbmAsXG4gICAgKVxuXG4gIGNvbnN0IHByb3RvY29sQ29uZmlnID0gcHJvdmlkZXJDb25maWdbcHJvdG9jb2xdXG4gIGlmICghcHJvdG9jb2xDb25maWcpXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFJhdGUgTGltaXQ6IFwiJHtwcm92aWRlcn1cIiBkb2Vzbid0IGhhdmUgYW55IGNvbmZpZ3VyYXRpb24gZm9yICR7cHJvdG9jb2x9IGluIGxpbWl0cy5qc29uYCxcbiAgICApXG5cbiAgbGV0IGxpbWl0c0NvbmZpZyA9IHByb3RvY29sQ29uZmlnW3RpZXIudG9Mb3dlckNhc2UoKV1cblxuICBpZiAoIWxpbWl0c0NvbmZpZykge1xuICAgIGxvZ2dlci5kZWJ1ZyhcbiAgICAgIGBSYXRlIExpbWl0OiBcIiR7cHJvdmlkZXJ9IGRvZXMgbm90IGhhdmUgdGllciAke3RpZXJ9IGRlZmluZWQuIEZhbGxpbmcgYmFjayB0byBsb3dlc3QgdGllclwiYCxcbiAgICApXG4gICAgbGltaXRzQ29uZmlnID0gT2JqZWN0LnZhbHVlcyhwcm90b2NvbENvbmZpZyk/LlswXVxuICB9XG5cbiAgaWYgKCFsaW1pdHNDb25maWcpXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFJhdGUgTGltaXQ6IFByb3ZpZGVyOiBcIiR7cHJvdmlkZXJ9XCIgaGFzIG5vIHRpZXJzIGRlZmluZWQgZm9yICR7cHJvdG9jb2x9IGluIGxpbWl0cy5qc29uYCxcbiAgICApXG5cbiAgcmV0dXJuIGxpbWl0c0NvbmZpZ1xufVxuXG5jb25zdCBwYXJzZUxpbWl0cyA9IChsaW1pdHM6IGFueSk6IExpbWl0cyA9PiB7XG4gIGNvbnN0IF9tYXBPYmplY3QgPSAoZm46IGFueSkgPT4gKG86IGFueSkgPT4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKG8pLm1hcChmbikpXG4gIGNvbnN0IF9mb3JtYXRQcm90b2NvbCA9IF9tYXBPYmplY3QoKGVudHJ5OiBhbnlbXSkgPT4ge1xuICAgIGNvbnN0IFt0aWVyTmFtZSwgcmVzdF0gPSBlbnRyeVxuICAgIHJldHVybiBbdGllck5hbWUudG9Mb3dlckNhc2UoKSwgeyAuLi4ocmVzdCBhcyBhbnkpIH1dXG4gIH0pXG4gIGNvbnN0IF9mb3JtYXRQcm92aWRlciA9IF9tYXBPYmplY3QoKGVudHJ5OiBhbnlbXSkgPT4ge1xuICAgIGNvbnN0IFtwcm92aWRlck5hbWUsIHByb3RvY29sXSA9IGVudHJ5XG4gICAgY29uc3QgaHR0cCA9IF9mb3JtYXRQcm90b2NvbChwcm90b2NvbC5odHRwKVxuICAgIGNvbnN0IHdzID0gX2Zvcm1hdFByb3RvY29sKHByb3RvY29sPy53cylcbiAgICByZXR1cm4gW3Byb3ZpZGVyTmFtZS50b0xvd2VyQ2FzZSgpLCB7IGh0dHAsIHdzIH1dXG4gIH0pXG5cbiAgcmV0dXJuIF9mb3JtYXRQcm92aWRlcihsaW1pdHMpXG59XG5cbmNvbnN0IGNhbGN1bGF0ZVdTTGltaXRzID0gKHByb3ZpZGVyTGltaXQ6IFdTVGllcik6IFdTVGllciA9PiB7XG4gIHJldHVybiB7XG4gICAgY29ubmVjdGlvbnM6IHByb3ZpZGVyTGltaXQuY29ubmVjdGlvbnMsXG4gICAgc3Vic2NyaXB0aW9uczogcHJvdmlkZXJMaW1pdC5zdWJzY3JpcHRpb25zLFxuICB9XG59XG5cbmNvbnN0IGNhbGN1bGF0ZVJhdGVMaW1pdCA9IChwcm92aWRlckxpbWl0OiBIVFRQVGllcik6IFByb3ZpZGVyUmF0ZUxpbWl0ID0+IHtcbiAgbGV0IHF1b3RhID0gcHJvdmlkZXJMaW1pdC5yYXRlTGltaXQxbVxuICBpZiAoIXF1b3RhICYmIHByb3ZpZGVyTGltaXQ/LnJhdGVMaW1pdDFoKSB7XG4gICAgcXVvdGEgPSBwcm92aWRlckxpbWl0Py5yYXRlTGltaXQxaCAvIDYwXG4gIH0gZWxzZSBpZiAoIXF1b3RhICYmIHByb3ZpZGVyTGltaXQ/LnJhdGVMaW1pdDFzKSB7XG4gICAgcXVvdGEgPSBwcm92aWRlckxpbWl0Py5yYXRlTGltaXQxcyAqIDYwXG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzZWNvbmQ6IHByb3ZpZGVyTGltaXQ/LnJhdGVMaW1pdDFzIHx8ICgocXVvdGEgYXMgbnVtYmVyKSAvIDYwKSAqIEJVUlNUX1VOREVGSU5FRF9RVU9UQV9NVUxUSVBMRSxcbiAgICBtaW51dGU6IHF1b3RhIGFzIG51bWJlcixcbiAgfVxufVxuIl19