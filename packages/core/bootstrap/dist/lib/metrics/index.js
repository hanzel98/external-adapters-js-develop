"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.httpRequestsDataProviderHits = exports.httpRequestsCacheHits = exports.cacheWarmerRequests = exports.httpRequestDurationSeconds = exports.httpRequestsTotal = exports.HttpRequestType = exports.METRICS_ENABLED = exports.util = void 0;
const tslib_1 = require("tslib");
const client = tslib_1.__importStar(require("prom-client"));
const util_1 = require("../util");
exports.util = tslib_1.__importStar(require("./util"));
client.collectDefaultMetrics();
client.register.setDefaultLabels(
// we'll inject both name and versions in
// when EAEE gets merged, because it'll be a lot easier
// to refactor with full type coverage support
{ app_name: process.env.METRICS_NAME || 'N/A', app_version: 'N/A' });
exports.METRICS_ENABLED = util_1.parseBool(process.env.EXPERIMENTAL_METRICS_ENABLED);
var HttpRequestType;
(function (HttpRequestType) {
    HttpRequestType["CACHE_HIT"] = "cacheHit";
    HttpRequestType["DATA_PROVIDER_HIT"] = "dataProviderHit";
})(HttpRequestType = exports.HttpRequestType || (exports.HttpRequestType = {}));
exports.httpRequestsTotal = new client.Counter({
    name: 'http_requests_total',
    help: 'The number of http requests this external adapter has serviced for its entire uptime',
    labelNames: ['method', 'status_code', 'retry', 'type', 'is_cache_warming', 'feed_id'],
});
exports.httpRequestDurationSeconds = new client.Histogram({
    name: 'http_request_duration_seconds',
    help: 'A histogram bucket of the distribution of http request durations',
    // we should tune these as we collect data, this is the default
    // bucket distribution that prom comes with
    buckets: [0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10],
});
exports.cacheWarmerRequests = new client.Counter({
    name: 'cache_warmer_requests',
    help: 'The number of requests caused by the warmer',
    labelNames: ['method', 'statusCode', 'apiKey', 'retry'],
});
exports.httpRequestsCacheHits = new client.Counter({
    name: 'http_requests_cache_hits',
    help: 'The number of http requests that hit the cache',
    labelNames: ['method', 'statusCode', 'apiKey', 'retry'],
});
exports.httpRequestsDataProviderHits = new client.Counter({
    name: 'http_requests_data_provider_hits',
    help: 'The number of http requests that hit the provider',
    labelNames: ['method', 'statusCode', 'apiKey', 'retry'],
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL21ldHJpY3MvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDREQUFxQztBQUNyQyxrQ0FBbUM7QUFDbkMsdURBQThCO0FBRTlCLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxDQUFBO0FBQzlCLE1BQU0sQ0FBQyxRQUFRLENBQUMsZ0JBQWdCO0FBQzlCLHlDQUF5QztBQUN6Qyx1REFBdUQ7QUFDdkQsOENBQThDO0FBQzlDLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxJQUFJLEtBQUssRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLENBQ3BFLENBQUE7QUFDWSxRQUFBLGVBQWUsR0FBRyxnQkFBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtBQUVsRixJQUFZLGVBR1g7QUFIRCxXQUFZLGVBQWU7SUFDekIseUNBQXNCLENBQUE7SUFDdEIsd0RBQXFDLENBQUE7QUFDdkMsQ0FBQyxFQUhXLGVBQWUsR0FBZix1QkFBZSxLQUFmLHVCQUFlLFFBRzFCO0FBRVksUUFBQSxpQkFBaUIsR0FBRyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFDbEQsSUFBSSxFQUFFLHFCQUFxQjtJQUMzQixJQUFJLEVBQUUsc0ZBQXNGO0lBQzVGLFVBQVUsRUFBRSxDQUFDLFFBQVEsRUFBRSxhQUFhLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxTQUFTLENBQVU7Q0FDL0YsQ0FBQyxDQUFBO0FBRVcsUUFBQSwwQkFBMEIsR0FBRyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDN0QsSUFBSSxFQUFFLCtCQUErQjtJQUNyQyxJQUFJLEVBQUUsa0VBQWtFO0lBQ3hFLCtEQUErRDtJQUMvRCwyQ0FBMkM7SUFDM0MsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztDQUNuRSxDQUFDLENBQUE7QUFFVyxRQUFBLG1CQUFtQixHQUFHLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNwRCxJQUFJLEVBQUUsdUJBQXVCO0lBQzdCLElBQUksRUFBRSw2Q0FBNkM7SUFDbkQsVUFBVSxFQUFFLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFVO0NBQ2pFLENBQUMsQ0FBQTtBQUVXLFFBQUEscUJBQXFCLEdBQUcsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDO0lBQ3RELElBQUksRUFBRSwwQkFBMEI7SUFDaEMsSUFBSSxFQUFFLGdEQUFnRDtJQUN0RCxVQUFVLEVBQUUsQ0FBQyxRQUFRLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQVU7Q0FDakUsQ0FBQyxDQUFBO0FBRVcsUUFBQSw0QkFBNEIsR0FBRyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFDN0QsSUFBSSxFQUFFLGtDQUFrQztJQUN4QyxJQUFJLEVBQUUsbURBQW1EO0lBQ3pELFVBQVUsRUFBRSxDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBVTtDQUNqRSxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjbGllbnQgZnJvbSAncHJvbS1jbGllbnQnXG5pbXBvcnQgeyBwYXJzZUJvb2wgfSBmcm9tICcuLi91dGlsJ1xuZXhwb3J0ICogYXMgdXRpbCBmcm9tICcuL3V0aWwnXG5cbmNsaWVudC5jb2xsZWN0RGVmYXVsdE1ldHJpY3MoKVxuY2xpZW50LnJlZ2lzdGVyLnNldERlZmF1bHRMYWJlbHMoXG4gIC8vIHdlJ2xsIGluamVjdCBib3RoIG5hbWUgYW5kIHZlcnNpb25zIGluXG4gIC8vIHdoZW4gRUFFRSBnZXRzIG1lcmdlZCwgYmVjYXVzZSBpdCdsbCBiZSBhIGxvdCBlYXNpZXJcbiAgLy8gdG8gcmVmYWN0b3Igd2l0aCBmdWxsIHR5cGUgY292ZXJhZ2Ugc3VwcG9ydFxuICB7IGFwcF9uYW1lOiBwcm9jZXNzLmVudi5NRVRSSUNTX05BTUUgfHwgJ04vQScsIGFwcF92ZXJzaW9uOiAnTi9BJyB9LFxuKVxuZXhwb3J0IGNvbnN0IE1FVFJJQ1NfRU5BQkxFRCA9IHBhcnNlQm9vbChwcm9jZXNzLmVudi5FWFBFUklNRU5UQUxfTUVUUklDU19FTkFCTEVEKVxuXG5leHBvcnQgZW51bSBIdHRwUmVxdWVzdFR5cGUge1xuICBDQUNIRV9ISVQgPSAnY2FjaGVIaXQnLFxuICBEQVRBX1BST1ZJREVSX0hJVCA9ICdkYXRhUHJvdmlkZXJIaXQnLFxufVxuXG5leHBvcnQgY29uc3QgaHR0cFJlcXVlc3RzVG90YWwgPSBuZXcgY2xpZW50LkNvdW50ZXIoe1xuICBuYW1lOiAnaHR0cF9yZXF1ZXN0c190b3RhbCcsXG4gIGhlbHA6ICdUaGUgbnVtYmVyIG9mIGh0dHAgcmVxdWVzdHMgdGhpcyBleHRlcm5hbCBhZGFwdGVyIGhhcyBzZXJ2aWNlZCBmb3IgaXRzIGVudGlyZSB1cHRpbWUnLFxuICBsYWJlbE5hbWVzOiBbJ21ldGhvZCcsICdzdGF0dXNfY29kZScsICdyZXRyeScsICd0eXBlJywgJ2lzX2NhY2hlX3dhcm1pbmcnLCAnZmVlZF9pZCddIGFzIGNvbnN0LFxufSlcblxuZXhwb3J0IGNvbnN0IGh0dHBSZXF1ZXN0RHVyYXRpb25TZWNvbmRzID0gbmV3IGNsaWVudC5IaXN0b2dyYW0oe1xuICBuYW1lOiAnaHR0cF9yZXF1ZXN0X2R1cmF0aW9uX3NlY29uZHMnLFxuICBoZWxwOiAnQSBoaXN0b2dyYW0gYnVja2V0IG9mIHRoZSBkaXN0cmlidXRpb24gb2YgaHR0cCByZXF1ZXN0IGR1cmF0aW9ucycsXG4gIC8vIHdlIHNob3VsZCB0dW5lIHRoZXNlIGFzIHdlIGNvbGxlY3QgZGF0YSwgdGhpcyBpcyB0aGUgZGVmYXVsdFxuICAvLyBidWNrZXQgZGlzdHJpYnV0aW9uIHRoYXQgcHJvbSBjb21lcyB3aXRoXG4gIGJ1Y2tldHM6IFswLjAwNSwgMC4wMSwgMC4wMjUsIDAuMDUsIDAuMSwgMC4yNSwgMC41LCAxLCAyLjUsIDUsIDEwXSxcbn0pXG5cbmV4cG9ydCBjb25zdCBjYWNoZVdhcm1lclJlcXVlc3RzID0gbmV3IGNsaWVudC5Db3VudGVyKHtcbiAgbmFtZTogJ2NhY2hlX3dhcm1lcl9yZXF1ZXN0cycsXG4gIGhlbHA6ICdUaGUgbnVtYmVyIG9mIHJlcXVlc3RzIGNhdXNlZCBieSB0aGUgd2FybWVyJyxcbiAgbGFiZWxOYW1lczogWydtZXRob2QnLCAnc3RhdHVzQ29kZScsICdhcGlLZXknLCAncmV0cnknXSBhcyBjb25zdCxcbn0pXG5cbmV4cG9ydCBjb25zdCBodHRwUmVxdWVzdHNDYWNoZUhpdHMgPSBuZXcgY2xpZW50LkNvdW50ZXIoe1xuICBuYW1lOiAnaHR0cF9yZXF1ZXN0c19jYWNoZV9oaXRzJyxcbiAgaGVscDogJ1RoZSBudW1iZXIgb2YgaHR0cCByZXF1ZXN0cyB0aGF0IGhpdCB0aGUgY2FjaGUnLFxuICBsYWJlbE5hbWVzOiBbJ21ldGhvZCcsICdzdGF0dXNDb2RlJywgJ2FwaUtleScsICdyZXRyeSddIGFzIGNvbnN0LFxufSlcblxuZXhwb3J0IGNvbnN0IGh0dHBSZXF1ZXN0c0RhdGFQcm92aWRlckhpdHMgPSBuZXcgY2xpZW50LkNvdW50ZXIoe1xuICBuYW1lOiAnaHR0cF9yZXF1ZXN0c19kYXRhX3Byb3ZpZGVyX2hpdHMnLFxuICBoZWxwOiAnVGhlIG51bWJlciBvZiBodHRwIHJlcXVlc3RzIHRoYXQgaGl0IHRoZSBwcm92aWRlcicsXG4gIGxhYmVsTmFtZXM6IFsnbWV0aG9kJywgJ3N0YXR1c0NvZGUnLCAnYXBpS2V5JywgJ3JldHJ5J10gYXMgY29uc3QsXG59KVxuIl19