"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initHandler = exports.CONTENT_TYPE_TEXT_PLAIN = exports.CONTENT_TYPE_APPLICATION_JSON = exports.HEADER_CONTENT_TYPE = void 0;
const tslib_1 = require("tslib");
const express_1 = tslib_1.__importDefault(require("express"));
const path_1 = require("path");
const client = tslib_1.__importStar(require("prom-client"));
const index_1 = require("../index");
const cache_1 = require("./cache");
const test_payload_loader_1 = require("./config/test-payload-loader");
const errors_1 = require("./errors");
const external_adapter_1 = require("./external-adapter");
const metrics_1 = require("./metrics");
const config_1 = require("./rate-limit/config");
const util_1 = require("./util");
const app = express_1.default();
const port = process.env.EA_PORT || 8080;
const baseUrl = process.env.BASE_URL || '/';
exports.HEADER_CONTENT_TYPE = 'Content-Type';
exports.CONTENT_TYPE_APPLICATION_JSON = 'application/json';
exports.CONTENT_TYPE_TEXT_PLAIN = 'text/plain';
const initHandler = (name, execute, middleware) => async () => {
    const context = {
        name,
        cache: null,
        rateLimit: config_1.get({ name }),
    };
    const cacheOptions = cache_1.defaultOptions();
    if (cacheOptions.enabled) {
        cacheOptions.instance = await cacheOptions.cacheBuilder(cacheOptions.cacheImplOptions);
        context.cache = cacheOptions;
    }
    if (metrics_1.METRICS_ENABLED) {
        setupMetricsServer();
    }
    const executeWithMiddleware = await index_1.withMiddleware(execute, context, middleware);
    app.use(express_1.default.json());
    app.post(baseUrl, (req, res) => {
        if (!req.is(exports.CONTENT_TYPE_APPLICATION_JSON)) {
            return res
                .status(errors_1.HTTP_ERROR_UNSUPPORTED_MEDIA_TYPE)
                .send(errors_1.HTTP_ERROR_UNSUPPORTED_MEDIA_TYPE_MESSAGE);
        }
        req.body.data = {
            ...(req.body.data || {}),
            ...util_1.toObjectWithNumbers(req.query),
        };
        return index_1.executeSync(req.body, executeWithMiddleware, context, (status, result) => {
            res.status(status).json(result);
        });
    });
    app.get(path_1.join(baseUrl, 'health'), async (_, res) => {
        if (cacheOptions.enabled && cacheOptions.cacheImplOptions.type === 'redis') {
            external_adapter_1.logger.debug('Checking if redis connection initialized');
            const cache = context.cache.instance;
            if (!cache.client.connected) {
                res.status(500).send('Redis not connected');
                return;
            }
        }
        res.status(200).send('OK');
    });
    const testPayload = test_payload_loader_1.loadTestPayload();
    app.get(path_1.join(baseUrl, 'smoke'), async (_, res) => {
        if (testPayload.isDefault) {
            return res.status(200).send('OK');
        }
        const errors = [];
        for (const index in testPayload.requests) {
            try {
                await index_1.executeSync({ data: testPayload.requests[index], id: index }, executeWithMiddleware, context, (status, result) => {
                    if (status === 400)
                        errors.push(result);
                });
            }
            catch (e) {
                errors.push(e);
            }
        }
        if (errors.length > 0)
            return res.status(500).send(errors);
        return res.status(200).send('OK');
    });
    process.on('SIGINT', () => {
        context.cache?.instance?.close();
        process.exit();
    });
    return new Promise((resolve) => {
        const server = app.listen(port, () => {
            external_adapter_1.logger.info(`Listening on port ${port}!`);
            resolve(server);
        });
    });
};
exports.initHandler = initHandler;
function setupMetricsServer() {
    const metricsApp = express_1.default();
    const metricsPort = process.env.METRICS_PORT || 9080;
    const endpoint = process.env.METRICS_USE_BASE_URL ? path_1.join(baseUrl, 'metrics') : '/metrics';
    metricsApp.get(endpoint, async (_, res) => {
        res.type('txt');
        res.send(await client.register.metrics());
    });
    metricsApp.listen(metricsPort, () => external_adapter_1.logger.info(`Monitoring listening on port ${metricsPort}!`));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLDhEQUE2QjtBQUU3QiwrQkFBMkI7QUFDM0IsNERBQXFDO0FBQ3JDLG9DQUFzRDtBQUN0RCxtQ0FBd0M7QUFFeEMsc0VBQThEO0FBQzlELHFDQUdpQjtBQUNqQix5REFBMkM7QUFDM0MsdUNBQTJDO0FBQzNDLGdEQUErRDtBQUMvRCxpQ0FBNEM7QUFFNUMsTUFBTSxHQUFHLEdBQUcsaUJBQU8sRUFBRSxDQUFBO0FBQ3JCLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQTtBQUN4QyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsSUFBSSxHQUFHLENBQUE7QUFFOUIsUUFBQSxtQkFBbUIsR0FBRyxjQUFjLENBQUE7QUFDcEMsUUFBQSw2QkFBNkIsR0FBRyxrQkFBa0IsQ0FBQTtBQUNsRCxRQUFBLHVCQUF1QixHQUFHLFlBQVksQ0FBQTtBQUU1QyxNQUFNLFdBQVcsR0FDdEIsQ0FBQyxJQUFZLEVBQUUsT0FBZ0IsRUFBRSxVQUF3QixFQUFFLEVBQUUsQ0FBQyxLQUFLLElBQTBCLEVBQUU7SUFDN0YsTUFBTSxPQUFPLEdBQW1CO1FBQzlCLElBQUk7UUFDSixLQUFLLEVBQUUsSUFBSTtRQUNYLFNBQVMsRUFBRSxZQUFrQixDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUM7S0FDeEMsQ0FBQTtJQUVELE1BQU0sWUFBWSxHQUFHLHNCQUFjLEVBQUUsQ0FBQTtJQUNyQyxJQUFJLFlBQVksQ0FBQyxPQUFPLEVBQUU7UUFDeEIsWUFBWSxDQUFDLFFBQVEsR0FBRyxNQUFNLFlBQVksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLENBQUE7UUFDdEYsT0FBTyxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUE7S0FDN0I7SUFD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QUE7SUFFekYsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUN4QyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ2YsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtJQUMzQyxDQUFDLENBQUMsQ0FBQTtJQUVGLFVBQVUsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLHlCQUFNLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDbkcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFkYXB0ZXJDb250ZXh0LCBFeGVjdXRlLCBNaWRkbGV3YXJlIH0gZnJvbSAnQGNoYWlubGluay90eXBlcydcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnXG5pbXBvcnQgaHR0cCBmcm9tICdodHRwJ1xuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnXG5pbXBvcnQgKiBhcyBjbGllbnQgZnJvbSAncHJvbS1jbGllbnQnXG5pbXBvcnQgeyBleGVjdXRlU3luYywgd2l0aE1pZGRsZXdhcmUgfSBmcm9tICcuLi9pbmRleCdcbmltcG9ydCB7IGRlZmF1bHRPcHRpb25zIH0gZnJvbSAnLi9jYWNoZSdcbmltcG9ydCAqIGFzIHJlZGlzIGZyb20gJy4vY2FjaGUvcmVkaXMnXG5pbXBvcnQgeyBsb2FkVGVzdFBheWxvYWQgfSBmcm9tICcuL2NvbmZpZy90ZXN0LXBheWxvYWQtbG9hZGVyJ1xuaW1wb3J0IHtcbiAgSFRUUF9FUlJPUl9VTlNVUFBPUlRFRF9NRURJQV9UWVBFLFxuICBIVFRQX0VSUk9SX1VOU1VQUE9SVEVEX01FRElBX1RZUEVfTUVTU0FHRSxcbn0gZnJvbSAnLi9lcnJvcnMnXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuL2V4dGVybmFsLWFkYXB0ZXInXG5pbXBvcnQgeyBNRVRSSUNTX0VOQUJMRUQgfSBmcm9tICcuL21ldHJpY3MnXG5pbXBvcnQgeyBnZXQgYXMgZ2V0UmF0ZUxpbWl0Q29uZmlnIH0gZnJvbSAnLi9yYXRlLWxpbWl0L2NvbmZpZydcbmltcG9ydCB7IHRvT2JqZWN0V2l0aE51bWJlcnMgfSBmcm9tICcuL3V0aWwnXG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKVxuY29uc3QgcG9ydCA9IHByb2Nlc3MuZW52LkVBX1BPUlQgfHwgODA4MFxuY29uc3QgYmFzZVVybCA9IHByb2Nlc3MuZW52LkJBU0VfVVJMIHx8ICcvJ1xuXG5leHBvcnQgY29uc3QgSEVBREVSX0NPTlRFTlRfVFlQRSA9ICdDb250ZW50LVR5cGUnXG5leHBvcnQgY29uc3QgQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04gPSAnYXBwbGljYXRpb24vanNvbidcbmV4cG9ydCBjb25zdCBDT05URU5UX1RZUEVfVEVYVF9QTEFJTiA9ICd0ZXh0L3BsYWluJ1xuXG5leHBvcnQgY29uc3QgaW5pdEhhbmRsZXIgPVxuICAobmFtZTogc3RyaW5nLCBleGVjdXRlOiBFeGVjdXRlLCBtaWRkbGV3YXJlOiBNaWRkbGV3YXJlW10pID0+IGFzeW5jICgpOiBQcm9taXNlPGh0dHAuU2VydmVyPiA9PiB7XG4gICAgY29uc3QgY29udGV4dDogQWRhcHRlckNvbnRleHQgPSB7XG4gICAgICBuYW1lLFxuICAgICAgY2FjaGU6IG51bGwsXG4gICAgICByYXRlTGltaXQ6IGdldFJhdGVMaW1pdENvbmZpZyh7IG5hbWUgfSksXG4gICAgfVxuXG4gICAgY29uc3QgY2FjaGVPcHRpb25zID0gZGVmYXVsdE9wdGlvbnMoKVxuICAgIGlmIChjYWNoZU9wdGlvbnMuZW5hYmxlZCkge1xuICAgICAgY2FjaGVPcHRpb25zLmluc3RhbmNlID0gYXdhaXQgY2FjaGVPcHRpb25zLmNhY2hlQnVpbGRlcihjYWNoZU9wdGlvbnMuY2FjaGVJbXBsT3B0aW9ucylcbiAgICAgIGNvbnRleHQuY2FjaGUgPSBjYWNoZU9wdGlvbnNcbiAgICB9XG4gICAgaWYgKE1FVFJJQ1NfRU5BQkxFRCkge1xuICAgICAgc2V0dXBNZXRyaWNzU2VydmVyKClcbiAgICB9XG5cbiAgICBjb25zdCBleGVjdXRlV2l0aE1pZGRsZXdhcmUgPSBhd2FpdCB3aXRoTWlkZGxld2FyZShleGVjdXRlLCBjb250ZXh0LCBtaWRkbGV3YXJlKVxuXG4gICAgYXBwLnVzZShleHByZXNzLmpzb24oKSlcblxuICAgIGFwcC5wb3N0KGJhc2VVcmwsIChyZXEsIHJlcykgPT4ge1xuICAgICAgaWYgKCFyZXEuaXMoQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04pKSB7XG4gICAgICAgIHJldHVybiByZXNcbiAgICAgICAgICAuc3RhdHVzKEhUVFBfRVJST1JfVU5TVVBQT1JURURfTUVESUFfVFlQRSlcbiAgICAgICAgICAuc2VuZChIVFRQX0VSUk9SX1VOU1VQUE9SVEVEX01FRElBX1RZUEVfTUVTU0FHRSlcbiAgICAgIH1cbiAgICAgIHJlcS5ib2R5LmRhdGEgPSB7XG4gICAgICAgIC4uLihyZXEuYm9keS5kYXRhIHx8IHt9KSxcbiAgICAgICAgLi4udG9PYmplY3RXaXRoTnVtYmVycyhyZXEucXVlcnkpLFxuICAgICAgfVxuICAgIFxuICAgICAgcmV0dXJuIGV4ZWN1dGVTeW5jKHJlcS5ib2R5LCBleGVjdXRlV2l0aE1pZGRsZXdhcmUsIGNvbnRleHQsIChzdGF0dXMsIHJlc3VsdCkgPT4ge1xuICAgICAgICByZXMuc3RhdHVzKHN0YXR1cykuanNvbihyZXN1bHQpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBhcHAuZ2V0KGpvaW4oYmFzZVVybCwgJ2hlYWx0aCcpLCBhc3luYyAoXywgcmVzKSA9PiB7XG4gICAgICBpZiAoY2FjaGVPcHRpb25zLmVuYWJsZWQgJiYgY2FjaGVPcHRpb25zLmNhY2hlSW1wbE9wdGlvbnMudHlwZSA9PT0gJ3JlZGlzJykge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ0NoZWNraW5nIGlmIHJlZGlzIGNvbm5lY3Rpb24gaW5pdGlhbGl6ZWQnKVxuICAgICAgICBjb25zdCBjYWNoZSA9IGNvbnRleHQuY2FjaGUuaW5zdGFuY2UgYXMgcmVkaXMuUmVkaXNDYWNoZVxuICAgICAgICBpZiAoIWNhY2hlLmNsaWVudC5jb25uZWN0ZWQpIHtcbiAgICAgICAgICByZXMuc3RhdHVzKDUwMCkuc2VuZCgnUmVkaXMgbm90IGNvbm5lY3RlZCcpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmVzLnN0YXR1cygyMDApLnNlbmQoJ09LJylcbiAgICB9KVxuXG4gICAgY29uc3QgdGVzdFBheWxvYWQgPSBsb2FkVGVzdFBheWxvYWQoKVxuICAgIGFwcC5nZXQoam9pbihiYXNlVXJsLCAnc21va2UnKSwgYXN5bmMgKF8sIHJlcykgPT4ge1xuICAgICAgaWYgKHRlc3RQYXlsb2FkLmlzRGVmYXVsdCkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLnNlbmQoJ09LJylcbiAgICAgIH1cblxuICAgICAgY29uc3QgZXJyb3JzID0gW11cblxuICAgICAgZm9yIChjb25zdCBpbmRleCBpbiB0ZXN0UGF5bG9hZC5yZXF1ZXN0cykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IGV4ZWN1dGVTeW5jKFxuICAgICAgICAgICAgeyBkYXRhOiB0ZXN0UGF5bG9hZC5yZXF1ZXN0c1tpbmRleF0sIGlkOiBpbmRleCB9LFxuICAgICAgICAgICAgZXhlY3V0ZVdpdGhNaWRkbGV3YXJlLFxuICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgIChzdGF0dXMsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSA0MDApIGVycm9ycy5wdXNoKHJlc3VsdClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZXJyb3JzLnB1c2goZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSByZXR1cm4gcmVzLnN0YXR1cyg1MDApLnNlbmQoZXJyb3JzKVxuXG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLnNlbmQoJ09LJylcbiAgICB9KVxuXG4gICAgcHJvY2Vzcy5vbignU0lHSU5UJywgKCkgPT4ge1xuICAgICAgY29udGV4dC5jYWNoZT8uaW5zdGFuY2U/LmNsb3NlKClcbiAgICAgIHByb2Nlc3MuZXhpdCgpXG4gICAgfSlcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgY29uc3Qgc2VydmVyID0gYXBwLmxpc3Rlbihwb3J0LCAoKSA9PiB7XG4gICAgICAgIGxvZ2dlci5pbmZvKGBMaXN0ZW5pbmcgb24gcG9ydCAke3BvcnR9IWApXG4gICAgICAgIHJlc29sdmUoc2VydmVyKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbmZ1bmN0aW9uIHNldHVwTWV0cmljc1NlcnZlcigpIHtcbiAgY29uc3QgbWV0cmljc0FwcCA9IGV4cHJlc3MoKVxuICBjb25zdCBtZXRyaWNzUG9ydCA9IHByb2Nlc3MuZW52Lk1FVFJJQ1NfUE9SVCB8fCA5MDgwXG4gIGNvbnN0IGVuZHBvaW50ID0gcHJvY2Vzcy5lbnYuTUVUUklDU19VU0VfQkFTRV9VUkwgPyBqb2luKGJhc2VVcmwsICdtZXRyaWNzJykgOiAnL21ldHJpY3MnXG5cbiAgbWV0cmljc0FwcC5nZXQoZW5kcG9pbnQsIGFzeW5jIChfLCByZXMpID0+IHtcbiAgICByZXMudHlwZSgndHh0JylcbiAgICByZXMuc2VuZChhd2FpdCBjbGllbnQucmVnaXN0ZXIubWV0cmljcygpKVxuICB9KVxuXG4gIG1ldHJpY3NBcHAubGlzdGVuKG1ldHJpY3NQb3J0LCAoKSA9PiBsb2dnZXIuaW5mbyhgTW9uaXRvcmluZyBsaXN0ZW5pbmcgb24gcG9ydCAke21ldHJpY3NQb3J0fSFgKSlcbn1cbiJdfQ==