"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initHandler = exports.CONTENT_TYPE_TEXT_PLAIN = exports.CONTENT_TYPE_APPLICATION_JSON = exports.HEADER_CONTENT_TYPE = void 0;
const tslib_1 = require("tslib");
const express_1 = tslib_1.__importDefault(require("express"));
const path_1 = require("path");
const client = tslib_1.__importStar(require("prom-client"));
const index_1 = require("../index");
const cache_1 = require("./cache");
const test_payload_loader_1 = require("./config/test-payload-loader");
const errors_1 = require("./errors");
const external_adapter_1 = require("./external-adapter");
const metrics_1 = require("./metrics");
const config_1 = require("./rate-limit/config");
const util_1 = require("./util");
const app = express_1.default();
const port = process.env.EA_PORT || 8080;
const baseUrl = process.env.BASE_URL || '/';
exports.HEADER_CONTENT_TYPE = 'Content-Type';
exports.CONTENT_TYPE_APPLICATION_JSON = 'application/json';
exports.CONTENT_TYPE_TEXT_PLAIN = 'text/plain';
const initHandler = (name, execute, middleware) => async () => {
    const context = {
        name,
        cache: null,
        rateLimit: config_1.get({ name }),
    };
    const cacheOptions = cache_1.defaultOptions();
    if (cacheOptions.enabled) {
        cacheOptions.instance = await cacheOptions.cacheBuilder(cacheOptions.cacheImplOptions);
        context.cache = cacheOptions;
    }
    if (metrics_1.METRICS_ENABLED) {
        setupMetricsServer();
    }
    const executeWithMiddleware = await index_1.withMiddleware(execute, context, middleware);
    app.use(express_1.default.json());
    app.post(baseUrl, (req, res) => {
        if (!req.is(exports.CONTENT_TYPE_APPLICATION_JSON)) {
            return res
                .status(errors_1.HTTP_ERROR_UNSUPPORTED_MEDIA_TYPE)
                .send(errors_1.HTTP_ERROR_UNSUPPORTED_MEDIA_TYPE_MESSAGE);
        }
        req.body.data = {
            ...(req.body.data || {}),
            ...util_1.toObjectWithNumbers(req.query),
        };
        return index_1.executeSync(req.body, executeWithMiddleware, context, (status, result) => {
            console.log(result);
            res.status(status).json(result);
        });
    });
    app.get(path_1.join(baseUrl, 'health'), async (_, res) => {
        if (cacheOptions.enabled && cacheOptions.cacheImplOptions.type === 'redis') {
            external_adapter_1.logger.debug('Checking if redis connection initialized');
            const cache = context.cache.instance;
            if (!cache.client.connected) {
                res.status(500).send('Redis not connected');
                return;
            }
        }
        res.status(200).send('OK');
    });
    const testPayload = test_payload_loader_1.loadTestPayload();
    app.get(path_1.join(baseUrl, 'smoke'), async (_, res) => {
        if (testPayload.isDefault) {
            return res.status(200).send('OK');
        }
        const errors = [];
        for (const index in testPayload.requests) {
            try {
                await index_1.executeSync({ data: testPayload.requests[index], id: index }, executeWithMiddleware, context, (status, result) => {
                    if (status === 400)
                        errors.push(result);
                });
            }
            catch (e) {
                errors.push(e);
            }
        }
        if (errors.length > 0)
            return res.status(500).send(errors);
        return res.status(200).send('OK');
    });
    process.on('SIGINT', () => {
        context.cache?.instance?.close();
        process.exit();
    });
    return new Promise((resolve) => {
        const server = app.listen(port, () => {
            external_adapter_1.logger.info(`Listening on port ${port}!`);
            resolve(server);
        });
    });
};
exports.initHandler = initHandler;
function setupMetricsServer() {
    const metricsApp = express_1.default();
    const metricsPort = process.env.METRICS_PORT || 9080;
    const endpoint = process.env.METRICS_USE_BASE_URL ? path_1.join(baseUrl, 'metrics') : '/metrics';
    metricsApp.get(endpoint, async (_, res) => {
        res.type('txt');
        res.send(await client.register.metrics());
    });
    metricsApp.listen(metricsPort, () => external_adapter_1.logger.info(`Monitoring listening on port ${metricsPort}!`));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLDhEQUE2QjtBQUU3QiwrQkFBMkI7QUFDM0IsNERBQXFDO0FBQ3JDLG9DQUFzRDtBQUN0RCxtQ0FBd0M7QUFFeEMsc0VBQThEO0FBQzlELHFDQUdpQjtBQUNqQix5REFBMkM7QUFDM0MsdUNBQTJDO0FBQzNDLGdEQUErRDtBQUMvRCxpQ0FBNEM7QUFFNUMsTUFBTSxHQUFHLEdBQUcsaUJBQU8sRUFBRSxDQUFBO0FBQ3JCLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQTtBQUN4QyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsSUFBSSxHQUFHLENBQUE7QUFFOUIsUUFBQSxtQkFBbUIsR0FBRyxjQUFjLENBQUE7QUFDcEMsUUFBQSw2QkFBNkIsR0FBRyxrQkFBa0IsQ0FBQTtBQUNsRCxRQUFBLHVCQUF1QixHQUFHLFlBQVksQ0FBQTtBQUU1QyxNQUFNLFdBQVcsR0FDdEIsQ0FBQyxJQUFZLEVBQUUsT0FBZ0IsRUFBRSxVQUF3QixFQUFFLEVBQUUsQ0FBQyxLQUFLLElBQTBCLEVBQUU7SUFDN0YsTUFBTSxPQUFPLEdBQW1CO1FBQzlCLElBQUk7UUFDSixLQUFLLEVBQUUsSUFBSTtRQUNYLFNBQVMsRUFBRSxZQUFrQixDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUM7S0FDeEMsQ0FBQTtJQUVELE1BQU0sWUFBWSxHQUFHLHNCQUFjLEVBQUUsQ0FBQTtJQUNyQyxJQUFJLFlBQVksQ0FBQyxPQUFPLEVBQUU7UUFDeEIsWUFBWSxDQUFDLFFBQVEsR0FBRyxNQUFNLFlBQVksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLENBQUE7UUFDdEYsT0FBTyxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUE7S0FDN0I7SUFD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QUFPLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQTtJQUV6RixVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ3hDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDZixHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBO0lBQzNDLENBQUMsQ0FBQyxDQUFBO0lBRUYsVUFBVSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsR0FBRyxFQUFFLENBQUMseUJBQU0sQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUNuRyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWRhcHRlckNvbnRleHQsIEV4ZWN1dGUsIE1pZGRsZXdhcmUgfSBmcm9tICdAY2hhaW5saW5rL3R5cGVzJ1xuaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcydcbmltcG9ydCBodHRwIGZyb20gJ2h0dHAnXG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCdcbmltcG9ydCAqIGFzIGNsaWVudCBmcm9tICdwcm9tLWNsaWVudCdcbmltcG9ydCB7IGV4ZWN1dGVTeW5jLCB3aXRoTWlkZGxld2FyZSB9IGZyb20gJy4uL2luZGV4J1xuaW1wb3J0IHsgZGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuL2NhY2hlJ1xuaW1wb3J0ICogYXMgcmVkaXMgZnJvbSAnLi9jYWNoZS9yZWRpcydcbmltcG9ydCB7IGxvYWRUZXN0UGF5bG9hZCB9IGZyb20gJy4vY29uZmlnL3Rlc3QtcGF5bG9hZC1sb2FkZXInXG5pbXBvcnQge1xuICBIVFRQX0VSUk9SX1VOU1VQUE9SVEVEX01FRElBX1RZUEUsXG4gIEhUVFBfRVJST1JfVU5TVVBQT1JURURfTUVESUFfVFlQRV9NRVNTQUdFLFxufSBmcm9tICcuL2Vycm9ycydcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4vZXh0ZXJuYWwtYWRhcHRlcidcbmltcG9ydCB7IE1FVFJJQ1NfRU5BQkxFRCB9IGZyb20gJy4vbWV0cmljcydcbmltcG9ydCB7IGdldCBhcyBnZXRSYXRlTGltaXRDb25maWcgfSBmcm9tICcuL3JhdGUtbGltaXQvY29uZmlnJ1xuaW1wb3J0IHsgdG9PYmplY3RXaXRoTnVtYmVycyB9IGZyb20gJy4vdXRpbCdcblxuY29uc3QgYXBwID0gZXhwcmVzcygpXG5jb25zdCBwb3J0ID0gcHJvY2Vzcy5lbnYuRUFfUE9SVCB8fCA4MDgwXG5jb25zdCBiYXNlVXJsID0gcHJvY2Vzcy5lbnYuQkFTRV9VUkwgfHwgJy8nXG5cbmV4cG9ydCBjb25zdCBIRUFERVJfQ09OVEVOVF9UWVBFID0gJ0NvbnRlbnQtVHlwZSdcbmV4cG9ydCBjb25zdCBDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTiA9ICdhcHBsaWNhdGlvbi9qc29uJ1xuZXhwb3J0IGNvbnN0IENPTlRFTlRfVFlQRV9URVhUX1BMQUlOID0gJ3RleHQvcGxhaW4nXG5cbmV4cG9ydCBjb25zdCBpbml0SGFuZGxlciA9XG4gIChuYW1lOiBzdHJpbmcsIGV4ZWN1dGU6IEV4ZWN1dGUsIG1pZGRsZXdhcmU6IE1pZGRsZXdhcmVbXSkgPT4gYXN5bmMgKCk6IFByb21pc2U8aHR0cC5TZXJ2ZXI+ID0+IHtcbiAgICBjb25zdCBjb250ZXh0OiBBZGFwdGVyQ29udGV4dCA9IHtcbiAgICAgIG5hbWUsXG4gICAgICBjYWNoZTogbnVsbCxcbiAgICAgIHJhdGVMaW1pdDogZ2V0UmF0ZUxpbWl0Q29uZmlnKHsgbmFtZSB9KSxcbiAgICB9XG5cbiAgICBjb25zdCBjYWNoZU9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucygpXG4gICAgaWYgKGNhY2hlT3B0aW9ucy5lbmFibGVkKSB7XG4gICAgICBjYWNoZU9wdGlvbnMuaW5zdGFuY2UgPSBhd2FpdCBjYWNoZU9wdGlvbnMuY2FjaGVCdWlsZGVyKGNhY2hlT3B0aW9ucy5jYWNoZUltcGxPcHRpb25zKVxuICAgICAgY29udGV4dC5jYWNoZSA9IGNhY2hlT3B0aW9uc1xuICAgIH1cbiAgICBpZiAoTUVUUklDU19FTkFCTEVEKSB7XG4gICAgICBzZXR1cE1ldHJpY3NTZXJ2ZXIoKVxuICAgIH1cblxuICAgIGNvbnN0IGV4ZWN1dGVXaXRoTWlkZGxld2FyZSA9IGF3YWl0IHdpdGhNaWRkbGV3YXJlKGV4ZWN1dGUsIGNvbnRleHQsIG1pZGRsZXdhcmUpXG5cbiAgICBhcHAudXNlKGV4cHJlc3MuanNvbigpKVxuXG4gICAgYXBwLnBvc3QoYmFzZVVybCwgKHJlcSwgcmVzKSA9PiB7XG4gICAgICBpZiAoIXJlcS5pcyhDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTikpIHtcbiAgICAgICAgcmV0dXJuIHJlc1xuICAgICAgICAgIC5zdGF0dXMoSFRUUF9FUlJPUl9VTlNVUFBPUlRFRF9NRURJQV9UWVBFKVxuICAgICAgICAgIC5zZW5kKEhUVFBfRVJST1JfVU5TVVBQT1JURURfTUVESUFfVFlQRV9NRVNTQUdFKVxuICAgICAgfVxuICAgICAgcmVxLmJvZHkuZGF0YSA9IHtcbiAgICAgICAgLi4uKHJlcS5ib2R5LmRhdGEgfHwge30pLFxuICAgICAgICAuLi50b09iamVjdFdpdGhOdW1iZXJzKHJlcS5xdWVyeSksXG4gICAgICB9XG4gICAgXG4gICAgICByZXR1cm4gZXhlY3V0ZVN5bmMocmVxLmJvZHksIGV4ZWN1dGVXaXRoTWlkZGxld2FyZSwgY29udGV4dCwgKHN0YXR1cywgcmVzdWx0KSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdClcbiAgICAgICAgcmVzLnN0YXR1cyhzdGF0dXMpLmpzb24ocmVzdWx0KVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgYXBwLmdldChqb2luKGJhc2VVcmwsICdoZWFsdGgnKSwgYXN5bmMgKF8sIHJlcykgPT4ge1xuICAgICAgaWYgKGNhY2hlT3B0aW9ucy5lbmFibGVkICYmIGNhY2hlT3B0aW9ucy5jYWNoZUltcGxPcHRpb25zLnR5cGUgPT09ICdyZWRpcycpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdDaGVja2luZyBpZiByZWRpcyBjb25uZWN0aW9uIGluaXRpYWxpemVkJylcbiAgICAgICAgY29uc3QgY2FjaGUgPSBjb250ZXh0LmNhY2hlLmluc3RhbmNlIGFzIHJlZGlzLlJlZGlzQ2FjaGVcbiAgICAgICAgaWYgKCFjYWNoZS5jbGllbnQuY29ubmVjdGVkKSB7XG4gICAgICAgICAgcmVzLnN0YXR1cyg1MDApLnNlbmQoJ1JlZGlzIG5vdCBjb25uZWN0ZWQnKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKCdPSycpXG4gICAgfSlcblxuICAgIGNvbnN0IHRlc3RQYXlsb2FkID0gbG9hZFRlc3RQYXlsb2FkKClcbiAgICBhcHAuZ2V0KGpvaW4oYmFzZVVybCwgJ3Ntb2tlJyksIGFzeW5jIChfLCByZXMpID0+IHtcbiAgICAgIGlmICh0ZXN0UGF5bG9hZC5pc0RlZmF1bHQpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5zZW5kKCdPSycpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGVycm9ycyA9IFtdXG5cbiAgICAgIGZvciAoY29uc3QgaW5kZXggaW4gdGVzdFBheWxvYWQucmVxdWVzdHMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhd2FpdCBleGVjdXRlU3luYyhcbiAgICAgICAgICAgIHsgZGF0YTogdGVzdFBheWxvYWQucmVxdWVzdHNbaW5kZXhdLCBpZDogaW5kZXggfSxcbiAgICAgICAgICAgIGV4ZWN1dGVXaXRoTWlkZGxld2FyZSxcbiAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICAoc3RhdHVzLCByZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gNDAwKSBlcnJvcnMucHVzaChyZXN1bHQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIClcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGVycm9ycy5wdXNoKGUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMCkgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5zZW5kKGVycm9ycylcblxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5zZW5kKCdPSycpXG4gICAgfSlcblxuICAgIHByb2Nlc3Mub24oJ1NJR0lOVCcsICgpID0+IHtcbiAgICAgIGNvbnRleHQuY2FjaGU/Lmluc3RhbmNlPy5jbG9zZSgpXG4gICAgICBwcm9jZXNzLmV4aXQoKVxuICAgIH0pXG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIGNvbnN0IHNlcnZlciA9IGFwcC5saXN0ZW4ocG9ydCwgKCkgPT4ge1xuICAgICAgICBsb2dnZXIuaW5mbyhgTGlzdGVuaW5nIG9uIHBvcnQgJHtwb3J0fSFgKVxuICAgICAgICByZXNvbHZlKHNlcnZlcilcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG5mdW5jdGlvbiBzZXR1cE1ldHJpY3NTZXJ2ZXIoKSB7XG4gIGNvbnN0IG1ldHJpY3NBcHAgPSBleHByZXNzKClcbiAgY29uc3QgbWV0cmljc1BvcnQgPSBwcm9jZXNzLmVudi5NRVRSSUNTX1BPUlQgfHwgOTA4MFxuICBjb25zdCBlbmRwb2ludCA9IHByb2Nlc3MuZW52Lk1FVFJJQ1NfVVNFX0JBU0VfVVJMID8gam9pbihiYXNlVXJsLCAnbWV0cmljcycpIDogJy9tZXRyaWNzJ1xuXG4gIG1ldHJpY3NBcHAuZ2V0KGVuZHBvaW50LCBhc3luYyAoXywgcmVzKSA9PiB7XG4gICAgcmVzLnR5cGUoJ3R4dCcpXG4gICAgcmVzLnNlbmQoYXdhaXQgY2xpZW50LnJlZ2lzdGVyLm1ldHJpY3MoKSlcbiAgfSlcblxuICBtZXRyaWNzQXBwLmxpc3RlbihtZXRyaWNzUG9ydCwgKCkgPT4gbG9nZ2VyLmluZm8oYE1vbml0b3JpbmcgbGlzdGVuaW5nIG9uIHBvcnQgJHttZXRyaWNzUG9ydH0hYCkpXG59XG4iXX0=