"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rootReducer = exports.warmupReducer = exports.subscriptionsReducer = void 0;
const tslib_1 = require("tslib");
const toolkit_1 = require("@reduxjs/toolkit");
const external_adapter_1 = require("../external-adapter");
const actions = tslib_1.__importStar(require("./actions"));
const util_1 = require("./util");
const lodash_1 = require("lodash");
exports.subscriptionsReducer = toolkit_1.createReducer({}, (builder) => {
    builder.addCase(actions.warmupSubscribed, (state, { payload }) => {
        const key = payload.key || util_1.getSubscriptionKey(payload);
        state[key] = {
            origin: payload.data,
            executeFn: payload.executeFn,
            startedAt: state[key]?.startedAt ?? Date.now(),
            isDuplicate: !!state[key],
            parent: payload.parent || state[key]?.parent,
            batchablePropertyPath: payload.batchablePropertyPath || state[key]?.batchablePropertyPath,
            childLastSeenById: payload?.childLastSeenById,
        };
    });
    builder.addCase(actions.warmupSubscribedMultiple, (state, { payload }) => {
        for (const member of payload.members) {
            const key = member.key || util_1.getSubscriptionKey(member);
            state[key] = {
                origin: member.data,
                executeFn: member.executeFn,
                startedAt: state[key]?.startedAt ?? Date.now(),
                isDuplicate: !!state[key],
                parent: member.parent || state[key]?.parent,
                batchablePropertyPath: member.batchablePropertyPath || state[key]?.batchablePropertyPath,
                childLastSeenById: member?.childLastSeenById,
            };
        }
    });
    builder.addCase(actions.warmupUnsubscribed, (state, action) => {
        const subscription = state[action.payload.key];
        if (subscription) {
            delete state[action.payload.key];
            if (!subscription.childLastSeenById) {
                return;
            }
            const children = Object.keys(subscription.childLastSeenById);
            for (const childKey of children) {
                delete state[childKey];
            }
        }
    });
    builder.addCase(actions.warmupJoinGroup, (state, { payload }) => {
        const batchWarmer = state[payload.parent];
        batchWarmer.childLastSeenById = {
            ...batchWarmer.childLastSeenById,
            ...payload.childLastSeenById,
        };
        for (const childKey in payload.childLastSeenById) {
            const childRequestData = state[childKey]?.origin;
            if (childRequestData) {
                // Join request data
                for (const { name } of payload.batchablePropertyPath) {
                    const uniqueBatchableValue = new Set(batchWarmer.origin[name]);
                    uniqueBatchableValue.add(childRequestData[name] || childRequestData.data[name]);
                    batchWarmer.origin[name] = [...uniqueBatchableValue];
                }
                // Join overrides
                if (batchWarmer.origin.overrides || childRequestData.overrides)
                    batchWarmer.origin.overrides = lodash_1.merge(batchWarmer.origin.overrides, childRequestData.overrides);
                if (batchWarmer.origin.tokenOverrides || childRequestData.tokenOverrides)
                    batchWarmer.origin.tokenOverrides = lodash_1.merge(batchWarmer.origin.tokenOverrides, childRequestData.tokenOverrides);
                if (batchWarmer.origin.includes || childRequestData.includes)
                    batchWarmer.origin.includes = lodash_1.uniq([
                        ...(batchWarmer.origin.includes || []),
                        ...(childRequestData.includes || []),
                    ]);
            }
        }
    });
    builder.addCase(actions.warmupLeaveGroup, (state, { payload }) => {
        const batchWarmer = state[payload.parent];
        const childIdsToRemove = Object.keys(payload.childLastSeenById);
        const remainingChildIds = Object.keys(batchWarmer.childLastSeenById || {}).filter((childId) => !childIdsToRemove.includes(childId));
        // The request data for a batch request should only contain unique values
        const requestDataWithUniqueValues = Object.fromEntries(payload.batchablePropertyPath.map(({ name }) => [name, new Set()]));
        // Rebuild the request data without the removed children's data
        const batchRequestData = remainingChildIds.reduce((acc, childId) => {
            for (const { name } of payload.batchablePropertyPath) {
                acc[name].add(state[childId].origin[name]);
            }
            return acc;
        }, requestDataWithUniqueValues);
        // Transform the sets back into arrays
        const batchableRequestData = Object.fromEntries(Object.entries(batchRequestData).map(([path, map]) => [path, [...map]]));
        // Rebuild the overrides
        const overrides = remainingChildIds.reduce((acc, childId) => {
            const childOriginData = state[childId].origin;
            if (childOriginData.overrides)
                acc.overrides = lodash_1.merge(acc.overrides || {}, childOriginData.overrides);
            if (childOriginData.tokenOverrides)
                acc.tokenOverrides = lodash_1.merge(acc.tokenOverrides || {}, childOriginData.tokenOverrides);
            if (childOriginData.includes)
                acc.includes = lodash_1.uniq([...(acc.includes || []), ...childOriginData.includes]);
            return acc;
        }, {});
        batchWarmer.origin = {
            ...batchWarmer.origin,
            ...batchableRequestData,
            ...overrides,
        };
        for (const childKey in payload.childLastSeenById) {
            if (batchWarmer?.childLastSeenById?.[childKey])
                delete batchWarmer.childLastSeenById?.[childKey];
        }
    });
});
exports.warmupReducer = toolkit_1.createReducer({}, (builder) => {
    builder.addCase(actions.warmupRequested, (state, action) => {
        if (!state[action.payload.key]) {
            external_adapter_1.logger.info('[warmupReducer] Creating subscription', {
                warmupSubscriptionKey: action.payload.key,
            });
            state[action.payload.key] = { error: null, successCount: 0, errorCount: 0 };
        }
    });
    builder.addCase(actions.warmupFulfilled, (state, action) => {
        const { key } = action.payload;
        const subscription = state[key];
        if (!subscription) {
            external_adapter_1.logger.error('[warmupReducer] Attempted to fulfill warmup request for a non-existing subscription', { warmupSubscriptionKey: key });
            return state;
        }
        subscription.successCount++;
        subscription.error = null;
        subscription.errorCount = 0;
        return state;
    });
    builder.addCase(actions.warmupFailed, (state, action) => {
        const { key, feedLabel: id, error } = action.payload;
        const subscription = state[key];
        if (!subscription) {
            external_adapter_1.logger.error('[warmupReducer] Attempted to fulfill warmup request for a non-existing subscription', { warmupSubscriptionKey: key });
            return state;
        }
        external_adapter_1.logger.error(`[${id}] Cache Warmer failed`, { error: error?.message });
        subscription.error = action.payload.error;
        subscription.errorCount++;
        subscription.successCount = 0;
        return state;
    });
    builder.addCase(actions.warmupUnsubscribed, (state, action) => {
        const { key, reason } = action.payload;
        external_adapter_1.logger.info('[warmupReducer] Deleting subscription. ', { reason });
        delete state[key];
    });
    builder.addCase(actions.warmupStopped, (state, action) => {
        external_adapter_1.logger.info('[warmupReducer] Stopping subscriptions', {
            warmupSubscriptionKey: action.payload.keys,
        });
        for (const key in action.payload.keys) {
            delete state[key];
        }
    });
});
exports.rootReducer = toolkit_1.combineReducers({
    subscriptions: exports.subscriptionsReducer,
    warmups: exports.warmupReducer,
});
//# sourceMappingURL=data:application/json;base64,