"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.concatenateBatchResults = exports.splitIntoBatches = exports.getSubscriptionKey = void 0;
const lodash_1 = require("lodash");
const config_1 = require("./config");
const util_1 = require("../util");
const conf = config_1.get();
function getSubscriptionKey(request) {
    return util_1.hash(lodash_1.omit(request, ['id', 'parent', 'children', 'result', 'batchablePropertyPath']), conf.hashOpts);
}
exports.getSubscriptionKey = getSubscriptionKey;
function splitIntoBatches(requestData) {
    const { batchablePropertyPath, origin } = requestData;
    if (!batchablePropertyPath) {
        return [];
    }
    const batchesByPath = groupBatchesByPath(batchablePropertyPath, origin);
    return getBatchesArray(batchesByPath);
}
exports.splitIntoBatches = splitIntoBatches;
function groupBatchesByPath(batchablePropertyPath, origin) {
    const batchesByPath = {};
    for (const { name, limit } of batchablePropertyPath) {
        if (origin[name]) {
            const batchedValues = origin[name];
            if (limit) {
                batchesByPath[name] = splitValuesIntoBatches(limit, batchedValues);
            }
            else {
                batchesByPath[name] = [batchedValues];
            }
        }
    }
    return batchesByPath;
}
function splitValuesIntoBatches(limit, values) {
    const batches = [];
    let idx = 0;
    while (idx < values.length) {
        const batch = values.slice(idx, Math.min(idx + limit, values.length));
        idx += limit;
        batches.push(batch);
    }
    return batches;
}
function getBatchesArray(batchesByPath) {
    const batches = [];
    populateBatchesArray(batchesByPath, batches, Object.keys(batchesByPath), 0, {});
    return batches;
}
function populateBatchesArray(batchesByPath, batches, batchPaths, idx, currBatch) {
    if (idx >= batchPaths.length) {
        batches.push(JSON.parse(JSON.stringify(currBatch)));
    }
    else {
        const currPath = batchPaths[idx];
        const pathBatch = batchesByPath[currPath];
        for (const batchValue of pathBatch) {
            currBatch[currPath] = batchValue;
            populateBatchesArray(batchesByPath, batches, batchPaths, idx + 1, currBatch);
            delete currBatch[currPath];
        }
    }
}
function concatenateBatchResults(result, latestResult) {
    if (!result) {
        return latestResult;
    }
    const mergedResult = JSON.parse(JSON.stringify(result));
    const bases = Object.keys(latestResult.data).filter((base) => base !== 'results');
    for (const base of bases) {
        if (mergedResult.data[base]) {
            mergedResult.data[base] = {
                ...mergedResult.data[base],
                ...latestResult.data[base],
            };
        }
        else {
            mergedResult.data[base] = latestResult.data[base];
        }
    }
    mergedResult.data.results = mergedResult.data.results.concat(latestResult.data.results);
    return mergedResult;
}
exports.concatenateBatchResults = concatenateBatchResults;
//# sourceMappingURL=data:application/json;base64,