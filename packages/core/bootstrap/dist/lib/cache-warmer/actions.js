"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.warmupFailed = exports.warmupFulfilled = exports.warmupRequested = exports.warmupLeaveGroup = exports.warmupJoinGroup = exports.warmupStopped = exports.warmupUnsubscribed = exports.warmupSubscriptionTimeoutReset = exports.warmupSubscribedMultiple = exports.warmupSubscribed = exports.warmupExecute = void 0;
const toolkit_1 = require("@reduxjs/toolkit");
exports.warmupExecute = toolkit_1.createAction('WARMUP/EXECUTE');
exports.warmupSubscribed = toolkit_1.createAction('WARMUP/SUBSCRIBED');
exports.warmupSubscribedMultiple = toolkit_1.createAction('WARMUP/SUBSCRIBED_MULTIPLE');
exports.warmupSubscriptionTimeoutReset = toolkit_1.createAction('WARMUP/SUBSCRIPTION_TIMEOUT_RESET');
exports.warmupUnsubscribed = toolkit_1.createAction('WARMUP/UNSUBSCRIBED');
exports.warmupStopped = toolkit_1.createAction('WARMUP/STOPPED');
exports.warmupJoinGroup = toolkit_1.createAction('WARMUP/JOIN_GROUP');
exports.warmupLeaveGroup = toolkit_1.createAction('WARMUP/LEAVE_GROUP');
/**
 * These set of events are emitted when our warmup handler requests the EA itself to warm up
 * the cache for a particular key
 */
exports.warmupRequested = toolkit_1.createAction('WARMUP/REQUESTED');
exports.warmupFulfilled = toolkit_1.createAction('WARMUP/FULFILLED');
exports.warmupFailed = toolkit_1.createAction('WARMUP/FAILED');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY2FjaGUtd2FybWVyL2FjdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsOENBQStDO0FBWWxDLFFBQUEsYUFBYSxHQUFHLHNCQUFZLENBQXVCLGdCQUFnQixDQUFDLENBQUE7QUEwRHBFLFFBQUEsZ0JBQWdCLEdBQUcsc0JBQVksQ0FBMEIsbUJBQW1CLENBQUMsQ0FBQTtBQUM3RSxRQUFBLHdCQUF3QixHQUFHLHNCQUFZLENBQ2xELDRCQUE0QixDQUM3QixDQUFBO0FBQ1ksUUFBQSw4QkFBOEIsR0FBRyxzQkFBWSxDQUN4RCxtQ0FBbUMsQ0FDcEMsQ0FBQTtBQUNZLFFBQUEsa0JBQWtCLEdBQUcsc0JBQVksQ0FBNEIscUJBQXFCLENBQUMsQ0FBQTtBQUNuRixRQUFBLGFBQWEsR0FBRyxzQkFBWSxDQUF1QixnQkFBZ0IsQ0FBQyxDQUFBO0FBQ3BFLFFBQUEsZUFBZSxHQUFHLHNCQUFZLENBQXlCLG1CQUFtQixDQUFDLENBQUE7QUFDM0UsUUFBQSxnQkFBZ0IsR0FBRyxzQkFBWSxDQUEwQixvQkFBb0IsQ0FBQyxDQUFBO0FBdUIzRjs7O0dBR0c7QUFDVSxRQUFBLGVBQWUsR0FBRyxzQkFBWSxDQUF5QixrQkFBa0IsQ0FBQyxDQUFBO0FBQzFFLFFBQUEsZUFBZSxHQUFHLHNCQUFZLENBQXlCLGtCQUFrQixDQUFDLENBQUE7QUFDMUUsUUFBQSxZQUFZLEdBQUcsc0JBQVksQ0FBc0IsZUFBZSxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZGFwdGVyUmVxdWVzdCwgQWRhcHRlclJlc3BvbnNlLCBFeGVjdXRlIH0gZnJvbSAnQGNoYWlubGluay90eXBlcydcbmltcG9ydCB7IEJhdGNoYWJsZVByb3BlcnR5IH0gZnJvbSAnLi9yZWR1Y2VyJ1xuaW1wb3J0IHsgY3JlYXRlQWN0aW9uIH0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdCdcblxuZXhwb3J0IGludGVyZmFjZSBXYXJtdXBFeGVjdXRlUGF5bG9hZCBleHRlbmRzIEFkYXB0ZXJSZXF1ZXN0IHtcbiAgLyoqXG4gICAqIFRoZSBFeGVjdXRlIGZ1bmN0aW9uIG9mIHRoZSBhZGFwdGVyLiBVc2VkIHdoZW4gcG9sbGluZyBmb3IgbmV3IGRhdGEuXG4gICAqL1xuICBleGVjdXRlRm46IEV4ZWN1dGVcbiAgLyoqXG4gICAqIFRoZSByZXNwb25zZSByZXR1cm5lZCBmcm9tIHJlcXVlc3RpbmcgZGF0YSBmcm9tIGEgcHJvdmlkZXJcbiAgICovXG4gIHJlc3VsdDogQWRhcHRlclJlc3BvbnNlXG59XG5leHBvcnQgY29uc3Qgd2FybXVwRXhlY3V0ZSA9IGNyZWF0ZUFjdGlvbjxXYXJtdXBFeGVjdXRlUGF5bG9hZD4oJ1dBUk1VUC9FWEVDVVRFJylcblxuZXhwb3J0IGludGVyZmFjZSBXYXJtdXBTdWJzY3JpYmVkUGF5bG9hZCBleHRlbmRzIFdhcm11cEV4ZWN1dGVQYXlsb2FkIHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBrZXkgdG8gdXNlZCB3aGVuIHN0b3JpbmcgdGhlIHN1YnNjcmlwdGlvblxuICAgKiBCYXRjaCB3YXJtZXJzIHdpbGwgdXNlIGEga2V5IHdpdGhvdXQgdGhlIGRhdGEgcHJvcGVydHlcbiAgICovXG4gIGtleT86IHN0cmluZ1xuICAvKipcbiAgICogSWYgYSBzdWJzY3JpcHRpb24gaXMgYmVpbmcgd2FybWVkIGJ5IGEgYmF0Y2ggd2FybWVyXG4gICAqIFRoaXMgd2lsbCBob2xkIHRoZSBzdWJzY3JpcHRpb24ga2V5IG9mIHRoZSBwYXJlbnRcbiAgICovXG4gIHBhcmVudD86IHN0cmluZ1xuICAvKipcbiAgICogSWYgYSBzdWJzY3JpcHRpb24gaXMgYmVpbmcgd2FybWVkIGJ5IGEgcGFyZW50IGJhdGNoIHJlcXVlc3RcbiAgICogVGhpcyB3aWxsIGhvbGQgdGhlIGtleSBvZiB0aGUgcmVxdWVzdCBkYXRhIHRvIGpvaW5cbiAgICogKGUuZy5cbiAgICogd2hlbiBnZXR0aW5nIHByaWNlIGRhdGEgdGhpcyBtaWdodCBiZSBcImJhc2VcIlxuICAgKiB0aGF0IHdpbGwgYmUgdGhlIHBhdGggaW4gZGF0YTpcbiAgICogIHtcbiAgICogICAgXCJiYXNlXCI6IFtcIkVUSFwiLCBcIlVTRFwiXSxcbiAgICogICAgXCJxdW90ZVwiOiBcIlVTRFwiXG4gICAqICB9XG4gICAqIClcbiAgICovXG4gIGJhdGNoYWJsZVByb3BlcnR5UGF0aD86IEJhdGNoYWJsZVByb3BlcnR5W11cbiAgLyoqXG4gICAqIElmIGEgc3Vic2NyaXB0aW9uIGlzIGEgYmF0Y2ggd2FybWVyIHRoYXQgaXMgd2FybWluZyBtdWx0aXBsZSBvdGhlciByZXF1ZXN0c1xuICAgKiBUaGlzIHdpbGwgaG9sZCBhIG1hcCBvZiB0aGUgY2hpbGRyZW4gc3Vic2NyaXB0aW9uIGtleSB0byB0aGUgbGFzdCB0aW1lIGl0IHdhcyBzZWVuXG4gICAqL1xuICBjaGlsZExhc3RTZWVuQnlJZD86IHsgW2NoaWxkS2V5OiBzdHJpbmddOiBudW1iZXIgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdhcm11cFN1YnNjcmliZWRNdWx0aXBsZVBheWxvYWQge1xuICBtZW1iZXJzOiBXYXJtdXBTdWJzY3JpYmVkUGF5bG9hZFtdXG59XG5cbmludGVyZmFjZSBXYXJtdXBVbnN1YnNjcmliZWRQYXlsb2FkIHtcbiAga2V5OiBzdHJpbmdcbiAgcmVhc29uOiBzdHJpbmdcbn1cbmludGVyZmFjZSBXYXJtdXBTdG9wcGVkUGF5bG9hZCB7XG4gIGtleXM6IHN0cmluZ1tdXG59XG5pbnRlcmZhY2UgV2FybXVwU3Vic2NyaXB0aW9uVGltZW91dFJlc2V0UGF5bG9hZCB7XG4gIGtleTogc3RyaW5nXG59XG5pbnRlcmZhY2UgV2FybXVwSm9pbkdyb3VwUGF5bG9hZCB7XG4gIHBhcmVudDogc3RyaW5nXG4gIGNoaWxkTGFzdFNlZW5CeUlkOiB7IFtjaGlsZEtleTogc3RyaW5nXTogbnVtYmVyIH1cbiAgYmF0Y2hhYmxlUHJvcGVydHlQYXRoOiBCYXRjaGFibGVQcm9wZXJ0eVtdXG59XG5pbnRlcmZhY2UgV2FybXVwTGVhdmVHcm91cFBheWxvYWQge1xuICBwYXJlbnQ6IHN0cmluZ1xuICBjaGlsZExhc3RTZWVuQnlJZDogeyBbY2hpbGRLZXk6IHN0cmluZ106IG51bWJlciB9XG4gIGJhdGNoYWJsZVByb3BlcnR5UGF0aDogQmF0Y2hhYmxlUHJvcGVydHlbXVxufVxuXG5leHBvcnQgY29uc3Qgd2FybXVwU3Vic2NyaWJlZCA9IGNyZWF0ZUFjdGlvbjxXYXJtdXBTdWJzY3JpYmVkUGF5bG9hZD4oJ1dBUk1VUC9TVUJTQ1JJQkVEJylcbmV4cG9ydCBjb25zdCB3YXJtdXBTdWJzY3JpYmVkTXVsdGlwbGUgPSBjcmVhdGVBY3Rpb248V2FybXVwU3Vic2NyaWJlZE11bHRpcGxlUGF5bG9hZD4oXG4gICdXQVJNVVAvU1VCU0NSSUJFRF9NVUxUSVBMRScsXG4pXG5leHBvcnQgY29uc3Qgd2FybXVwU3Vic2NyaXB0aW9uVGltZW91dFJlc2V0ID0gY3JlYXRlQWN0aW9uPFdhcm11cFN1YnNjcmlwdGlvblRpbWVvdXRSZXNldFBheWxvYWQ+KFxuICAnV0FSTVVQL1NVQlNDUklQVElPTl9USU1FT1VUX1JFU0VUJyxcbilcbmV4cG9ydCBjb25zdCB3YXJtdXBVbnN1YnNjcmliZWQgPSBjcmVhdGVBY3Rpb248V2FybXVwVW5zdWJzY3JpYmVkUGF5bG9hZD4oJ1dBUk1VUC9VTlNVQlNDUklCRUQnKVxuZXhwb3J0IGNvbnN0IHdhcm11cFN0b3BwZWQgPSBjcmVhdGVBY3Rpb248V2FybXVwU3RvcHBlZFBheWxvYWQ+KCdXQVJNVVAvU1RPUFBFRCcpXG5leHBvcnQgY29uc3Qgd2FybXVwSm9pbkdyb3VwID0gY3JlYXRlQWN0aW9uPFdhcm11cEpvaW5Hcm91cFBheWxvYWQ+KCdXQVJNVVAvSk9JTl9HUk9VUCcpXG5leHBvcnQgY29uc3Qgd2FybXVwTGVhdmVHcm91cCA9IGNyZWF0ZUFjdGlvbjxXYXJtdXBMZWF2ZUdyb3VwUGF5bG9hZD4oJ1dBUk1VUC9MRUFWRV9HUk9VUCcpXG5cbmludGVyZmFjZSBXYXJtdXBSZXF1ZXN0ZWRQYXlsb2FkIHtcbiAgLyoqXG4gICAqIFN0YXRlIGxvb2t1cCBrZXkgc28gdGhhdCB0aGUgd2FybXVwIGhhbmRsZXIgY2FuIGZpbmQgdGhlIHNsaWNlIG9mIGRhdGEgaXQgbmVlZHNcbiAgICogdG8gd2FybXVwIHRoZSBjb2xkIEVBXG4gICAqL1xuICBrZXk6IHN0cmluZ1xufVxuaW50ZXJmYWNlIFdhcm11cEZ1bGZpbGxlZFBheWxvYWQge1xuICAvKipcbiAgICogU3RhdGUgbG9va3VwIGtleVxuICAgKi9cbiAga2V5OiBzdHJpbmdcbn1cbmludGVyZmFjZSBXYXJtdXBGYWlsZWRQYXlsb2FkIHtcbiAgLyoqXG4gICAqIFN0YXRlIGxvb2t1cCBrZXlcbiAgICovXG4gIGZlZWRMYWJlbDogc3RyaW5nXG4gIGtleTogc3RyaW5nXG4gIGVycm9yOiBFcnJvclxufVxuLyoqXG4gKiBUaGVzZSBzZXQgb2YgZXZlbnRzIGFyZSBlbWl0dGVkIHdoZW4gb3VyIHdhcm11cCBoYW5kbGVyIHJlcXVlc3RzIHRoZSBFQSBpdHNlbGYgdG8gd2FybSB1cFxuICogdGhlIGNhY2hlIGZvciBhIHBhcnRpY3VsYXIga2V5XG4gKi9cbmV4cG9ydCBjb25zdCB3YXJtdXBSZXF1ZXN0ZWQgPSBjcmVhdGVBY3Rpb248V2FybXVwUmVxdWVzdGVkUGF5bG9hZD4oJ1dBUk1VUC9SRVFVRVNURUQnKVxuZXhwb3J0IGNvbnN0IHdhcm11cEZ1bGZpbGxlZCA9IGNyZWF0ZUFjdGlvbjxXYXJtdXBGdWxmaWxsZWRQYXlsb2FkPignV0FSTVVQL0ZVTEZJTExFRCcpXG5leHBvcnQgY29uc3Qgd2FybXVwRmFpbGVkID0gY3JlYXRlQWN0aW9uPFdhcm11cEZhaWxlZFBheWxvYWQ+KCdXQVJNVVAvRkFJTEVEJylcbiJdfQ==