"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withWebSockets = exports.types = exports.reducer = exports.epics = exports.config = exports.actions = void 0;
const tslib_1 = require("tslib");
const actions_1 = require("./actions");
const config_1 = require("./config");
const cache_1 = require("../cache");
const utils_1 = require("./utils");
exports.actions = tslib_1.__importStar(require("./actions"));
exports.config = tslib_1.__importStar(require("./config"));
exports.epics = tslib_1.__importStar(require("./epics"));
exports.reducer = tslib_1.__importStar(require("./reducer"));
exports.types = tslib_1.__importStar(require("./types"));
const config_2 = require("../cache-warmer/config");
const withWebSockets = (store, makeWsHandler) => async (execute, context) => async (input) => {
    const wsConfig = config_1.getWSConfig(input.data.endpoint);
    if (!makeWsHandler || !wsConfig.enabled)
        return await execute(input, context); // ignore middleware if conditions are met
    if (input.id === config_2.WARMUP_REQUEST_ID || input.id === config_2.WARMUP_BATCH_REQUEST_ID)
        return await execute(input, context); // ignore middleware if warmer request
    const wsHandler = await makeWsHandler();
    if (wsHandler.shouldNotServeInputUsingWS && wsHandler.shouldNotServeInputUsingWS(input)) {
        return await execute(input, context);
    }
    if (wsHandler.programmaticConnectionInfo) {
        const programmaticConnectionInfo = wsHandler.programmaticConnectionInfo(input);
        if (programmaticConnectionInfo) {
            wsConfig.connectionInfo.key = programmaticConnectionInfo.key;
            wsHandler.connection.url = programmaticConnectionInfo.url;
        }
    }
    store.dispatch(actions_1.connectRequested({ config: wsConfig, wsHandler, context, request: input }));
    if (isConnected(store, wsConfig.connectionInfo.key)) {
        await utils_1.separateBatches(input, async (singleInput) => {
            const subscriptionMsg = wsHandler.subscribe(singleInput);
            if (!subscriptionMsg)
                return;
            const subscriptionPayload = {
                connectionInfo: {
                    key: wsConfig.connectionInfo.key,
                    url: wsHandler.connection.url,
                },
                subscriptionMsg,
                input: singleInput,
                context,
            };
            store.dispatch(actions_1.subscribeRequested(subscriptionPayload));
        });
    }
    // Check if adapter only supports WS
    if (wsHandler.noHttp) {
        // If so, we try to get a result from cache within API_TIMEOUT
        const requestTimeout = Number(process.env.API_TIMEOUT) || 30000;
        const deadline = Date.now() + requestTimeout;
        return await awaitResult(context, input, deadline);
    }
    return await execute(input, context);
};
exports.withWebSockets = withWebSockets;
const isConnected = (store, connectionKey) => {
    const state = store.getState();
    const connectionState = state.connections.all[connectionKey];
    if (!connectionState) {
        return false;
    }
    const isActiveConnection = connectionState.active;
    const isConnecting = connectionState.connecting > 1;
    const hasOnConnectChainCompleted = connectionState.isOnConnectChainComplete;
    return isActiveConnection && !isConnecting && hasOnConnectChainCompleted;
};
const awaitResult = async (context, input, deadline) => {
    const adapterCache = new cache_1.AdapterCache(context);
    const pollInterval = 1000;
    while (Date.now() < deadline - pollInterval) {
        const cachedAdapterResponse = await adapterCache.getResultForRequest(input);
        if (cachedAdapterResponse)
            return cachedAdapterResponse;
        await sleep(pollInterval);
    }
    throw Error('timed out waiting for result to be cached');
};
const sleep = async (time) => {
    return new Promise((resolve) => setTimeout(resolve, time));
};
//# sourceMappingURL=data:application/json;base64,