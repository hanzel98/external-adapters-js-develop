"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageReceived = exports.unsubscribeFulfilled = exports.unsubscribeRequested = exports.subscriptionErrorHandler = exports.subscriptionError = exports.subscribeFulfilled = exports.subscribeRequested = exports.onConnectComplete = exports.incrementOnConnectIdx = exports.saveOnConnectMessage = exports.disconnectRequested = exports.disconnectFulfilled = exports.connectFailed = exports.connectFulfilled = exports.connectRequested = exports.wsSubscriptionReady = exports.saveFirstMessageReceived = exports.updateSubscriptionInput = exports.runOnConnectFunctions = void 0;
const toolkit_1 = require("@reduxjs/toolkit");
const store_1 = require("../store");
exports.runOnConnectFunctions = toolkit_1.createAction('WS/RUN_ON_CONNECT_FUNCTIONS', store_1.asAction());
exports.updateSubscriptionInput = toolkit_1.createAction('WS/UPDATE_SUBSRCRIPTION_INPUT', store_1.asAction());
exports.saveFirstMessageReceived = toolkit_1.createAction('WS/SAVE_FIRST_MESSAGE_RECEIVED', store_1.asAction());
exports.wsSubscriptionReady = toolkit_1.createAction('WS/SUBSCRIPTION_READY', store_1.asAction());
exports.connectRequested = toolkit_1.createAction('WS/CONNECT_REQUESTED', store_1.asAction());
exports.connectFulfilled = toolkit_1.createAction('WS/CONNECT_FULFILLED', store_1.asAction());
exports.connectFailed = toolkit_1.createAction('WS/CONNECTION_FAILED', store_1.asAction());
exports.disconnectFulfilled = toolkit_1.createAction('WS/DISCONNECT_FULFILLED', store_1.asAction());
exports.disconnectRequested = toolkit_1.createAction('WS/DISCONNECT_REQUESTED', store_1.asAction());
exports.saveOnConnectMessage = toolkit_1.createAction('WS/SAVE_ON_CONNECT_MESSAGE', store_1.asAction());
exports.incrementOnConnectIdx = toolkit_1.createAction('WS/INCREMENT_ON_CONNECT_IDX', store_1.asAction());
exports.onConnectComplete = toolkit_1.createAction('WS/ON_CONNECT_COMPLETE', store_1.asAction());
exports.subscribeRequested = toolkit_1.createAction('WS/SUBSCRIBE_REQUESTED', store_1.asAction());
exports.subscribeFulfilled = toolkit_1.createAction('WS/SUBSCRIBE_FULFILLED', store_1.asAction());
exports.subscriptionError = toolkit_1.createAction('WS/SUBSCRIPTION_ERROR', store_1.asAction());
exports.subscriptionErrorHandler = toolkit_1.createAction('WS/SUBSCRIPTION_ERROR_HANDLER', store_1.asAction());
exports.unsubscribeRequested = toolkit_1.createAction('WS/UNSUBSCRIBE_REQUESTED', store_1.asAction());
exports.unsubscribeFulfilled = toolkit_1.createAction('WS/UNSUBSCRIBE_FULFILLED', store_1.asAction());
exports.messageReceived = toolkit_1.createAction('WS/MESSAGE_RECEIVED', store_1.asAction());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvd3MvYWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSw4Q0FBK0M7QUFFL0Msb0NBQW1DO0FBa0R0QixRQUFBLHFCQUFxQixHQUFHLHNCQUFZLENBQy9DLDZCQUE2QixFQUM3QixnQkFBUSxFQUEyQixDQUNwQyxDQUFBO0FBQ1ksUUFBQSx1QkFBdUIsR0FBRyxzQkFBWSxDQUNqRCwrQkFBK0IsRUFDL0IsZ0JBQVEsRUFBb0MsQ0FDN0MsQ0FBQTtBQUNZLFFBQUEsd0JBQXdCLEdBQUcsc0JBQVksQ0FDbEQsZ0NBQWdDLEVBQ2hDLGdCQUFRLEVBQTZCLENBQ3RDLENBQUE7QUFDWSxRQUFBLG1CQUFtQixHQUFHLHNCQUFZLENBQzdDLHVCQUF1QixFQUN2QixnQkFBUSxFQUFtQyxDQUM1QyxDQUFBO0FBQ1ksUUFBQSxnQkFBZ0IsR0FBRyxzQkFBWSxDQUMxQyxzQkFBc0IsRUFDdEIsZ0JBQVEsRUFBMkIsQ0FDcEMsQ0FBQTtBQUNZLFFBQUEsZ0JBQWdCLEdBQUcsc0JBQVksQ0FDMUMsc0JBQXNCLEVBQ3RCLGdCQUFRLEVBQTZCLENBQ3RDLENBQUE7QUFDWSxRQUFBLGFBQWEsR0FBRyxzQkFBWSxDQUFDLHNCQUFzQixFQUFFLGdCQUFRLEVBQWtCLENBQUMsQ0FBQTtBQUNoRixRQUFBLG1CQUFtQixHQUFHLHNCQUFZLENBQzdDLHlCQUF5QixFQUN6QixnQkFBUSxFQUFtQixDQUM1QixDQUFBO0FBQ1ksUUFBQSxtQkFBbUIsR0FBRyxzQkFBWSxDQUM3Qyx5QkFBeUIsRUFDekIsZ0JBQVEsRUFBbUIsQ0FDNUIsQ0FBQTtBQUNZLFFBQUEsb0JBQW9CLEdBQUcsc0JBQVksQ0FDOUMsNEJBQTRCLEVBQzVCLGdCQUFRLEVBQTZCLENBQ3RDLENBQUE7QUFDWSxRQUFBLHFCQUFxQixHQUFHLHNCQUFZLENBQy9DLDZCQUE2QixFQUM3QixnQkFBUSxFQUFtQixDQUM1QixDQUFBO0FBQ1ksUUFBQSxpQkFBaUIsR0FBRyxzQkFBWSxDQUMzQyx3QkFBd0IsRUFDeEIsZ0JBQVEsRUFBeUIsQ0FDbEMsQ0FBQTtBQTJCWSxRQUFBLGtCQUFrQixHQUFHLHNCQUFZLENBQzVDLHdCQUF3QixFQUN4QixnQkFBUSxFQUF5QixDQUNsQyxDQUFBO0FBQ1ksUUFBQSxrQkFBa0IsR0FBRyxzQkFBWSxDQUM1Qyx3QkFBd0IsRUFDeEIsZ0JBQVEsRUFBeUIsQ0FDbEMsQ0FBQTtBQUNZLFFBQUEsaUJBQWlCLEdBQUcsc0JBQVksQ0FDM0MsdUJBQXVCLEVBQ3ZCLGdCQUFRLEVBQThCLENBQ3ZDLENBQUE7QUFDWSxRQUFBLHdCQUF3QixHQUFHLHNCQUFZLENBQ2xELCtCQUErQixFQUMvQixnQkFBUSxFQUFxQyxDQUM5QyxDQUFBO0FBQ1ksUUFBQSxvQkFBb0IsR0FBRyxzQkFBWSxDQUM5QywwQkFBMEIsRUFDMUIsZ0JBQVEsRUFBeUIsQ0FDbEMsQ0FBQTtBQUNZLFFBQUEsb0JBQW9CLEdBQUcsc0JBQVksQ0FDOUMsMEJBQTBCLEVBQzFCLGdCQUFRLEVBQXlCLENBQ2xDLENBQUE7QUFZWSxRQUFBLGVBQWUsR0FBRyxzQkFBWSxDQUFDLHFCQUFxQixFQUFFLGdCQUFRLEVBQW9CLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFkYXB0ZXJDb250ZXh0LCBBZGFwdGVyUmVxdWVzdCwgV1NIYW5kbGVyIH0gZnJvbSAnQGNoYWlubGluay90eXBlcydcbmltcG9ydCB7IGNyZWF0ZUFjdGlvbiB9IGZyb20gJ0ByZWR1eGpzL3Rvb2xraXQnXG5pbXBvcnQgeyBXZWJTb2NrZXRTdWJqZWN0IH0gZnJvbSAncnhqcy93ZWJTb2NrZXQnXG5pbXBvcnQgeyBhc0FjdGlvbiB9IGZyb20gJy4uL3N0b3JlJ1xuaW1wb3J0IHsgV1NDb25maWcsIFdTQ29ubmVjdGlvbkluZm8gfSBmcm9tICcuL3R5cGVzJ1xuXG4vKiogQ09OTkVDVElPTlMgKi9cbmV4cG9ydCBpbnRlcmZhY2UgV1NDb25maWdQYXlsb2FkIHtcbiAgY29uZmlnOiBXU0NvbmZpZ1xuICAvLyBUT0RPOiB3c0hhbmRsZXIgc2hvdWxkIG5vdCBiZSBzZW50IGFzIGFuIGV2ZW50XG4gIHdzSGFuZGxlcjogV1NIYW5kbGVyXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV1NDb25uZWN0RnVsZmlsbGVkUGF5bG9hZCBleHRlbmRzIFdTQ29uZmlnUGF5bG9hZCB7XG4gIGNvbm5lY3Rpb25JbmZvOiBXU0Nvbm5lY3Rpb25JbmZvXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV1NDb25maWdEZXRhaWxlZFBheWxvYWQgZXh0ZW5kcyBXU0NvbmZpZ1BheWxvYWQge1xuICByZXF1ZXN0OiBBZGFwdGVyUmVxdWVzdFxuICBjb250ZXh0OiBBZGFwdGVyQ29udGV4dFxuICB3c0hhbmRsZXI6IFdTSGFuZGxlclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdTQ29uZmlnRGV0YWlsZWRQYXlsb2FkT3ZlcnJpZGUgZXh0ZW5kcyBXU0NvbmZpZ0RldGFpbGVkUGF5bG9hZCB7XG4gIHdzSGFuZGxlcjogV1NIYW5kbGVyT3ZlcnJpZGVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXU0Vycm9yUGF5bG9hZCB7XG4gIGNvbm5lY3Rpb25JbmZvOiBXU0Nvbm5lY3Rpb25JbmZvXG4gIHJlYXNvbjogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV1NTYXZlRmlyc3RNZXNzYWdlUGF5bG9hZCB7XG4gIHN1YnNjcmlwdGlvbktleTogc3RyaW5nXG4gIG1lc3NhZ2U6IGFueVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdTVXBkYXRlU3Vic2NyaXB0aW9uSW5wdXRQYXlsb2FkIHtcbiAgc3Vic2NyaXB0aW9uS2V5OiBzdHJpbmdcbiAgaW5wdXQ6IEFkYXB0ZXJSZXF1ZXN0XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV1NSdW5PbkNvbm5lY3RGdW5jdGlvbnMge1xuICB3c0hhbmRsZXI6IFdTSGFuZGxlclxuICB3c1N1YmplY3Q6IFdlYlNvY2tldFN1YmplY3Q8YW55PlxuICBpbnB1dDogQWRhcHRlclJlcXVlc3Rcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXU1NhdmVNZXNzYWdlVG9Db25uZWN0aW9uIHtcbiAgY29ubmVjdGlvbktleTogc3RyaW5nXG4gIG1lc3NhZ2U6IGFueVxufVxuXG5leHBvcnQgY29uc3QgcnVuT25Db25uZWN0RnVuY3Rpb25zID0gY3JlYXRlQWN0aW9uKFxuICAnV1MvUlVOX09OX0NPTk5FQ1RfRlVOQ1RJT05TJyxcbiAgYXNBY3Rpb248V1NSdW5PbkNvbm5lY3RGdW5jdGlvbnM+KCksXG4pXG5leHBvcnQgY29uc3QgdXBkYXRlU3Vic2NyaXB0aW9uSW5wdXQgPSBjcmVhdGVBY3Rpb24oXG4gICdXUy9VUERBVEVfU1VCU1JDUklQVElPTl9JTlBVVCcsXG4gIGFzQWN0aW9uPFdTVXBkYXRlU3Vic2NyaXB0aW9uSW5wdXRQYXlsb2FkPigpLFxuKVxuZXhwb3J0IGNvbnN0IHNhdmVGaXJzdE1lc3NhZ2VSZWNlaXZlZCA9IGNyZWF0ZUFjdGlvbihcbiAgJ1dTL1NBVkVfRklSU1RfTUVTU0FHRV9SRUNFSVZFRCcsXG4gIGFzQWN0aW9uPFdTU2F2ZUZpcnN0TWVzc2FnZVBheWxvYWQ+KCksXG4pXG5leHBvcnQgY29uc3Qgd3NTdWJzY3JpcHRpb25SZWFkeSA9IGNyZWF0ZUFjdGlvbihcbiAgJ1dTL1NVQlNDUklQVElPTl9SRUFEWScsXG4gIGFzQWN0aW9uPFdTQ29uZmlnRGV0YWlsZWRQYXlsb2FkT3ZlcnJpZGU+KCksXG4pXG5leHBvcnQgY29uc3QgY29ubmVjdFJlcXVlc3RlZCA9IGNyZWF0ZUFjdGlvbihcbiAgJ1dTL0NPTk5FQ1RfUkVRVUVTVEVEJyxcbiAgYXNBY3Rpb248V1NDb25maWdEZXRhaWxlZFBheWxvYWQ+KCksXG4pXG5leHBvcnQgY29uc3QgY29ubmVjdEZ1bGZpbGxlZCA9IGNyZWF0ZUFjdGlvbihcbiAgJ1dTL0NPTk5FQ1RfRlVMRklMTEVEJyxcbiAgYXNBY3Rpb248V1NDb25uZWN0RnVsZmlsbGVkUGF5bG9hZD4oKSxcbilcbmV4cG9ydCBjb25zdCBjb25uZWN0RmFpbGVkID0gY3JlYXRlQWN0aW9uKCdXUy9DT05ORUNUSU9OX0ZBSUxFRCcsIGFzQWN0aW9uPFdTRXJyb3JQYXlsb2FkPigpKVxuZXhwb3J0IGNvbnN0IGRpc2Nvbm5lY3RGdWxmaWxsZWQgPSBjcmVhdGVBY3Rpb24oXG4gICdXUy9ESVNDT05ORUNUX0ZVTEZJTExFRCcsXG4gIGFzQWN0aW9uPFdTQ29uZmlnUGF5bG9hZD4oKSxcbilcbmV4cG9ydCBjb25zdCBkaXNjb25uZWN0UmVxdWVzdGVkID0gY3JlYXRlQWN0aW9uKFxuICAnV1MvRElTQ09OTkVDVF9SRVFVRVNURUQnLFxuICBhc0FjdGlvbjxXU0NvbmZpZ1BheWxvYWQ+KCksXG4pXG5leHBvcnQgY29uc3Qgc2F2ZU9uQ29ubmVjdE1lc3NhZ2UgPSBjcmVhdGVBY3Rpb24oXG4gICdXUy9TQVZFX09OX0NPTk5FQ1RfTUVTU0FHRScsXG4gIGFzQWN0aW9uPFdTU2F2ZU1lc3NhZ2VUb0Nvbm5lY3Rpb24+KCksXG4pXG5leHBvcnQgY29uc3QgaW5jcmVtZW50T25Db25uZWN0SWR4ID0gY3JlYXRlQWN0aW9uKFxuICAnV1MvSU5DUkVNRU5UX09OX0NPTk5FQ1RfSURYJyxcbiAgYXNBY3Rpb248eyBrZXk6IHN0cmluZyB9PigpLFxuKVxuZXhwb3J0IGNvbnN0IG9uQ29ubmVjdENvbXBsZXRlID0gY3JlYXRlQWN0aW9uKFxuICAnV1MvT05fQ09OTkVDVF9DT01QTEVURScsXG4gIGFzQWN0aW9uPFdTU3Vic2NyaXB0aW9uUGF5bG9hZD4oKSxcbilcblxuLyoqIFNVQlNDUklQVElPTlMgKi9cbmV4cG9ydCBpbnRlcmZhY2UgV1NTdWJzY3JpcHRpb25QYXlsb2FkIHtcbiAgY29ubmVjdGlvbkluZm86IFdTQ29ubmVjdGlvbkluZm9cbiAgc3Vic2NyaXB0aW9uTXNnOiBhbnlcbiAgaW5wdXQ6IEFkYXB0ZXJSZXF1ZXN0XG4gIGNvbnRleHQ6IEFkYXB0ZXJDb250ZXh0XG4gIG1lc3NhZ2VUb1NhdmU/OiBhbnlcbiAgZmlsdGVyTXVsdGlwbGV4PzogKG1lc3NhZ2U6IGFueSkgPT4gYm9vbGVhblxuICBzaG91bGROZXZlclVuc3Vic2NyaWJlPzogYm9vbGVhblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdTU3Vic2NyaXB0aW9uRXJyb3JQYXlsb2FkIGV4dGVuZHMgV1NFcnJvclBheWxvYWQge1xuICBzdWJzY3JpcHRpb25Nc2c/OiBhbnlcbiAgaW5wdXQ/OiBBZGFwdGVyUmVxdWVzdFxuICBlcnJvcj86IHVua25vd25cbiAgd3NIYW5kbGVyOiBXU0hhbmRsZXJPdmVycmlkZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdTU3Vic2NyaXB0aW9uRXJyb3JIYW5kbGVyUGF5bG9hZCB7XG4gIGNvbm5lY3Rpb25JbmZvOiBXU0Nvbm5lY3Rpb25JbmZvXG4gIHN1YnNjcmlwdGlvbk1zZz86IGFueVxuICBzaG91bGROb3RSZXRyeVN1YnNjcmlwdGlvbjogYm9vbGVhblxuICBzaG91bGROb3RSZXRyeUNvbm5lY3Rpb246IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNvbnN0IHN1YnNjcmliZVJlcXVlc3RlZCA9IGNyZWF0ZUFjdGlvbihcbiAgJ1dTL1NVQlNDUklCRV9SRVFVRVNURUQnLFxuICBhc0FjdGlvbjxXU1N1YnNjcmlwdGlvblBheWxvYWQ+KCksXG4pXG5leHBvcnQgY29uc3Qgc3Vic2NyaWJlRnVsZmlsbGVkID0gY3JlYXRlQWN0aW9uKFxuICAnV1MvU1VCU0NSSUJFX0ZVTEZJTExFRCcsXG4gIGFzQWN0aW9uPFdTU3Vic2NyaXB0aW9uUGF5bG9hZD4oKSxcbilcbmV4cG9ydCBjb25zdCBzdWJzY3JpcHRpb25FcnJvciA9IGNyZWF0ZUFjdGlvbihcbiAgJ1dTL1NVQlNDUklQVElPTl9FUlJPUicsXG4gIGFzQWN0aW9uPFdTU3Vic2NyaXB0aW9uRXJyb3JQYXlsb2FkPigpLFxuKVxuZXhwb3J0IGNvbnN0IHN1YnNjcmlwdGlvbkVycm9ySGFuZGxlciA9IGNyZWF0ZUFjdGlvbihcbiAgJ1dTL1NVQlNDUklQVElPTl9FUlJPUl9IQU5ETEVSJyxcbiAgYXNBY3Rpb248V1NTdWJzY3JpcHRpb25FcnJvckhhbmRsZXJQYXlsb2FkPigpLFxuKVxuZXhwb3J0IGNvbnN0IHVuc3Vic2NyaWJlUmVxdWVzdGVkID0gY3JlYXRlQWN0aW9uKFxuICAnV1MvVU5TVUJTQ1JJQkVfUkVRVUVTVEVEJyxcbiAgYXNBY3Rpb248V1NTdWJzY3JpcHRpb25QYXlsb2FkPigpLFxuKVxuZXhwb3J0IGNvbnN0IHVuc3Vic2NyaWJlRnVsZmlsbGVkID0gY3JlYXRlQWN0aW9uKFxuICAnV1MvVU5TVUJTQ1JJQkVfRlVMRklMTEVEJyxcbiAgYXNBY3Rpb248V1NTdWJzY3JpcHRpb25QYXlsb2FkPigpLFxuKVxuXG4vKiogTUVTU0FHRXMgKi9cbmV4cG9ydCBpbnRlcmZhY2UgV1NNZXNzYWdlUGF5bG9hZCB7XG4gIG1lc3NhZ2U6IHVua25vd25cbiAgc3Vic2NyaXB0aW9uS2V5OiBzdHJpbmdcbiAgaW5wdXQ6IEFkYXB0ZXJSZXF1ZXN0XG4gIGNvbnRleHQ6IEFkYXB0ZXJDb250ZXh0XG4gIGNvbm5lY3Rpb25JbmZvOiBXU0Nvbm5lY3Rpb25JbmZvXG4gIHdzSGFuZGxlcjogV1NIYW5kbGVyT3ZlcnJpZGVcbn1cblxuZXhwb3J0IGNvbnN0IG1lc3NhZ2VSZWNlaXZlZCA9IGNyZWF0ZUFjdGlvbignV1MvTUVTU0FHRV9SRUNFSVZFRCcsIGFzQWN0aW9uPFdTTWVzc2FnZVBheWxvYWQ+KCkpXG5cbi8qKiBPVkVSUklERVMgKi9cbmV4cG9ydCBpbnRlcmZhY2UgV1NIYW5kbGVyT3ZlcnJpZGUgZXh0ZW5kcyBXU0hhbmRsZXIge1xuICBjb25uZWN0aW9uOiB7XG4gICAgdXJsOiBzdHJpbmdcbiAgICBwcm90b2NvbD86IGFueVxuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIFdTQ29uZmlnT3ZlcnJpZGUgZXh0ZW5kcyBXU0NvbmZpZ0RldGFpbGVkUGF5bG9hZCB7XG4gIHdzSGFuZGxlcjogV1NIYW5kbGVyT3ZlcnJpZGVcbn1cbiJdfQ==