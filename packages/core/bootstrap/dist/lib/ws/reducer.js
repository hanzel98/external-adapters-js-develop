"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rootReducer = exports.subscriptionsReducer = exports.connectionsReducer = exports.getSubsId = void 0;
const tslib_1 = require("tslib");
const toolkit_1 = require("@reduxjs/toolkit");
const external_adapter_1 = require("../external-adapter");
const util_1 = require("../util");
const actions = tslib_1.__importStar(require("./actions"));
/**
 * Generate a key for the WS middleware
 *
 * NOTE:
 * Exclude mode is enforced because the data given to the WS framework
 * is not an Adapter Request, but a subscription message.
 *
 * (e.g. Cryptocompare)
 * { action: 'SubAdd', subs: [ '5~CCCAGG~BTC~USD' ] }
 *
 * The structure of which may change with every adapter, so we need to
 * use exclude mode to handle dynamically changing properties.
 */
const getSubsId = (subscriptionMsg) => util_1.hash(subscriptionMsg, util_1.getHashOpts(), 'exclude');
exports.getSubsId = getSubsId;
const initConnectionsState = { total: 0, all: {} };
exports.connectionsReducer = toolkit_1.createReducer(initConnectionsState, (builder) => {
    builder.addCase(actions.onConnectComplete, (state, action) => {
        const { connectionInfo: { key }, } = action.payload;
        state.all[key] = {
            ...state.all[key],
            isOnConnectChainComplete: true,
        };
    });
    builder.addCase(actions.connectFulfilled, (state, action) => {
        // Add connection
        const { key } = action.payload.config.connectionInfo;
        state.all[key] = {
            ...state.all[key],
            active: true,
            connecting: 0,
            wasEverConnected: true,
            requestId: Math.max(state.all[key].requestId, 0),
        };
    });
    builder.addCase(actions.subscribeRequested, (state, action) => {
        if (!action.payload.connectionInfo) {
            external_adapter_1.logger.error(`Missing connection info: ${JSON.stringify(action.payload)}`);
            return;
        }
        const key = action.payload.connectionInfo.key;
        if (!state.all[key])
            return;
        state.all[key] = {
            ...state.all[key],
            requestId: state.all[key].requestId + 1,
            connectionParams: action.payload.messageToSave || state.all[key].connectionParams,
        };
    });
    builder.addCase(actions.connectRequested, (state, action) => {
        const { key } = action.payload.config.connectionInfo;
        const connectionState = state.all[key];
        const isActive = connectionState?.active;
        if (isActive)
            return;
        const wsHandler = action.payload.wsHandler;
        const hasNoOnConnectChain = !wsHandler.onConnectChain;
        const isConnecting = !isNaN(Number(connectionState?.connecting));
        state.all[key] = {
            ...connectionState,
            active: false,
            connecting: isConnecting ? connectionState.connecting + 1 : 1,
            requestId: isConnecting ? connectionState.requestId : 0,
            isOnConnectChainComplete: hasNoOnConnectChain,
        };
    });
    builder.addCase(actions.connectFailed, (state, action) => {
        state.all[action.payload.connectionInfo.key].connecting = 0;
        state.all[action.payload.connectionInfo.key].active = false;
    });
    builder.addCase(actions.disconnectFulfilled, (state, action) => {
        // Remove connection
        const { key } = action.payload.config.connectionInfo;
        state.all[key].active = false;
        state.all[key].connecting = 0; // turn off connecting
        state.all[key].requestId = 0;
    });
    builder.addCase(actions.subscriptionErrorHandler, (state, action) => {
        const { key } = action.payload.connectionInfo;
        state.all[key].shouldNotRetryConnecting = action.payload.shouldNotRetryConnection;
    });
    builder.addMatcher(toolkit_1.isAnyOf(actions.connectRequested, actions.connectFulfilled, actions.connectFailed, actions.disconnectFulfilled), (state) => {
        state.total = Object.values(state.all).filter((s) => s?.active).length;
    });
});
const initSubscriptionsState = { total: 0, all: {} };
exports.subscriptionsReducer = toolkit_1.createReducer(initSubscriptionsState, (builder) => {
    builder.addCase(actions.updateSubscriptionInput, (state, action) => {
        const key = action.payload.subscriptionKey;
        state.all[key] = {
            ...state.all[key],
            input: action.payload.input,
        };
    });
    builder.addCase(actions.saveFirstMessageReceived, (state, action) => {
        const key = action.payload.subscriptionKey;
        state.all[key] = {
            ...state.all[key],
            subscriptionParams: action.payload.message,
        };
    });
    builder.addCase(actions.subscribeFulfilled, (state, action) => {
        // Add subscription
        const key = exports.getSubsId(action.payload.subscriptionMsg);
        state.all[key] = {
            active: true,
            wasEverActive: true,
            unsubscribed: false,
            subscribing: 0,
            input: { ...action.payload.input },
            context: action.payload.context,
            connectionKey: action.payload.connectionInfo.key,
        };
    });
    builder.addCase(actions.subscribeRequested, (state, action) => {
        const key = exports.getSubsId(action.payload.subscriptionMsg);
        const isActive = state.all[key]?.active;
        if (isActive)
            return;
        if (!action.payload.connectionInfo) {
            external_adapter_1.logger.error(`Missing connection info: ${JSON.stringify(action.payload)}`);
            return;
        }
        const isSubscribing = state.all[key]?.subscribing;
        state.all[key] = {
            active: false,
            subscribing: isSubscribing ? state.all[key].subscribing + 1 : 1,
            input: { ...action.payload.input },
            context: action.payload.context,
            connectionKey: action.payload.connectionInfo.key,
        };
    });
    builder.addCase(actions.unsubscribeFulfilled, (state, action) => {
        // Remove subscription
        const key = exports.getSubsId(action.payload.subscriptionMsg);
        state.all[key].active = false;
        state.all[key].unsubscribed = true;
        state.all[key].subscribing = 0;
    });
    builder.addCase(actions.subscriptionErrorHandler, (state, action) => {
        const key = exports.getSubsId(action.payload.subscriptionMsg);
        if (state.all[key]) {
            state.all[key].shouldNotRetry = action.payload.shouldNotRetrySubscription;
        }
    });
    builder.addCase(actions.disconnectFulfilled, (state) => {
        state.all = {};
        return state;
    });
    builder.addMatcher(toolkit_1.isAnyOf(actions.subscribeRequested, actions.subscribeFulfilled, actions.unsubscribeFulfilled), (state) => {
        state.total = Object.values(state.all).filter((s) => s?.active).length;
    });
});
exports.rootReducer = toolkit_1.combineReducers({
    connections: exports.connectionsReducer,
    subscriptions: exports.subscriptionsReducer,
});
//# sourceMappingURL=data:application/json;base64,