"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.epicMiddleware = exports.rootEpic = exports.metricsEpic = exports.writeMessageToCacheEpic = exports.recordErrorEpic = exports.connectEpic = exports.subscribeReadyEpic = void 0;
const tslib_1 = require("tslib");
const redux_observable_1 = require("redux-observable");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const webSocket_1 = require("rxjs/webSocket");
const ws_1 = tslib_1.__importDefault(require("ws"));
const cache_1 = require("../cache");
const external_adapter_1 = require("../external-adapter");
const util_1 = require("../metrics/util");
const actions_1 = require("./actions");
const metrics_1 = require("./metrics");
const reducer_1 = require("./reducer");
const utils_1 = require("./utils");
const config_1 = require("./config");
// Rxjs deserializer defaults to JSON.parse.
// We need to handle errors from non-parsable messages
const deserializer = (message) => {
    try {
        return JSON.parse(message.data);
    }
    catch (e) {
        external_adapter_1.logger.debug('WS: Message received with invalid format');
        return message;
    }
};
const subscribeReadyEpic = (action$) => action$.pipe(operators_1.filter(actions_1.wsSubscriptionReady.match), operators_1.concatMap(async ({ payload }) => {
    const { wsHandler, config, context, request } = payload;
    const subscriptionPayloads = [];
    await utils_1.separateBatches(request, async (singleInput) => {
        const subscriptionMsg = wsHandler.onConnectChain
            ? wsHandler.onConnectChain[0].payload
            : wsHandler.subscribe(singleInput);
        if (!subscriptionMsg) {
            external_adapter_1.logger.error(`No subscription message found while seperating batches`, {
                singleInput,
                request,
            });
            return;
        }
        const subscriptionPayload = {
            connectionInfo: {
                key: config.connectionInfo.key,
                url: wsHandler.connection.url,
            },
            subscriptionMsg,
            input: singleInput,
            context,
        };
        subscriptionPayloads.push(subscriptionPayload);
    });
    return subscriptionPayloads;
}), operators_1.mergeMap(([subscriptionPayload]) => {
    const action = actions_1.subscribeRequested(subscriptionPayload);
    if (!subscriptionPayload) {
        external_adapter_1.logger.debug('INVALID_SUBSCRIBE_REQUESTED_IN_READY_EPIC', action);
        return rxjs_1.EMPTY;
    }
    return rxjs_1.of(action);
}));
exports.subscribeReadyEpic = subscribeReadyEpic;
const connectEpic = (action$, state$) => action$.pipe(operators_1.filter(actions_1.connectRequested.match), operators_1.map(({ payload }) => ({ payload, connectionKey: payload.config.connectionInfo.key })), operators_1.withLatestFrom(state$), operators_1.filter(([{ connectionKey }, state]) => {
    const connectionState = state.ws.connections.all[connectionKey];
    const isActiveConnection = connectionState?.active;
    const isConnecting = connectionState?.connecting > 1;
    const hasErrored = connectionState?.shouldNotRetryConnecting;
    return (!hasErrored &&
        !isActiveConnection &&
        !isConnecting &&
        (!connectionState || connectionState.requestId === 0));
}), operators_1.concatMap(async (data) => {
    const getUrl = data[0].payload.wsHandler.connection.getUrl;
    if (getUrl)
        data[0].payload.wsHandler.connection.url = await getUrl(data[0].payload.request);
    return data;
}), 
// on a connect action being dispatched, open a new WS connection if one doesn't exist yet
operators_1.mergeMap(([{ connectionKey, payload }]) => {
    const { config, wsHandler } = payload;
    const { connection: { url, protocol }, } = wsHandler;
    const connectionMeta = (payload) => ({
        key: payload.config.connectionInfo.key,
        url: external_adapter_1.censor(url),
    });
    const subscriptionMeta = (payload) => ({
        connection_key: payload.connectionInfo.key,
        connection_url: external_adapter_1.censor(url),
        feed_id: util_1.getFeedId({ ...payload.input }),
        subscription_key: reducer_1.getSubsId(payload.subscriptionMsg),
    });
    const openObserver = new rxjs_1.Subject();
    const closeObserver = new rxjs_1.Subject();
    const errorObserver = new rxjs_1.Subject();
    const error$ = errorObserver.asObservable();
    const WebSocketCtor = ws_1.default;
    const wsSubject = webSocket_1.webSocket({
        url,
        protocol,
        deserializer,
        openObserver,
        closeObserver,
        WebSocketCtor: WebSocketCtor, // TODO: fix types don't match
    });
    wsHandler.onConnect && wsSubject.next(wsHandler.onConnect(payload.request));
    // Stream of WS connected & disconnected events
    const open$ = openObserver.pipe(operators_1.map(() => actions_1.connectFulfilled({ config, wsHandler, connectionInfo: config.connectionInfo })), operators_1.tap((action) => external_adapter_1.logger.info('WS: Connected', connectionMeta(action.payload))));
    const close$ = closeObserver.pipe(operators_1.withLatestFrom(state$), operators_1.mergeMap(([closeContext, state]) => {
        const key = config.connectionInfo.key;
        const activeSubs = Object.entries(state.ws.subscriptions.all)
            .filter(([_, info]) => (info.active || info.subscribing > 0) && info.connectionKey === key)
            .map(([_, info]) => ({
            connectionInfo: {
                url,
                key: config.connectionInfo.key,
            },
            subscriptionMsg: wsHandler.subscribe(info.input),
            input: info.input,
        }));
        const toUnsubscribed = (payload) => actions_1.unsubscribeFulfilled(payload);
        external_adapter_1.logger.info('Closing websocket connection', {
            context: {
                type: closeContext.type,
                wasClean: closeContext.wasClean,
                reason: closeContext.reason,
                code: closeContext.code,
            },
        });
        return rxjs_1.from([
            ...activeSubs.map(toUnsubscribed),
            actions_1.disconnectFulfilled({
                config,
                wsHandler,
            }),
        ]);
    }));
    // Close the WS connection on disconnect
    const disconnect$ = action$.pipe(operators_1.filter(actions_1.disconnectRequested.match), operators_1.filter(({ payload }) => payload.config.connectionInfo.key === connectionKey), operators_1.tap(() => wsSubject.closed || wsSubject.complete()), operators_1.tap((action) => external_adapter_1.logger.info('WS: Disconnected', connectionMeta(action.payload))), operators_1.filter(() => false));
    // Subscription requests
    const subscriptions$ = action$.pipe(operators_1.filter(actions_1.subscribeRequested.match));
    const updateSubscriptionInput$ = subscriptions$.pipe(operators_1.filter(({ payload }) => payload.connectionInfo.key === connectionKey), operators_1.map(({ payload }) => ({
        payload,
        subscriptionKey: reducer_1.getSubsId(payload.subscriptionMsg),
    })), operators_1.withLatestFrom(state$), operators_1.filter(([{ subscriptionKey, payload }, state]) => {
        const isActiveSubscription = !!state.ws.subscriptions.all[subscriptionKey]?.active;
        const isSubscribing = state.ws.subscriptions.all[subscriptionKey]?.subscribing > 1;
        if (!isActiveSubscription || isSubscribing) {
            return false;
        }
        const currentInput = state.ws.subscriptions.all[subscriptionKey]?.input;
        return reducer_1.getSubsId(currentInput) !== reducer_1.getSubsId(payload.input);
    }), operators_1.mergeMap(async ([{ subscriptionKey, payload }]) => {
        return actions_1.updateSubscriptionInput({
            subscriptionKey,
            input: payload.input,
        });
    }));
    // Multiplex subscriptions
    const multiplexSubscriptions$ = subscriptions$.pipe(operators_1.filter(({ payload }) => payload.connectionInfo.key === connectionKey), operators_1.map(({ payload }) => ({
        payload,
        subscriptionKey: reducer_1.getSubsId(payload.subscriptionMsg),
    })), operators_1.withLatestFrom(state$), operators_1.filter(([{ subscriptionKey, payload }, state]) => {
        const isActiveSubscription = !!state.ws.subscriptions.all[subscriptionKey]?.active;
        const isSubscribing = state.ws.subscriptions.all[subscriptionKey]?.subscribing > 1;
        const shouldNotRetrySubscribing = state.ws.subscriptions.all[subscriptionKey]?.shouldNotRetry;
        const isNotActive = !isActiveSubscription && !isSubscribing;
        const { isDataMessage, onConnectChain } = wsHandler;
        if (isDataMessage && onConnectChain && isDataMessage(payload.subscriptionMsg)) {
            const connectionState = state.ws.connections.all[payload.connectionInfo.key];
            const hasOnConnectChainCompleted = connectionState.requestId >= onConnectChain.length;
            return !shouldNotRetrySubscribing && isNotActive && hasOnConnectChainCompleted;
        }
        return !shouldNotRetrySubscribing && isNotActive;
    }), 
    // on a subscribe action being dispatched, open a new WS subscription if one doesn't exist yet
    operators_1.mergeMap(([{ subscriptionKey, payload }, state]) => wsSubject
        .multiplex(() => {
        const clonedPayload = JSON.parse(JSON.stringify(payload.subscriptionMsg));
        const shouldModifyPayload = !!wsHandler.shouldModifyPayload &&
            wsHandler.shouldModifyPayload(clonedPayload) &&
            wsHandler.modifySubscriptionPayload;
        const connectionState = state.ws.connections.all[payload.connectionInfo.key];
        const subMsg = shouldModifyPayload && wsHandler.modifySubscriptionPayload
            ? wsHandler.modifySubscriptionPayload(clonedPayload, state.ws.subscriptions.all[subscriptionKey]?.subscriptionParams, connectionState.connectionParams, connectionState.requestId)
            : clonedPayload;
        return subMsg;
    }, () => wsHandler.unsubscribe(payload.input, state.ws.subscriptions.all[subscriptionKey]?.subscriptionParams), (message) => {
        const connectionState = state.ws.connections.all[payload.connectionInfo.key];
        const shouldPassAlong = (payload.filterMultiplex && payload.filterMultiplex(message)) ||
            reducer_1.getSubsId(wsHandler.subsFromMessage(message, payload.subscriptionMsg, payload.input, connectionState?.connectionParams)) === subscriptionKey;
        if (!shouldPassAlong) {
            return false;
        }
        /**
         * If the error happens on the subscription, it will be on subscribing state and eventually unresponsiveTimeout will take care of it (unsubs/subs)
         * If the error happens during a subscription, and is only eventual, can be ignored
         * If the error happens during a subscription, and the subscription stop receiving messages, the unresponsiveTimeout will take care of it (unsubs/subs)
         */
        if (wsHandler.isError(message)) {
            const error = {
                reason: JSON.stringify(message),
                connectionInfo: { key: connectionKey, url },
                error: message,
            };
            external_adapter_1.logger.error('WS: Error', error);
            errorObserver.next(actions_1.subscriptionError({
                ...error,
                wsHandler,
            }));
            return false;
        }
        return true;
    })
        .pipe(operators_1.withLatestFrom(state$), operators_1.mergeMap(([message, state]) => {
        const isActiveSubscription = !!state.ws.subscriptions.all[subscriptionKey]?.active;
        const actionPayload = {
            message,
            subscriptionKey,
            input: payload.input,
            context: payload.context,
            connectionInfo: payload.connectionInfo,
            wsHandler,
        };
        if (!isActiveSubscription) {
            external_adapter_1.logger.info('WS: Subscribed', subscriptionMeta(payload));
            return rxjs_1.of(actions_1.subscribeFulfilled(payload), actions_1.messageReceived(actionPayload));
        }
        return rxjs_1.of(actions_1.messageReceived(actionPayload));
    }), operators_1.takeUntil(rxjs_1.merge(action$.pipe(operators_1.filter(actions_1.unsubscribeRequested.match), operators_1.filter((a) => reducer_1.getSubsId(a.payload.subscriptionMsg) === subscriptionKey), operators_1.tap((a) => external_adapter_1.logger.info('WS: Unsubscribed', subscriptionMeta(a.payload)))), action$.pipe(operators_1.filter(actions_1.disconnectFulfilled.match), operators_1.filter((a) => a.payload.config.connectionInfo.key === connectionKey)))), operators_1.endWith(actions_1.unsubscribeFulfilled(payload)))), operators_1.catchError((e) => {
        external_adapter_1.logger.error(e);
        return rxjs_1.of(actions_1.connectFailed({ connectionInfo: { key: connectionKey, url }, reason: e.message }));
    }));
    const withHeartbeatAtIntervals$ = action$.pipe(operators_1.filter((action) => {
        return actions_1.connectFulfilled.match(action) && !!wsHandler.heartbeatMessage;
    }), operators_1.withLatestFrom(state$), operators_1.filter(([action, state]) => {
        const connectionKey = action.payload.connectionInfo.key;
        const connectionState = state.ws.connections.all[connectionKey];
        return !!connectionState && connectionState.active;
    }), operators_1.mergeMap(([action, state]) => {
        const connectionKey = action.payload.connectionInfo.key;
        const connectionState = state.ws.connections.all[connectionKey];
        const interval = wsHandler.heartbeatIntervalInMS || config.defaultHeartbeatIntervalInMS;
        return rxjs_1.timer(interval, interval).pipe(operators_1.tap(() => external_adapter_1.logger.debug('Sending heartbeat message')), operators_1.mergeMap(() => {
            if (wsHandler.heartbeatMessage) {
                const heartbeatPayload = wsHandler.heartbeatMessage(connectionState.requestId, connectionState.connectionParams);
                wsSubject.next(heartbeatPayload);
            }
            return rxjs_1.EMPTY;
        }), operators_1.takeUntil(action$.pipe(operators_1.filter(actions_1.disconnectFulfilled.match), operators_1.filter((action) => action.payload.config.connectionInfo.key === connectionKey))));
    }));
    // All received messages using the same connection key
    const message$ = action$.pipe(operators_1.filter(actions_1.messageReceived.match), operators_1.filter((action) => action.payload.connectionInfo.key === connectionKey));
    const withContinueOnConnectChain$ = message$.pipe(operators_1.withLatestFrom(state$), operators_1.filter(([action, state]) => {
        const key = action.payload.connectionInfo.key;
        const connectionState = state.ws.connections.all[key];
        return (!!connectionState &&
            !!wsHandler.onConnectChain &&
            connectionState.requestId <= wsHandler.onConnectChain.length);
    }), operators_1.mergeMap(([{ payload }, state]) => {
        const { input, context, message } = payload;
        const onConnectIdx = state.ws.connections.all[payload.connectionInfo.key]
            ? state.ws.connections.all[payload.connectionInfo.key].requestId
            : 0;
        if (!wsHandler.onConnectChain || onConnectIdx === undefined) {
            return rxjs_1.EMPTY;
        }
        const onConnectChainFinished = onConnectIdx >= wsHandler.onConnectChain.length;
        const subscriptionMsg = onConnectChainFinished
            ? wsHandler.subscribe(input)
            : wsHandler.onConnectChain[onConnectIdx].payload;
        const subscriptionPayload = {
            connectionInfo: {
                key: config.connectionInfo.key,
                url: wsHandler.connection.url,
            },
            subscriptionMsg,
            input,
            context,
            messageToSave: wsHandler.shouldSaveToConnection &&
                wsHandler.shouldSaveToConnection(message) &&
                wsHandler.saveOnConnectToConnection
                ? wsHandler.saveOnConnectToConnection(message)
                : null,
            filterMultiplex: onConnectChainFinished
                ? undefined
                : wsHandler.onConnectChain[onConnectIdx].filter,
            shouldNeverUnsubscribe: onConnectChainFinished
                ? false
                : wsHandler.onConnectChain[onConnectIdx].shouldNeverUnsubscribe,
        };
        const subscribeRequestedAction = actions_1.subscribeRequested(subscriptionPayload);
        if (onConnectChainFinished) {
            return rxjs_1.of(subscribeRequestedAction, actions_1.onConnectComplete(subscriptionPayload));
        }
        return rxjs_1.of(subscribeRequestedAction);
    }));
    const withSaveFirstMessageToStore$ = message$.pipe(operators_1.filter(() => {
        return !!wsHandler.toSaveFromFirstMessage;
    }), operators_1.withLatestFrom(state$), operators_1.filter(([action, state]) => {
        const key = action.payload.subscriptionKey;
        const subscription = state.ws.subscriptions.all[key];
        return subscription && !subscription.subscriptionParams;
    }), operators_1.mergeMap(([action]) => {
        const toSave = wsHandler.toSaveFromFirstMessage &&
            wsHandler.toSaveFromFirstMessage(action.payload.message);
        return toSave
            ? rxjs_1.of(actions_1.saveFirstMessageReceived({
                subscriptionKey: action.payload.subscriptionKey,
                message: toSave,
            }))
            : rxjs_1.EMPTY;
    }));
    const respondWithHeartbeat$ = message$.pipe(operators_1.filter((action) => !!wsHandler.shouldReplyToServerHeartbeat &&
        wsHandler.shouldReplyToServerHeartbeat(action.payload.message)), operators_1.withLatestFrom(state$), operators_1.mergeMap(([action, state]) => {
        const { connectionInfo, message } = action.payload;
        const key = connectionInfo.key;
        const { requestId, connectionParams } = state.ws.connections.all[key];
        if (wsHandler.heartbeatReplyMessage) {
            const heartbeatMessage = wsHandler.heartbeatReplyMessage(message, requestId, connectionParams);
            external_adapter_1.logger.debug('Responding with heartbeat payload', heartbeatMessage);
            wsSubject.next(heartbeatMessage);
        }
        return rxjs_1.of(action);
    }), operators_1.filter(() => false));
    // Once a request happens, a subscription timeout starts. If no more requests ask for
    // this subscription before the time runs out, it will be unsubscribed
    const unsubscribeOnTimeout$ = subscriptions$.pipe(operators_1.filter((action) => !action.payload.shouldNeverUnsubscribe), 
    // when a subscription comes in
    // TODO: we need to filter duplicated subscriptions here
    operators_1.mergeMap(({ payload }) => {
        const subscriptionKey = reducer_1.getSubsId(payload.subscriptionMsg);
        // we look for matching subscriptions of the same type
        // which deactivates the current timer
        const reset$ = subscriptions$.pipe(operators_1.filter(({ payload }) => subscriptionKey === reducer_1.getSubsId(payload.subscriptionMsg)), operators_1.take(1));
        // start the current unsubscription timer
        const timeout$ = rxjs_1.of(actions_1.unsubscribeRequested({ ...payload })).pipe(operators_1.delay(config.subscriptionTTL), operators_1.tap(() => external_adapter_1.logger.debug('WS: unsubscribe (inactive feed)', { payload: payload.subscriptionMsg })));
        // if a re-subscription comes in before timeout emits, then we emit nothing
        // else we unsubscribe from the current subscription
        return rxjs_1.race(reset$, timeout$).pipe(operators_1.filter((a) => !actions_1.subscribeRequested.match(a)));
    }));
    const unsubscribeOnNoResponse$ = message$.pipe(operators_1.withLatestFrom(state$), operators_1.mergeMap(([{ payload: { subscriptionKey }, }, state,]) => {
        let input = state.ws.subscriptions.all[subscriptionKey]?.input;
        if (!input) {
            external_adapter_1.logger.warn(`WS: Could not find subscription from incoming message`);
            input = {};
        }
        const reset$ = message$.pipe(operators_1.filter(({ payload }) => subscriptionKey === payload.subscriptionKey), operators_1.take(1));
        let context = state.ws.subscriptions.all[subscriptionKey]?.context;
        if (!context) {
            external_adapter_1.logger.warn(`WS Unsubscribe No Response: Could not find context`);
            context = {};
        }
        const action = {
            input,
            subscriptionMsg: wsHandler.subscribe(input),
            connectionInfo: { key: connectionKey, url },
            context,
        };
        const subReqAction = actions_1.subscribeRequested(action);
        const timeout$ = rxjs_1.of(actions_1.subscriptionError({
            ...action,
            reason: 'WS: unsubscribe -> subscribe (unresponsive channel)',
            wsHandler,
        }), actions_1.unsubscribeRequested(action), subReqAction).pipe(operators_1.delay(config.subscriptionUnresponsiveTTL), operators_1.tap((a) => {
            if (actions_1.subscriptionError.match(a)) {
                external_adapter_1.logger.warn('[unsubscribeOnNoResponse] Resubscribing due to unresponsive subscription, this happens when a subscription does not receive a message for longer than the subscriptionUnresponsiveTTL value', { feedId: a.payload.input ? util_1.getFeedId(a.payload.input) : 'undefined' });
            }
        }), operators_1.withLatestFrom(state$), 
        // Filters by active subscription.
        // The timeout could think we don't receive messages because of unresponsiveness, and it's actually unsubscribed
        // isSubscribing is considered too as we want to trigger an unsubscription from a hung channel
        operators_1.mergeMap(([action, state]) => {
            const isActive = !!state.ws.subscriptions.all[subscriptionKey]?.active;
            const isSubscribing = !!(state.ws.subscriptions.all[subscriptionKey]?.subscribing > 0);
            return isActive || isSubscribing ? rxjs_1.of(action) : rxjs_1.EMPTY;
        }));
        return rxjs_1.race(reset$, timeout$).pipe(operators_1.filter((a) => !actions_1.messageReceived.match(a)));
    }));
    // Merge all & unsubscribe ws connection when a matching unsubscribe comes in
    const unsubscribe$ = rxjs_1.merge(unsubscribeOnTimeout$, unsubscribeOnNoResponse$);
    const ws$ = rxjs_1.merge(open$, close$, disconnect$, multiplexSubscriptions$, unsubscribe$, withSaveFirstMessageToStore$, updateSubscriptionInput$, withContinueOnConnectChain$, withHeartbeatAtIntervals$, error$, respondWithHeartbeat$).pipe(operators_1.takeUntil(action$.pipe(
    // TODO: not seeing unsubscribe events because of this
    operators_1.filter(actions_1.disconnectFulfilled.match), operators_1.filter((a) => a.payload.config.connectionInfo.key === connectionKey), operators_1.tap((action) => {
        external_adapter_1.logger.debug('WS: Disconnected Fulfilled', connectionMeta(action.payload));
    }))));
    return rxjs_1.concat(rxjs_1.of(actions_1.wsSubscriptionReady(payload)), ws$);
}));
exports.connectEpic = connectEpic;
const recordErrorEpic = (action$) => action$.pipe(operators_1.filter((action) => actions_1.subscriptionError.match(action) && !!action.payload.error), operators_1.mergeMap(({ payload }) => {
    const { wsHandler, error, connectionInfo, subscriptionMsg } = payload;
    const { shouldNotRetryConnection, shouldNotRetrySubscription } = wsHandler;
    return rxjs_1.of(actions_1.subscriptionErrorHandler({
        connectionInfo,
        subscriptionMsg,
        shouldNotRetryConnection: !!shouldNotRetryConnection && shouldNotRetryConnection(error),
        shouldNotRetrySubscription: !!shouldNotRetrySubscription && shouldNotRetrySubscription(error),
    }));
}));
exports.recordErrorEpic = recordErrorEpic;
const writeMessageToCacheEpic = (action$, state$) => action$.pipe(operators_1.filter(actions_1.messageReceived.match), operators_1.filter((action) => action.payload.wsHandler.filter(action.payload.message)), operators_1.withLatestFrom(state$), operators_1.mergeMap(async ([action, state]) => {
    const wsHandler = action.payload.wsHandler;
    try {
        const subscriptionState = state.ws.subscriptions.all[action.payload.subscriptionKey];
        const input = subscriptionState?.input || {};
        if (!input)
            external_adapter_1.logger.warn(`WS: Could not find subscription from incoming message`);
        /**
         * Wrap the payload so that the cache middleware treats it as if
         * it is calling out to the underlying API, which immediately resolves
         * to the websocket message here instead.
         *
         * This results in the cache middleware storing the payload message as a
         * cache value, with the following `wsResponse` as the cache key
         */
        const isToResponseAsync = wsHandler.toResponse.constructor.name === 'AsyncFunction';
        const response = isToResponseAsync
            ? await wsHandler.toResponse(action.payload.message, input)
            : wsHandler.toResponse(action.payload.message, input);
        if (!response)
            return action;
        const execute = () => Promise.resolve(response);
        let context = subscriptionState?.context;
        if (!context) {
            external_adapter_1.logger.warn(`WS Unsubscribe No Response: Could not find context`);
            context = {};
        }
        const cache = await cache_1.withCache()(execute, context);
        const wsConfig = config_1.getWSConfig(input.data?.endpoint);
        /**
         * Create an adapter request we send to the cache middleware
         * so it uses the following object for setting cache keys
         */
        const wsResponse = {
            ...input,
            data: { maxAge: wsConfig.subscriptionTTL, ...input.data },
            debug: { ws: true },
            metricsMeta: { feedId: util_1.getFeedId(input) },
        };
        await cache(wsResponse, context);
        external_adapter_1.logger.trace('WS: Saved result', { input, result: response.result });
    }
    catch (e) {
        external_adapter_1.logger.error(`WS: Cache error: ${e.message}`);
    }
    return action;
}), operators_1.filter(() => false));
exports.writeMessageToCacheEpic = writeMessageToCacheEpic;
const metricsEpic = (action$, state$) => action$.pipe(operators_1.withLatestFrom(state$), operators_1.tap(([action, state]) => {
    const connectionLabels = (payload) => ({
        key: payload.config.connectionInfo.key,
    });
    const connectionErrorLabels = (payload) => ({
        key: payload.connectionInfo.key,
        message: payload.reason,
    });
    const subscriptionLabels = (payload) => ({
        connection_key: payload.connectionInfo.key,
        feed_id: util_1.getFeedId({ ...payload.input }),
        subscription_key: reducer_1.getSubsId(payload.subscriptionMsg),
    });
    const subscriptionErrorLabels = (payload) => ({
        connection_key: payload.connectionInfo.key,
        feed_id: payload.input ? util_1.getFeedId({ ...payload.input }) : 'N/A',
        message: payload.reason,
        subscription_key: payload.subscriptionMsg ? reducer_1.getSubsId(payload.subscriptionMsg) : 'N/A',
    });
    const messageLabels = (payload) => ({
        feed_id: util_1.getFeedId({
            ...state.ws.subscriptions.all[action.payload.subscriptionKey]?.input,
        }),
        subscription_key: payload.subscriptionKey,
    });
    switch (action.type) {
        case actions_1.connectFulfilled.type:
            metrics_1.ws_connection_active.labels(connectionLabels(action.payload)).inc();
            break;
        case actions_1.connectFailed.type:
            metrics_1.ws_connection_errors.labels(connectionErrorLabels(action.payload)).inc();
            break;
        case actions_1.disconnectFulfilled.type:
            if (state.ws.connections.all[connectionLabels(action.payload).key]?.wasEverConnected) {
                metrics_1.ws_connection_active.labels(connectionLabels(action.payload)).dec();
            }
            break;
        case actions_1.subscribeFulfilled.type:
            metrics_1.ws_subscription_total.labels(subscriptionLabels(action.payload)).inc();
            metrics_1.ws_subscription_active.labels(subscriptionLabels(action.payload)).inc();
            break;
        case actions_1.subscriptionError.type:
            metrics_1.ws_subscription_errors.labels(subscriptionErrorLabels(action.payload)).inc();
            break;
        case actions_1.unsubscribeFulfilled.type: {
            if (state.ws.subscriptions.all[reducer_1.getSubsId(action.payload.subscriptionMsg)]?.wasEverActive) {
                metrics_1.ws_subscription_active.labels(subscriptionLabels(action.payload)).dec();
            }
            break;
        }
        case actions_1.messageReceived.type:
            metrics_1.ws_message_total.labels(messageLabels(action.payload)).inc();
            break;
    }
}), operators_1.map(([action]) => action), operators_1.filter(() => false));
exports.metricsEpic = metricsEpic;
exports.rootEpic = redux_observable_1.combineEpics(exports.connectEpic, exports.metricsEpic, exports.subscribeReadyEpic, exports.writeMessageToCacheEpic, exports.recordErrorEpic);
exports.epicMiddleware = redux_observable_1.createEpicMiddleware();
//# sourceMappingURL=data:application/json;base64,