"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTTL = exports.getMaxAgeOverride = exports.getRateLimitMaxAge = exports.WARNING_MAX_AGE = void 0;
const external_adapter_1 = require("../external-adapter");
const _1 = require(".");
exports.WARNING_MAX_AGE = 1000 * 60 * 2; // 2 minutes
const getRateLimitMaxAge = (adapterRequest, options = _1.defaultOptions()) => {
    if (!adapterRequest || !adapterRequest.rateLimitMaxAge)
        return;
    if (isNaN(adapterRequest.rateLimitMaxAge))
        return;
    const feedId = adapterRequest?.metricsMeta?.feedId;
    const maxAge = adapterRequest.rateLimitMaxAge;
    if (maxAge > exports.WARNING_MAX_AGE)
        external_adapter_1.logger.trace(`${feedId && feedId[0] !== '{' ? `[${feedId}]` : ''} Cache: High data staleness - TTL of ${maxAge / 1000 / 60} minutes`, adapterRequest);
    if (maxAge > options.cacheImplOptions.maxAge) {
        external_adapter_1.logger.warn(`${feedId && feedId[0] !== '{' ? `[${feedId}]` : ''} Cache: Calculated TTL exceeds maximum TTL, using maximum of ${options.cacheImplOptions.maxAge / 1000 / 60} minutes`, adapterRequest);
        return options.cacheImplOptions.maxAge;
    }
    return maxAge;
};
exports.getRateLimitMaxAge = getRateLimitMaxAge;
const getMaxAgeOverride = (adapterRequest) => {
    if (!adapterRequest || !adapterRequest.data)
        return;
    if (isNaN(parseInt(adapterRequest.data.maxAge)))
        return;
    return parseInt(adapterRequest.data.maxAge);
};
exports.getMaxAgeOverride = getMaxAgeOverride;
const getTTL = (adapterRequest, options = _1.defaultOptions()) => {
    const TTL = exports.getMaxAgeOverride(adapterRequest) || exports.getRateLimitMaxAge(adapterRequest);
    if (!TTL || TTL < options.minimumAge)
        return options.minimumAge;
    return TTL;
};
exports.getTTL = getTTL;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHRsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9jYWNoZS90dGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQTRDO0FBRTVDLHdCQUFnRDtBQUVuQyxRQUFBLGVBQWUsR0FBRyxJQUFJLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQSxDQUFDLFlBQVk7QUFFbEQsTUFBTSxrQkFBa0IsR0FBRyxDQUNoQyxjQUE4QixFQUM5QixVQUF3QixpQkFBYyxFQUFFLEVBQ3BCLEVBQUU7SUFDdEIsSUFBSSxDQUFDLGNBQWMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlO1FBQUUsT0FBTTtJQUM5RCxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDO1FBQUUsT0FBTTtJQUNqRCxNQUFNLE1BQU0sR0FBRyxjQUFjLEVBQUUsV0FBVyxFQUFFLE1BQU0sQ0FBQTtJQUNsRCxNQUFNLE1BQU0sR0FBRyxjQUFjLENBQUMsZUFBZSxDQUFBO0lBQzdDLElBQUksTUFBTSxHQUFHLHVCQUFlO1FBQzFCLHlCQUFNLENBQUMsS0FBSyxDQUNWLEdBQUcsTUFBTSxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsd0NBQ2pELE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFDbEIsVUFBVSxFQUNWLGNBQWMsQ0FDZixDQUFBO0lBQ0gsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRTtRQUM1Qyx5QkFBTSxDQUFDLElBQUksQ0FDVCxHQUNFLE1BQU0sSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUNoRCxnRUFDRSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLElBQUksR0FBRyxFQUMzQyxVQUFVLEVBQ1YsY0FBYyxDQUNmLENBQUE7UUFDRCxPQUFPLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUE7S0FDdkM7SUFDRCxPQUFPLE1BQU0sQ0FBQTtBQUNmLENBQUMsQ0FBQTtBQTNCWSxRQUFBLGtCQUFrQixzQkEyQjlCO0FBRU0sTUFBTSxpQkFBaUIsR0FBRyxDQUFDLGNBQThCLEVBQXNCLEVBQUU7SUFDdEYsSUFBSSxDQUFDLGNBQWMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJO1FBQUUsT0FBTTtJQUNuRCxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUFFLE9BQU07SUFDdkQsT0FBTyxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUM3QyxDQUFDLENBQUE7QUFKWSxRQUFBLGlCQUFpQixxQkFJN0I7QUFFTSxNQUFNLE1BQU0sR0FBRyxDQUNwQixjQUE4QixFQUM5QixVQUF3QixpQkFBYyxFQUFFLEVBQ2hDLEVBQUU7SUFDVixNQUFNLEdBQUcsR0FBRyx5QkFBaUIsQ0FBQyxjQUFjLENBQUMsSUFBSSwwQkFBa0IsQ0FBQyxjQUFjLENBQUMsQ0FBQTtJQUNuRixJQUFJLENBQUMsR0FBRyxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsVUFBVTtRQUFFLE9BQU8sT0FBTyxDQUFDLFVBQVUsQ0FBQTtJQUMvRCxPQUFPLEdBQUcsQ0FBQTtBQUNaLENBQUMsQ0FBQTtBQVBZLFFBQUEsTUFBTSxVQU9sQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4uL2V4dGVybmFsLWFkYXB0ZXInXG5pbXBvcnQgeyBBZGFwdGVyUmVxdWVzdCB9IGZyb20gJ0BjaGFpbmxpbmsvdHlwZXMnXG5pbXBvcnQgeyBDYWNoZU9wdGlvbnMsIGRlZmF1bHRPcHRpb25zIH0gZnJvbSAnLidcblxuZXhwb3J0IGNvbnN0IFdBUk5JTkdfTUFYX0FHRSA9IDEwMDAgKiA2MCAqIDIgLy8gMiBtaW51dGVzXG5cbmV4cG9ydCBjb25zdCBnZXRSYXRlTGltaXRNYXhBZ2UgPSAoXG4gIGFkYXB0ZXJSZXF1ZXN0OiBBZGFwdGVyUmVxdWVzdCxcbiAgb3B0aW9uczogQ2FjaGVPcHRpb25zID0gZGVmYXVsdE9wdGlvbnMoKSxcbik6IG51bWJlciB8IHVuZGVmaW5lZCA9PiB7XG4gIGlmICghYWRhcHRlclJlcXVlc3QgfHwgIWFkYXB0ZXJSZXF1ZXN0LnJhdGVMaW1pdE1heEFnZSkgcmV0dXJuXG4gIGlmIChpc05hTihhZGFwdGVyUmVxdWVzdC5yYXRlTGltaXRNYXhBZ2UpKSByZXR1cm5cbiAgY29uc3QgZmVlZElkID0gYWRhcHRlclJlcXVlc3Q/Lm1ldHJpY3NNZXRhPy5mZWVkSWRcbiAgY29uc3QgbWF4QWdlID0gYWRhcHRlclJlcXVlc3QucmF0ZUxpbWl0TWF4QWdlXG4gIGlmIChtYXhBZ2UgPiBXQVJOSU5HX01BWF9BR0UpXG4gICAgbG9nZ2VyLnRyYWNlKFxuICAgICAgYCR7ZmVlZElkICYmIGZlZWRJZFswXSAhPT0gJ3snID8gYFske2ZlZWRJZH1dYCA6ICcnfSBDYWNoZTogSGlnaCBkYXRhIHN0YWxlbmVzcyAtIFRUTCBvZiAke1xuICAgICAgICBtYXhBZ2UgLyAxMDAwIC8gNjBcbiAgICAgIH0gbWludXRlc2AsXG4gICAgICBhZGFwdGVyUmVxdWVzdCxcbiAgICApXG4gIGlmIChtYXhBZ2UgPiBvcHRpb25zLmNhY2hlSW1wbE9wdGlvbnMubWF4QWdlKSB7XG4gICAgbG9nZ2VyLndhcm4oXG4gICAgICBgJHtcbiAgICAgICAgZmVlZElkICYmIGZlZWRJZFswXSAhPT0gJ3snID8gYFske2ZlZWRJZH1dYCA6ICcnXG4gICAgICB9IENhY2hlOiBDYWxjdWxhdGVkIFRUTCBleGNlZWRzIG1heGltdW0gVFRMLCB1c2luZyBtYXhpbXVtIG9mICR7XG4gICAgICAgIG9wdGlvbnMuY2FjaGVJbXBsT3B0aW9ucy5tYXhBZ2UgLyAxMDAwIC8gNjBcbiAgICAgIH0gbWludXRlc2AsXG4gICAgICBhZGFwdGVyUmVxdWVzdCxcbiAgICApXG4gICAgcmV0dXJuIG9wdGlvbnMuY2FjaGVJbXBsT3B0aW9ucy5tYXhBZ2VcbiAgfVxuICByZXR1cm4gbWF4QWdlXG59XG5cbmV4cG9ydCBjb25zdCBnZXRNYXhBZ2VPdmVycmlkZSA9IChhZGFwdGVyUmVxdWVzdDogQWRhcHRlclJlcXVlc3QpOiBudW1iZXIgfCB1bmRlZmluZWQgPT4ge1xuICBpZiAoIWFkYXB0ZXJSZXF1ZXN0IHx8ICFhZGFwdGVyUmVxdWVzdC5kYXRhKSByZXR1cm5cbiAgaWYgKGlzTmFOKHBhcnNlSW50KGFkYXB0ZXJSZXF1ZXN0LmRhdGEubWF4QWdlKSkpIHJldHVyblxuICByZXR1cm4gcGFyc2VJbnQoYWRhcHRlclJlcXVlc3QuZGF0YS5tYXhBZ2UpXG59XG5cbmV4cG9ydCBjb25zdCBnZXRUVEwgPSAoXG4gIGFkYXB0ZXJSZXF1ZXN0OiBBZGFwdGVyUmVxdWVzdCxcbiAgb3B0aW9uczogQ2FjaGVPcHRpb25zID0gZGVmYXVsdE9wdGlvbnMoKSxcbik6IG51bWJlciA9PiB7XG4gIGNvbnN0IFRUTCA9IGdldE1heEFnZU92ZXJyaWRlKGFkYXB0ZXJSZXF1ZXN0KSB8fCBnZXRSYXRlTGltaXRNYXhBZ2UoYWRhcHRlclJlcXVlc3QpXG4gIGlmICghVFRMIHx8IFRUTCA8IG9wdGlvbnMubWluaW11bUFnZSkgcmV0dXJuIG9wdGlvbnMubWluaW11bUFnZVxuICByZXR1cm4gVFRMXG59XG4iXX0=