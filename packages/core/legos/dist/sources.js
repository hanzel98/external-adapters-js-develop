"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const _1forge = tslib_1.__importStar(require("@chainlink/1forge-adapter"));
const ada_balance = tslib_1.__importStar(require("@chainlink/ada-balance-adapter"));
const alphachain = tslib_1.__importStar(require("@chainlink/alphachain-adapter"));
const alphavantage = tslib_1.__importStar(require("@chainlink/alphavantage-adapter"));
const amberdata = tslib_1.__importStar(require("@chainlink/amberdata-adapter"));
const anyblock = tslib_1.__importStar(require("@chainlink/anyblock-adapter"));
const ap_election = tslib_1.__importStar(require("@chainlink/ap-election-adapter"));
const balances = tslib_1.__importStar(require("@chainlink/balances-adapter"));
const binance = tslib_1.__importStar(require("@chainlink/binance-adapter"));
const binance_dex = tslib_1.__importStar(require("@chainlink/binance-dex-adapter"));
const bitex = tslib_1.__importStar(require("@chainlink/bitex-adapter"));
const bitso = tslib_1.__importStar(require("@chainlink/bitso-adapter"));
const blockchain_com = tslib_1.__importStar(require("@chainlink/blockchain.com-adapter"));
const blockchair = tslib_1.__importStar(require("@chainlink/blockchair-adapter"));
const blockcypher = tslib_1.__importStar(require("@chainlink/blockcypher-adapter"));
const blockstream = tslib_1.__importStar(require("@chainlink/blockstream-adapter"));
const bravenewcoin = tslib_1.__importStar(require("@chainlink/bravenewcoin-adapter"));
const btc_com = tslib_1.__importStar(require("@chainlink/btc.com-adapter"));
const cache_gold = tslib_1.__importStar(require("@chainlink/cache.gold-adapter"));
const cfbenchmarks = tslib_1.__importStar(require("@chainlink/cfbenchmarks-adapter"));
const chain_reserve_wallet = tslib_1.__importStar(require("@chainlink/chain-reserve-wallet-adapter"));
const coinapi = tslib_1.__importStar(require("@chainlink/coinapi-adapter"));
const coinbase = tslib_1.__importStar(require("@chainlink/coinbase-adapter"));
const coincodex = tslib_1.__importStar(require("@chainlink/coincodex-adapter"));
const coingecko = tslib_1.__importStar(require("@chainlink/coingecko-adapter"));
const coinlore = tslib_1.__importStar(require("@chainlink/coinlore-adapter"));
const coinmarketcap = tslib_1.__importStar(require("@chainlink/coinmarketcap-adapter"));
const coinmetrics = tslib_1.__importStar(require("@chainlink/coinmetrics-adapter"));
const coinpaprika = tslib_1.__importStar(require("@chainlink/coinpaprika-adapter"));
const coinranking = tslib_1.__importStar(require("@chainlink/coinranking-adapter"));
const covid_tracker = tslib_1.__importStar(require("@chainlink/covid-tracker-adapter"));
const cryptoapis = tslib_1.__importStar(require("@chainlink/cryptoapis-adapter"));
const cryptoapis_v2 = tslib_1.__importStar(require("@chainlink/cryptoapis-v2-adapter"));
const cryptocompare = tslib_1.__importStar(require("@chainlink/cryptocompare-adapter"));
const cryptoid = tslib_1.__importStar(require("@chainlink/cryptoid-adapter"));
const cryptomkt = tslib_1.__importStar(require("@chainlink/cryptomkt-adapter"));
const currencylayer = tslib_1.__importStar(require("@chainlink/currencylayer-adapter"));
const curve = tslib_1.__importStar(require("@chainlink/curve-adapter"));
const deribit = tslib_1.__importStar(require("@chainlink/deribit-adapter"));
const dns_query = tslib_1.__importStar(require("@chainlink/dns-query-adapter"));
const dwolla = tslib_1.__importStar(require("@chainlink/dwolla-adapter"));
const dxfeed = tslib_1.__importStar(require("@chainlink/dxfeed-adapter"));
const dxfeed_secondary = tslib_1.__importStar(require("@chainlink/dxfeed-secondary-adapter"));
const enzyme = tslib_1.__importStar(require("@chainlink/enzyme-adapter"));
const eodhistoricaldata = tslib_1.__importStar(require("@chainlink/eodhistoricaldata-adapter"));
const eth_balance = tslib_1.__importStar(require("@chainlink/eth-balance-adapter"));
const etherchain = tslib_1.__importStar(require("@chainlink/etherchain-adapter"));
const etherscan = tslib_1.__importStar(require("@chainlink/etherscan-adapter"));
const ethgasstation = tslib_1.__importStar(require("@chainlink/ethgasstation-adapter"));
const ethgaswatch = tslib_1.__importStar(require("@chainlink/ethgaswatch-adapter"));
const expert_car_broker = tslib_1.__importStar(require("@chainlink/expert-car-broker-adapter"));
const fcsapi = tslib_1.__importStar(require("@chainlink/fcsapi-adapter"));
const finage = tslib_1.__importStar(require("@chainlink/finage-adapter"));
const finnhub = tslib_1.__importStar(require("@chainlink/finnhub-adapter"));
const fixer = tslib_1.__importStar(require("@chainlink/fixer-adapter"));
const flightaware = tslib_1.__importStar(require("@chainlink/flightaware-adapter"));
const fmpcloud = tslib_1.__importStar(require("@chainlink/fmpcloud-adapter"));
const gemini = tslib_1.__importStar(require("@chainlink/gemini-adapter"));
const genesis_adapter = tslib_1.__importStar(require("@chainlink/genesis-volatility-adapter"));
const geodb = tslib_1.__importStar(require("@chainlink/geodb-adapter"));
const google_bigquery = tslib_1.__importStar(require("@chainlink/google-bigquery-adapter"));
const graphql = tslib_1.__importStar(require("@chainlink/graphql-adapter"));
const iex_adapter = tslib_1.__importStar(require("@chainlink/iex-cloud-adapter"));
const intrinio = tslib_1.__importStar(require("@chainlink/intrinio-adapter"));
const ipfs = tslib_1.__importStar(require("@chainlink/ipfs-adapter"));
const json_adapter = tslib_1.__importStar(require("@chainlink/json-rpc-adapter"));
const kaiko = tslib_1.__importStar(require("@chainlink/kaiko-adapter"));
const layer2_sequencer_health = tslib_1.__importStar(require("@chainlink/layer2-sequencer-health-adapter"));
const lcx = tslib_1.__importStar(require("@chainlink/lcx-adapter"));
const linkpool = tslib_1.__importStar(require("@chainlink/linkpool-adapter"));
const lition = tslib_1.__importStar(require("@chainlink/lition-adapter"));
const lotus = tslib_1.__importStar(require("@chainlink/lotus-adapter"));
const marketstack = tslib_1.__importStar(require("@chainlink/marketstack-adapter"));
const messari = tslib_1.__importStar(require("@chainlink/messari-adapter"));
const metalsapi = tslib_1.__importStar(require("@chainlink/metalsapi-adapter"));
const mycryptoapi = tslib_1.__importStar(require("@chainlink/mycryptoapi-adapter"));
const ncfx = tslib_1.__importStar(require("@chainlink/ncfx-adapter"));
const nikkei = tslib_1.__importStar(require("@chainlink/nikkei-adapter"));
const nomics = tslib_1.__importStar(require("@chainlink/nomics-adapter"));
const oilpriceapi = tslib_1.__importStar(require("@chainlink/oilpriceapi-adapter"));
const onchain = tslib_1.__importStar(require("@chainlink/onchain-adapter"));
const onchain_gas = tslib_1.__importStar(require("@chainlink/onchain-gas-adapter"));
const openexchangerates = tslib_1.__importStar(require("@chainlink/openexchangerates-adapter"));
const orchid_adapter = tslib_1.__importStar(require("@chainlink/orchid-bandwidth-adapter"));
const paxos = tslib_1.__importStar(require("@chainlink/paxos-adapter"));
const paypal = tslib_1.__importStar(require("@chainlink/paypal-adapter"));
const poa = tslib_1.__importStar(require("@chainlink/poa-adapter"));
const polygon = tslib_1.__importStar(require("@chainlink/polygon-adapter"));
const reduce = tslib_1.__importStar(require("@chainlink/reduce-adapter"));
const renvm_adapter_address = tslib_1.__importStar(require("@chainlink/renvm-address-set-adapter"));
const satoshitango = tslib_1.__importStar(require("@chainlink/satoshitango-adapter"));
const sochain = tslib_1.__importStar(require("@chainlink/sochain-adapter"));
const spectral_macro_score = tslib_1.__importStar(require("@chainlink/spectral-macro-score-adapter"));
const sportsdataio = tslib_1.__importStar(require("@chainlink/sportsdataio-adapter"));
const stasis = tslib_1.__importStar(require("@chainlink/stasis-adapter"));
const synthetix_debt_pool = tslib_1.__importStar(require("@chainlink/synthetix-debt-pool-adapter"));
const taapi = tslib_1.__importStar(require("@chainlink/taapi-adapter"));
const therundown = tslib_1.__importStar(require("@chainlink/therundown-adapter"));
const tiingo = tslib_1.__importStar(require("@chainlink/tiingo-adapter"));
const tradermade = tslib_1.__importStar(require("@chainlink/tradermade-adapter"));
const tradingeconomics = tslib_1.__importStar(require("@chainlink/tradingeconomics-adapter"));
const trueusd = tslib_1.__importStar(require("@chainlink/trueusd-adapter"));
const twelvedata = tslib_1.__importStar(require("@chainlink/twelvedata-adapter"));
const unibit = tslib_1.__importStar(require("@chainlink/unibit-adapter"));
const uniswap_v2 = tslib_1.__importStar(require("@chainlink/uniswap-v2-adapter"));
const uniswap_v3 = tslib_1.__importStar(require("@chainlink/uniswap-v3-adapter"));
const upvest = tslib_1.__importStar(require("@chainlink/upvest-adapter"));
const uscpi_one = tslib_1.__importStar(require("@chainlink/uscpi-one-adapter"));
const view_function = tslib_1.__importStar(require("@chainlink/view-function-adapter"));
const wbtc_adapter_address = tslib_1.__importStar(require("@chainlink/wbtc-address-set-adapter"));
const wootrade = tslib_1.__importStar(require("@chainlink/wootrade-adapter"));
const xbto = tslib_1.__importStar(require("@chainlink/xbto-adapter"));
exports.default = {
    _1forge,
    ada_balance,
    alphachain,
    alphavantage,
    amberdata,
    anyblock,
    ap_election,
    balances,
    binance,
    binance_dex,
    bitex,
    bitso,
    blockchain_com,
    blockchair,
    blockcypher,
    blockstream,
    bravenewcoin,
    btc_com,
    cache_gold,
    cfbenchmarks,
    chain_reserve_wallet,
    coinapi,
    coinbase,
    coincodex,
    coingecko,
    coinlore,
    coinmarketcap,
    coinmetrics,
    coinpaprika,
    coinranking,
    covid_tracker,
    cryptoapis,
    cryptoapis_v2,
    cryptocompare,
    cryptoid,
    cryptomkt,
    currencylayer,
    curve,
    deribit,
    dns_query,
    dwolla,
    dxfeed,
    dxfeed_secondary,
    enzyme,
    eodhistoricaldata,
    eth_balance,
    etherchain,
    etherscan,
    ethgasstation,
    ethgaswatch,
    expert_car_broker,
    fcsapi,
    finage,
    finnhub,
    fixer,
    flightaware,
    fmpcloud,
    gemini,
    genesis_adapter,
    geodb,
    google_bigquery,
    graphql,
    iex_adapter,
    intrinio,
    ipfs,
    json_adapter,
    kaiko,
    layer2_sequencer_health,
    lcx,
    linkpool,
    lition,
    lotus,
    marketstack,
    messari,
    metalsapi,
    mycryptoapi,
    ncfx,
    nikkei,
    nomics,
    oilpriceapi,
    onchain,
    onchain_gas,
    openexchangerates,
    orchid_adapter,
    paxos,
    paypal,
    poa,
    polygon,
    reduce,
    renvm_adapter_address,
    satoshitango,
    sochain,
    spectral_macro_score,
    sportsdataio,
    stasis,
    synthetix_debt_pool,
    taapi,
    therundown,
    tiingo,
    tradermade,
    tradingeconomics,
    trueusd,
    twelvedata,
    unibit,
    uniswap_v2,
    uniswap_v3,
    upvest,
    uscpi_one,
    view_function,
    wbtc_adapter_address,
    wootrade,
    xbto,
};
//# sourceMappingURL=data:application/json;base64,