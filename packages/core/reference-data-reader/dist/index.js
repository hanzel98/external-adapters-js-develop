"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRpcUrl = exports.getRpcLatestRound = exports.getRpcLatestAnswer = exports.getLatestAnswer = void 0;
const ethers_1 = require("ethers");
const AggregatorInterfaceFactory_1 = require("@chainlink/contracts/ethers/v0.6/AggregatorInterfaceFactory");
const AggregatorV2V3InterfaceFactory_1 = require("@chainlink/contracts/ethers/v0.6/AggregatorV2V3InterfaceFactory");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const getLatestAnswer = async (network, contractAddress, multiply, meta) => {
    if (!meta || !meta.latestAnswer)
        return exports.getRpcLatestAnswer(network, contractAddress, multiply);
    return meta.latestAnswer / multiply;
};
exports.getLatestAnswer = getLatestAnswer;
const getRpcLatestAnswer = async (network, contractAddress, multiply) => {
    const rpcUrl = exports.getRpcUrl(network);
    const provider = new ethers_1.ethers.providers.JsonRpcProvider(rpcUrl);
    const aggregator = AggregatorInterfaceFactory_1.AggregatorInterfaceFactory.connect(contractAddress, provider);
    return (await aggregator.latestAnswer()).div(multiply).toNumber();
};
exports.getRpcLatestAnswer = getRpcLatestAnswer;
const getRpcLatestRound = async (network, contractAddress) => {
    const rpcUrl = exports.getRpcUrl(network);
    const provider = new ethers_1.ethers.providers.JsonRpcProvider(rpcUrl);
    const aggregator = AggregatorV2V3InterfaceFactory_1.AggregatorV2V3InterfaceFactory.connect(contractAddress, provider);
    return await aggregator.latestRoundData();
};
exports.getRpcLatestRound = getRpcLatestRound;
const getRpcUrl = (network) => {
    // First try with network prefix
    const rpcUrlWithNetwork = ea_bootstrap_1.util.getEnv(`${network.toUpperCase()}_RPC_URL`);
    if (rpcUrlWithNetwork)
        return rpcUrlWithNetwork;
    // Backwards compatability for RPC_URL
    const rpcURL = ea_bootstrap_1.util.getEnv('RPC_URL');
    if (rpcURL) {
        ea_bootstrap_1.Logger.warn('Using the environment variable RPC_URL of an unknown network type. Multiple RPC URLs are now supported, please use only one instance of this adapter. Set the RPC_URLs with a prefix for the name of the network (e.g. ETHEREUM_RPC_URL).');
        return rpcURL;
    }
    throw new Error(`Network ${network} must be configured with an environment variable ${`${network.toUpperCase()}_RPC_URL`}`);
};
exports.getRpcUrl = getRpcUrl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQStCO0FBQy9CLDRHQUF3RztBQUN4RyxvSEFBZ0g7QUFDaEgsMERBQXNEO0FBb0IvQyxNQUFNLGVBQWUsR0FBdUIsS0FBSyxFQUN0RCxPQUFPLEVBQ1AsZUFBdUIsRUFDdkIsUUFBZ0IsRUFDaEIsSUFBOEIsRUFDYixFQUFFO0lBQ25CLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWTtRQUFFLE9BQU8sMEJBQWtCLENBQUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUU5RixPQUFRLElBQUksQ0FBQyxZQUF1QixHQUFHLFFBQVEsQ0FBQTtBQUNqRCxDQUFDLENBQUE7QUFUWSxRQUFBLGVBQWUsbUJBUzNCO0FBQ00sTUFBTSxrQkFBa0IsR0FBdUIsS0FBSyxFQUN6RCxPQUFPLEVBQ1AsZUFBdUIsRUFDdkIsUUFBZ0IsRUFDQyxFQUFFO0lBQ25CLE1BQU0sTUFBTSxHQUFHLGlCQUFTLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDakMsTUFBTSxRQUFRLEdBQUcsSUFBSSxlQUFNLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUM3RCxNQUFNLFVBQVUsR0FBRyx1REFBMEIsQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ2hGLE9BQU8sQ0FBQyxNQUFNLFVBQVUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtBQUNuRSxDQUFDLENBQUE7QUFUWSxRQUFBLGtCQUFrQixzQkFTOUI7QUFFTSxNQUFNLGlCQUFpQixHQUF1QixLQUFLLEVBQ3hELE9BQU8sRUFDUCxlQUF1QixFQUNILEVBQUU7SUFDdEIsTUFBTSxNQUFNLEdBQUcsaUJBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNqQyxNQUFNLFFBQVEsR0FBRyxJQUFJLGVBQU0sQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQzdELE1BQU0sVUFBVSxHQUFHLCtEQUE4QixDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDcEYsT0FBTyxNQUFNLFVBQVUsQ0FBQyxlQUFlLEVBQUUsQ0FBQTtBQUMzQyxDQUFDLENBQUE7QUFSWSxRQUFBLGlCQUFpQixxQkFRN0I7QUFFTSxNQUFNLFNBQVMsR0FBRyxDQUFDLE9BQWUsRUFBVSxFQUFFO0lBQ25ELGdDQUFnQztJQUNoQyxNQUFNLGlCQUFpQixHQUFHLG1CQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUN6RSxJQUFJLGlCQUFpQjtRQUFFLE9BQU8saUJBQWlCLENBQUE7SUFFL0Msc0NBQXNDO0lBQ3RDLE1BQU0sTUFBTSxHQUFHLG1CQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ3JDLElBQUksTUFBTSxFQUFFO1FBQ1YscUJBQU0sQ0FBQyxJQUFJLENBQ1QsMk9BQTJPLENBQzVPLENBQUE7UUFDRCxPQUFPLE1BQU0sQ0FBQTtLQUNkO0lBRUQsTUFBTSxJQUFJLEtBQUssQ0FDYixXQUFXLE9BQU8sb0RBQW9ELEdBQUcsT0FBTyxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsQ0FDM0csQ0FBQTtBQUNILENBQUMsQ0FBQTtBQWpCWSxRQUFBLFNBQVMsYUFpQnJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXRoZXJzIH0gZnJvbSAnZXRoZXJzJ1xuaW1wb3J0IHsgQWdncmVnYXRvckludGVyZmFjZUZhY3RvcnkgfSBmcm9tICdAY2hhaW5saW5rL2NvbnRyYWN0cy9ldGhlcnMvdjAuNi9BZ2dyZWdhdG9ySW50ZXJmYWNlRmFjdG9yeSdcbmltcG9ydCB7IEFnZ3JlZ2F0b3JWMlYzSW50ZXJmYWNlRmFjdG9yeSB9IGZyb20gJ0BjaGFpbmxpbmsvY29udHJhY3RzL2V0aGVycy92MC42L0FnZ3JlZ2F0b3JWMlYzSW50ZXJmYWNlRmFjdG9yeSdcbmltcG9ydCB7IHV0aWwsIExvZ2dlciB9IGZyb20gJ0BjaGFpbmxpbmsvZWEtYm9vdHN0cmFwJ1xuaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSAnZXRoZXJzL3V0aWxzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIFJvdW5kRGF0YSB7XG4gIHJvdW5kSWQ6IEJpZ051bWJlclxuICBhbnN3ZXI6IEJpZ051bWJlclxuICBzdGFydGVkQXQ6IEJpZ051bWJlclxuICB1cGRhdGVkQXQ6IEJpZ051bWJlclxuICBhbnN3ZXJlZEluUm91bmQ6IEJpZ051bWJlclxufVxuXG5leHBvcnQgdHlwZSBSZWZlcmVuY2VEYXRhUHJpY2UgPSAoXG4gIG5ldHdvcms6IHN0cmluZyxcbiAgY29udHJhY3RBZGRyZXNzOiBzdHJpbmcsXG4gIG11bHRpcGx5OiBudW1iZXIsXG4gIG1ldGE/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcbikgPT4gUHJvbWlzZTxudW1iZXI+XG5cbmV4cG9ydCB0eXBlIFJlZmVyZW5jZURhdGFSb3VuZCA9IChuZXR3b3JrOiBzdHJpbmcsIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nKSA9PiBQcm9taXNlPFJvdW5kRGF0YT5cblxuZXhwb3J0IGNvbnN0IGdldExhdGVzdEFuc3dlcjogUmVmZXJlbmNlRGF0YVByaWNlID0gYXN5bmMgKFxuICBuZXR3b3JrLFxuICBjb250cmFjdEFkZHJlc3M6IHN0cmluZyxcbiAgbXVsdGlwbHk6IG51bWJlcixcbiAgbWV0YT86IFJlY29yZDxzdHJpbmcsIHVua25vd24+LFxuKTogUHJvbWlzZTxudW1iZXI+ID0+IHtcbiAgaWYgKCFtZXRhIHx8ICFtZXRhLmxhdGVzdEFuc3dlcikgcmV0dXJuIGdldFJwY0xhdGVzdEFuc3dlcihuZXR3b3JrLCBjb250cmFjdEFkZHJlc3MsIG11bHRpcGx5KVxuXG4gIHJldHVybiAobWV0YS5sYXRlc3RBbnN3ZXIgYXMgbnVtYmVyKSAvIG11bHRpcGx5XG59XG5leHBvcnQgY29uc3QgZ2V0UnBjTGF0ZXN0QW5zd2VyOiBSZWZlcmVuY2VEYXRhUHJpY2UgPSBhc3luYyAoXG4gIG5ldHdvcmssXG4gIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nLFxuICBtdWx0aXBseTogbnVtYmVyLFxuKTogUHJvbWlzZTxudW1iZXI+ID0+IHtcbiAgY29uc3QgcnBjVXJsID0gZ2V0UnBjVXJsKG5ldHdvcmspXG4gIGNvbnN0IHByb3ZpZGVyID0gbmV3IGV0aGVycy5wcm92aWRlcnMuSnNvblJwY1Byb3ZpZGVyKHJwY1VybClcbiAgY29uc3QgYWdncmVnYXRvciA9IEFnZ3JlZ2F0b3JJbnRlcmZhY2VGYWN0b3J5LmNvbm5lY3QoY29udHJhY3RBZGRyZXNzLCBwcm92aWRlcilcbiAgcmV0dXJuIChhd2FpdCBhZ2dyZWdhdG9yLmxhdGVzdEFuc3dlcigpKS5kaXYobXVsdGlwbHkpLnRvTnVtYmVyKClcbn1cblxuZXhwb3J0IGNvbnN0IGdldFJwY0xhdGVzdFJvdW5kOiBSZWZlcmVuY2VEYXRhUm91bmQgPSBhc3luYyAoXG4gIG5ldHdvcmssXG4gIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nLFxuKTogUHJvbWlzZTxSb3VuZERhdGE+ID0+IHtcbiAgY29uc3QgcnBjVXJsID0gZ2V0UnBjVXJsKG5ldHdvcmspXG4gIGNvbnN0IHByb3ZpZGVyID0gbmV3IGV0aGVycy5wcm92aWRlcnMuSnNvblJwY1Byb3ZpZGVyKHJwY1VybClcbiAgY29uc3QgYWdncmVnYXRvciA9IEFnZ3JlZ2F0b3JWMlYzSW50ZXJmYWNlRmFjdG9yeS5jb25uZWN0KGNvbnRyYWN0QWRkcmVzcywgcHJvdmlkZXIpXG4gIHJldHVybiBhd2FpdCBhZ2dyZWdhdG9yLmxhdGVzdFJvdW5kRGF0YSgpXG59XG5cbmV4cG9ydCBjb25zdCBnZXRScGNVcmwgPSAobmV0d29yazogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgLy8gRmlyc3QgdHJ5IHdpdGggbmV0d29yayBwcmVmaXhcbiAgY29uc3QgcnBjVXJsV2l0aE5ldHdvcmsgPSB1dGlsLmdldEVudihgJHtuZXR3b3JrLnRvVXBwZXJDYXNlKCl9X1JQQ19VUkxgKVxuICBpZiAocnBjVXJsV2l0aE5ldHdvcmspIHJldHVybiBycGNVcmxXaXRoTmV0d29ya1xuXG4gIC8vIEJhY2t3YXJkcyBjb21wYXRhYmlsaXR5IGZvciBSUENfVVJMXG4gIGNvbnN0IHJwY1VSTCA9IHV0aWwuZ2V0RW52KCdSUENfVVJMJylcbiAgaWYgKHJwY1VSTCkge1xuICAgIExvZ2dlci53YXJuKFxuICAgICAgJ1VzaW5nIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZSBSUENfVVJMIG9mIGFuIHVua25vd24gbmV0d29yayB0eXBlLiBNdWx0aXBsZSBSUEMgVVJMcyBhcmUgbm93IHN1cHBvcnRlZCwgcGxlYXNlIHVzZSBvbmx5IG9uZSBpbnN0YW5jZSBvZiB0aGlzIGFkYXB0ZXIuIFNldCB0aGUgUlBDX1VSTHMgd2l0aCBhIHByZWZpeCBmb3IgdGhlIG5hbWUgb2YgdGhlIG5ldHdvcmsgKGUuZy4gRVRIRVJFVU1fUlBDX1VSTCkuJyxcbiAgICApXG4gICAgcmV0dXJuIHJwY1VSTFxuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgIGBOZXR3b3JrICR7bmV0d29ya30gbXVzdCBiZSBjb25maWd1cmVkIHdpdGggYW4gZW52aXJvbm1lbnQgdmFyaWFibGUgJHtgJHtuZXR3b3JrLnRvVXBwZXJDYXNlKCl9X1JQQ19VUkxgfWAsXG4gIClcbn1cbiJdfQ==