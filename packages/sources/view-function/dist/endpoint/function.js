"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const ethers_1 = require("ethers");
exports.supportedEndpoints = ['function'];
exports.inputParameters = {
    signature: ['function', 'signature'],
    address: ['address', 'contract'],
    inputParams: false,
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const address = validator.validated.data.address;
    const fnSignature = validator.validated.data.signature;
    const params = validator.validated.data.inputParams || [];
    const iface = new ethers_1.utils.Interface([fnSignature]);
    const fnName = iface.functions[Object.keys(iface.functions)[0]].name;
    const encoded = iface.encodeFunctionData(fnName, [...params]);
    const result = await config.provider.call({
        to: address,
        data: encoded,
    });
    const response = {
        jobRunID,
        status: 200,
        statusText: 'OK',
        headers: {},
        config: {},
        data: result,
    };
    return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, result));
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZW5kcG9pbnQvZnVuY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQThEO0FBRzlELG1DQUE4QjtBQUVqQixRQUFBLGtCQUFrQixHQUFHLENBQUMsVUFBVSxDQUFDLENBQUE7QUFFakMsUUFBQSxlQUFlLEdBQW9CO0lBQzlDLFNBQVMsRUFBRSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUM7SUFDcEMsT0FBTyxFQUFFLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQztJQUNoQyxXQUFXLEVBQUUsS0FBSztDQUNuQixDQUFBO0FBRU0sTUFBTSxPQUFPLEdBQThCLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFO0lBQzdFLE1BQU0sU0FBUyxHQUFHLElBQUksd0JBQVMsQ0FBQyxPQUFPLEVBQUUsdUJBQWUsQ0FBQyxDQUFBO0lBQ3pELElBQUksU0FBUyxDQUFDLEtBQUs7UUFBRSxNQUFNLFNBQVMsQ0FBQyxLQUFLLENBQUE7SUFFMUMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUE7SUFDdkMsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFBO0lBQ2hELE1BQU0sV0FBVyxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQTtJQUN0RCxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFBO0lBRXpELE1BQU0sS0FBSyxHQUFHLElBQUksY0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUE7SUFDaEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQTtJQUVwRSxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFBO0lBRTdELE1BQU0sTUFBTSxHQUFHLE1BQU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDeEMsRUFBRSxFQUFFLE9BQU87UUFDWCxJQUFJLEVBQUUsT0FBTztLQUNkLENBQUMsQ0FBQTtJQUVGLE1BQU0sUUFBUSxHQUFHO1FBQ2YsUUFBUTtRQUNSLE1BQU0sRUFBRSxHQUFHO1FBQ1gsVUFBVSxFQUFFLElBQUk7UUFDaEIsT0FBTyxFQUFFLEVBQUU7UUFDWCxNQUFNLEVBQUUsRUFBRTtRQUNWLElBQUksRUFBRSxNQUFNO0tBQ2IsQ0FBQTtJQUVELE9BQU8sd0JBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLHdCQUFTLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFBO0FBQzVFLENBQUMsQ0FBQTtBQTdCWSxRQUFBLE9BQU8sV0E2Qm5CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdGVyLCBWYWxpZGF0b3IgfSBmcm9tICdAY2hhaW5saW5rL2VhLWJvb3RzdHJhcCdcbmltcG9ydCB7IEV4ZWN1dGVXaXRoQ29uZmlnLCBJbnB1dFBhcmFtZXRlcnMgfSBmcm9tICdAY2hhaW5saW5rL3R5cGVzJ1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJ1xuaW1wb3J0IHsgdXRpbHMgfSBmcm9tICdldGhlcnMnXG5cbmV4cG9ydCBjb25zdCBzdXBwb3J0ZWRFbmRwb2ludHMgPSBbJ2Z1bmN0aW9uJ11cblxuZXhwb3J0IGNvbnN0IGlucHV0UGFyYW1ldGVyczogSW5wdXRQYXJhbWV0ZXJzID0ge1xuICBzaWduYXR1cmU6IFsnZnVuY3Rpb24nLCAnc2lnbmF0dXJlJ10sXG4gIGFkZHJlc3M6IFsnYWRkcmVzcycsICdjb250cmFjdCddLFxuICBpbnB1dFBhcmFtczogZmFsc2UsXG59XG5cbmV4cG9ydCBjb25zdCBleGVjdXRlOiBFeGVjdXRlV2l0aENvbmZpZzxDb25maWc+ID0gYXN5bmMgKHJlcXVlc3QsIF8sIGNvbmZpZykgPT4ge1xuICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgVmFsaWRhdG9yKHJlcXVlc3QsIGlucHV0UGFyYW1ldGVycylcbiAgaWYgKHZhbGlkYXRvci5lcnJvcikgdGhyb3cgdmFsaWRhdG9yLmVycm9yXG5cbiAgY29uc3Qgam9iUnVuSUQgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmlkXG4gIGNvbnN0IGFkZHJlc3MgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmRhdGEuYWRkcmVzc1xuICBjb25zdCBmblNpZ25hdHVyZSA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5zaWduYXR1cmVcbiAgY29uc3QgcGFyYW1zID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLmlucHV0UGFyYW1zIHx8IFtdXG5cbiAgY29uc3QgaWZhY2UgPSBuZXcgdXRpbHMuSW50ZXJmYWNlKFtmblNpZ25hdHVyZV0pXG4gIGNvbnN0IGZuTmFtZSA9IGlmYWNlLmZ1bmN0aW9uc1tPYmplY3Qua2V5cyhpZmFjZS5mdW5jdGlvbnMpWzBdXS5uYW1lXG5cbiAgY29uc3QgZW5jb2RlZCA9IGlmYWNlLmVuY29kZUZ1bmN0aW9uRGF0YShmbk5hbWUsIFsuLi5wYXJhbXNdKVxuXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbmZpZy5wcm92aWRlci5jYWxsKHtcbiAgICB0bzogYWRkcmVzcyxcbiAgICBkYXRhOiBlbmNvZGVkLFxuICB9KVxuXG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgIGpvYlJ1bklELFxuICAgIHN0YXR1czogMjAwLFxuICAgIHN0YXR1c1RleHQ6ICdPSycsXG4gICAgaGVhZGVyczoge30sXG4gICAgY29uZmlnOiB7fSxcbiAgICBkYXRhOiByZXN1bHQsXG4gIH1cblxuICByZXR1cm4gUmVxdWVzdGVyLnN1Y2Nlc3Moam9iUnVuSUQsIFJlcXVlc3Rlci53aXRoUmVzdWx0KHJlc3BvbnNlLCByZXN1bHQpKVxufVxuIl19