"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExecute = exports.execute = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("./config");
const commonKeys = {
    bz: 'BRENT_CRUDE_USD',
    brent: 'BRENT_CRUDE_USD',
    wti: 'WTI_USD',
};
const customParams = {
    base: ['type', 'base', 'asset', 'from', 'market'],
    endpoint: false,
};
const customError = (data) => {
    return data.data === null;
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, customParams);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const endpoint = validator.validated.data.endpoint || 'prices/latest';
    const url = endpoint;
    const base = validator.validated.data.base.toLowerCase();
    // eslint-disable-next-line camelcase
    const by_code = commonKeys[base] || base;
    const params = {
        by_code,
    };
    const headers = {
        Authorization: `Token ${config.apiKey}`,
    };
    const reqConfig = {
        ...config.api,
        params,
        url,
        headers,
    };
    const response = await ea_bootstrap_1.Requester.request(reqConfig, customError);
    response.data.result = ea_bootstrap_1.Requester.validateResultNumber(response.data, ['data', 'price']);
    return ea_bootstrap_1.Requester.success(jobRunID, response);
};
exports.execute = execute;
const makeExecute = (config) => {
    return async (request, context) => exports.execute(request, context, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDBEQUE4RDtBQUM5RCxxQ0FBcUM7QUFFckMsTUFBTSxVQUFVLEdBQTJCO0lBQ3pDLEVBQUUsRUFBRSxpQkFBaUI7SUFDckIsS0FBSyxFQUFFLGlCQUFpQjtJQUN4QixHQUFHLEVBQUUsU0FBUztDQUNmLENBQUE7QUFFRCxNQUFNLFlBQVksR0FBRztJQUNuQixJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDO0lBQ2pELFFBQVEsRUFBRSxLQUFLO0NBQ2hCLENBQUE7QUFFRCxNQUFNLFdBQVcsR0FBRyxDQUFDLElBQTZCLEVBQUUsRUFBRTtJQUNwRCxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFBO0FBQzNCLENBQUMsQ0FBQTtBQUVNLE1BQU0sT0FBTyxHQUE4QixLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRTtJQUM3RSxNQUFNLFNBQVMsR0FBRyxJQUFJLHdCQUFTLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFBO0lBQ3RELElBQUksU0FBUyxDQUFDLEtBQUs7UUFBRSxNQUFNLFNBQVMsQ0FBQyxLQUFLLENBQUE7SUFFMUMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUE7SUFDdkMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLGVBQWUsQ0FBQTtJQUNyRSxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUE7SUFDcEIsTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFBO0lBQ3hELHFDQUFxQztJQUNyQyxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFBO0lBQ3hDLE1BQU0sTUFBTSxHQUFHO1FBQ2IsT0FBTztLQUNSLENBQUE7SUFDRCxNQUFNLE9BQU8sR0FBRztRQUNkLGFBQWEsRUFBRSxTQUFTLE1BQU0sQ0FBQyxNQUFNLEVBQUU7S0FDeEMsQ0FBQTtJQUVELE1BQU0sU0FBUyxHQUFHO1FBQ2hCLEdBQUcsTUFBTSxDQUFDLEdBQUc7UUFDYixNQUFNO1FBQ04sR0FBRztRQUNILE9BQU87S0FDUixDQUFBO0lBRUQsTUFBTSxRQUFRLEdBQUcsTUFBTSx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUE7SUFDaEUsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsd0JBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUE7SUFDdkYsT0FBTyx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUE7QUFDOUMsQ0FBQyxDQUFBO0FBM0JZLFFBQUEsT0FBTyxXQTJCbkI7QUFFTSxNQUFNLFdBQVcsR0FBMkIsQ0FBQyxNQUFNLEVBQUUsRUFBRTtJQUM1RCxPQUFPLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxlQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLElBQUksbUJBQVUsRUFBRSxDQUFDLENBQUE7QUFDdEYsQ0FBQyxDQUFBO0FBRlksUUFBQSxXQUFXLGVBRXZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXhlY3V0ZVdpdGhDb25maWcsIEV4ZWN1dGVGYWN0b3J5LCBDb25maWcgfSBmcm9tICdAY2hhaW5saW5rL3R5cGVzJ1xuaW1wb3J0IHsgUmVxdWVzdGVyLCBWYWxpZGF0b3IgfSBmcm9tICdAY2hhaW5saW5rL2VhLWJvb3RzdHJhcCdcbmltcG9ydCB7IG1ha2VDb25maWcgfSBmcm9tICcuL2NvbmZpZydcblxuY29uc3QgY29tbW9uS2V5czogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgYno6ICdCUkVOVF9DUlVERV9VU0QnLFxuICBicmVudDogJ0JSRU5UX0NSVURFX1VTRCcsXG4gIHd0aTogJ1dUSV9VU0QnLFxufVxuXG5jb25zdCBjdXN0b21QYXJhbXMgPSB7XG4gIGJhc2U6IFsndHlwZScsICdiYXNlJywgJ2Fzc2V0JywgJ2Zyb20nLCAnbWFya2V0J10sXG4gIGVuZHBvaW50OiBmYWxzZSxcbn1cblxuY29uc3QgY3VzdG9tRXJyb3IgPSAoZGF0YTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4pID0+IHtcbiAgcmV0dXJuIGRhdGEuZGF0YSA9PT0gbnVsbFxufVxuXG5leHBvcnQgY29uc3QgZXhlY3V0ZTogRXhlY3V0ZVdpdGhDb25maWc8Q29uZmlnPiA9IGFzeW5jIChyZXF1ZXN0LCBfLCBjb25maWcpID0+IHtcbiAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihyZXF1ZXN0LCBjdXN0b21QYXJhbXMpXG4gIGlmICh2YWxpZGF0b3IuZXJyb3IpIHRocm93IHZhbGlkYXRvci5lcnJvclxuXG4gIGNvbnN0IGpvYlJ1bklEID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5pZFxuICBjb25zdCBlbmRwb2ludCA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5lbmRwb2ludCB8fCAncHJpY2VzL2xhdGVzdCdcbiAgY29uc3QgdXJsID0gZW5kcG9pbnRcbiAgY29uc3QgYmFzZSA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5iYXNlLnRvTG93ZXJDYXNlKClcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuICBjb25zdCBieV9jb2RlID0gY29tbW9uS2V5c1tiYXNlXSB8fCBiYXNlXG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBieV9jb2RlLFxuICB9XG4gIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgQXV0aG9yaXphdGlvbjogYFRva2VuICR7Y29uZmlnLmFwaUtleX1gLFxuICB9XG5cbiAgY29uc3QgcmVxQ29uZmlnID0ge1xuICAgIC4uLmNvbmZpZy5hcGksXG4gICAgcGFyYW1zLFxuICAgIHVybCxcbiAgICBoZWFkZXJzLFxuICB9XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBSZXF1ZXN0ZXIucmVxdWVzdChyZXFDb25maWcsIGN1c3RvbUVycm9yKVxuICByZXNwb25zZS5kYXRhLnJlc3VsdCA9IFJlcXVlc3Rlci52YWxpZGF0ZVJlc3VsdE51bWJlcihyZXNwb25zZS5kYXRhLCBbJ2RhdGEnLCAncHJpY2UnXSlcbiAgcmV0dXJuIFJlcXVlc3Rlci5zdWNjZXNzKGpvYlJ1bklELCByZXNwb25zZSlcbn1cblxuZXhwb3J0IGNvbnN0IG1ha2VFeGVjdXRlOiBFeGVjdXRlRmFjdG9yeTxDb25maWc+ID0gKGNvbmZpZykgPT4ge1xuICByZXR1cm4gYXN5bmMgKHJlcXVlc3QsIGNvbnRleHQpID0+IGV4ZWN1dGUocmVxdWVzdCwgY29udGV4dCwgY29uZmlnIHx8IG1ha2VDb25maWcoKSlcbn1cbiJdfQ==