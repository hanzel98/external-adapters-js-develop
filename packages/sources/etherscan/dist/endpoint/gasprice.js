"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
exports.supportedEndpoints = ['gasprice'];
const speedType = {
    safe: 'SafeGasPrice',
    medium: 'ProposeGasPrice',
    fast: 'FastGasPrice',
};
const customError = (data) => data.Response === 'Error';
exports.inputParameters = {
    speed: false,
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const speedValue = validator.validated.data.speed;
    const speed = speedType[speedValue] || speedType['fast'];
    const url = `/api`;
    const params = {
        module: 'gastracker',
        action: 'gasoracle',
        apikey: config.apiKey,
    };
    const options = {
        ...config.api,
        params,
        url,
    };
    const response = await ea_bootstrap_1.Requester.request(options, customError);
    if (!config.apiKey) {
        ea_bootstrap_1.Logger.warn(response.data.message);
    }
    const result = ea_bootstrap_1.Requester.validateResultNumber(response.data, ['result', speed]);
    return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, result), config.verbose);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FzcHJpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZW5kcG9pbnQvZ2FzcHJpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQXNFO0FBR3pELFFBQUEsa0JBQWtCLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQTtBQWE5QyxNQUFNLFNBQVMsR0FBUTtJQUNyQixJQUFJLEVBQUUsY0FBYztJQUNwQixNQUFNLEVBQUUsaUJBQWlCO0lBQ3pCLElBQUksRUFBRSxjQUFjO0NBQ3JCLENBQUE7QUFFRCxNQUFNLFdBQVcsR0FBRyxDQUFDLElBQVMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUE7QUFFL0MsUUFBQSxlQUFlLEdBQW9CO0lBQzlDLEtBQUssRUFBRSxLQUFLO0NBQ2IsQ0FBQTtBQUVNLE1BQU0sT0FBTyxHQUE4QixLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRTtJQUM3RSxNQUFNLFNBQVMsR0FBRyxJQUFJLHdCQUFTLENBQUMsT0FBTyxFQUFFLHVCQUFlLENBQUMsQ0FBQTtJQUN6RCxJQUFJLFNBQVMsQ0FBQyxLQUFLO1FBQUUsTUFBTSxTQUFTLENBQUMsS0FBSyxDQUFBO0lBRTFDLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFBO0lBQ3ZDLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQTtJQUNqRCxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3hELE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQTtJQUVsQixNQUFNLE1BQU0sR0FBRztRQUNiLE1BQU0sRUFBRSxZQUFZO1FBQ3BCLE1BQU0sRUFBRSxXQUFXO1FBQ25CLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTTtLQUN0QixDQUFBO0lBRUQsTUFBTSxPQUFPLEdBQUc7UUFDZCxHQUFHLE1BQU0sQ0FBQyxHQUFHO1FBQ2IsTUFBTTtRQUNOLEdBQUc7S0FDSixDQUFBO0lBRUQsTUFBTSxRQUFRLEdBQUcsTUFBTSx3QkFBUyxDQUFDLE9BQU8sQ0FBaUIsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFBO0lBQzlFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO1FBQ2xCLHFCQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7S0FDbkM7SUFDRCxNQUFNLE1BQU0sR0FBRyx3QkFBUyxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQTtJQUMvRSxPQUFPLHdCQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSx3QkFBUyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBQzVGLENBQUMsQ0FBQTtBQTNCWSxRQUFBLE9BQU8sV0EyQm5CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdGVyLCBWYWxpZGF0b3IsIExvZ2dlciB9IGZyb20gJ0BjaGFpbmxpbmsvZWEtYm9vdHN0cmFwJ1xuaW1wb3J0IHsgQ29uZmlnLCBFeGVjdXRlV2l0aENvbmZpZywgSW5wdXRQYXJhbWV0ZXJzIH0gZnJvbSAnQGNoYWlubGluay90eXBlcydcblxuZXhwb3J0IGNvbnN0IHN1cHBvcnRlZEVuZHBvaW50cyA9IFsnZ2FzcHJpY2UnXVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlU2NoZW1hIHtcbiAgc3RhdHVzOiBudW1iZXJcbiAgbWVzc2FnZTogc3RyaW5nXG4gIHJlc3VsdDoge1xuICAgIExhc3RCbG9jazogbnVtYmVyXG4gICAgU2FmZUdhc1ByaWNlOiBudW1iZXJcbiAgICBQcm9wb3NlR2FzUHJpY2U6IG51bWJlclxuICAgIEZhc3RHYXNQcmljZTogbnVtYmVyXG4gIH1cbn1cblxuY29uc3Qgc3BlZWRUeXBlOiBhbnkgPSB7XG4gIHNhZmU6ICdTYWZlR2FzUHJpY2UnLFxuICBtZWRpdW06ICdQcm9wb3NlR2FzUHJpY2UnLFxuICBmYXN0OiAnRmFzdEdhc1ByaWNlJyxcbn1cblxuY29uc3QgY3VzdG9tRXJyb3IgPSAoZGF0YTogYW55KSA9PiBkYXRhLlJlc3BvbnNlID09PSAnRXJyb3InXG5cbmV4cG9ydCBjb25zdCBpbnB1dFBhcmFtZXRlcnM6IElucHV0UGFyYW1ldGVycyA9IHtcbiAgc3BlZWQ6IGZhbHNlLFxufVxuXG5leHBvcnQgY29uc3QgZXhlY3V0ZTogRXhlY3V0ZVdpdGhDb25maWc8Q29uZmlnPiA9IGFzeW5jIChyZXF1ZXN0LCBfLCBjb25maWcpID0+IHtcbiAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihyZXF1ZXN0LCBpbnB1dFBhcmFtZXRlcnMpXG4gIGlmICh2YWxpZGF0b3IuZXJyb3IpIHRocm93IHZhbGlkYXRvci5lcnJvclxuXG4gIGNvbnN0IGpvYlJ1bklEID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5pZFxuICBjb25zdCBzcGVlZFZhbHVlID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLnNwZWVkXG4gIGNvbnN0IHNwZWVkID0gc3BlZWRUeXBlW3NwZWVkVmFsdWVdIHx8IHNwZWVkVHlwZVsnZmFzdCddXG4gIGNvbnN0IHVybCA9IGAvYXBpYFxuXG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBtb2R1bGU6ICdnYXN0cmFja2VyJyxcbiAgICBhY3Rpb246ICdnYXNvcmFjbGUnLFxuICAgIGFwaWtleTogY29uZmlnLmFwaUtleSxcbiAgfVxuXG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgLi4uY29uZmlnLmFwaSxcbiAgICBwYXJhbXMsXG4gICAgdXJsLFxuICB9XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBSZXF1ZXN0ZXIucmVxdWVzdDxSZXNwb25zZVNjaGVtYT4ob3B0aW9ucywgY3VzdG9tRXJyb3IpXG4gIGlmICghY29uZmlnLmFwaUtleSkge1xuICAgIExvZ2dlci53YXJuKHJlc3BvbnNlLmRhdGEubWVzc2FnZSlcbiAgfVxuICBjb25zdCByZXN1bHQgPSBSZXF1ZXN0ZXIudmFsaWRhdGVSZXN1bHROdW1iZXIocmVzcG9uc2UuZGF0YSwgWydyZXN1bHQnLCBzcGVlZF0pXG4gIHJldHVybiBSZXF1ZXN0ZXIuc3VjY2Vzcyhqb2JSdW5JRCwgUmVxdWVzdGVyLndpdGhSZXN1bHQocmVzcG9uc2UsIHJlc3VsdCksIGNvbmZpZy52ZXJib3NlKVxufVxuIl19