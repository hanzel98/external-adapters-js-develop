"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExecute = exports.execute = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("./config");
const bigquery_1 = require("@google-cloud/bigquery");
const inputParams = {
    query: true,
    params: false,
    location: false,
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, inputParams);
    if (validator.error)
        throw validator.error;
    ea_bootstrap_1.Requester.logConfig(config);
    const jobRunID = validator.validated.id;
    const query = validator.validated.data.query;
    const params = validator.validated.data.params || [];
    const location = validator.validated.data.location || config.location;
    const bqOptions = {
        ...config,
        location,
    };
    const bigqueryClient = new bigquery_1.BigQuery(bqOptions);
    const [rows] = await bigqueryClient.query({ query, params });
    const response = { data: { result: rows } };
    return ea_bootstrap_1.Requester.success(jobRunID, response, true);
};
exports.execute = execute;
const makeExecute = (config) => {
    return async (request, context) => exports.execute(request, context, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUE4RDtBQUU5RCxxQ0FBNkM7QUFDN0MscURBQWtFO0FBRWxFLE1BQU0sV0FBVyxHQUFHO0lBQ2xCLEtBQUssRUFBRSxJQUFJO0lBQ1gsTUFBTSxFQUFFLEtBQUs7SUFDYixRQUFRLEVBQUUsS0FBSztDQUNoQixDQUFBO0FBRU0sTUFBTSxPQUFPLEdBQThCLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFO0lBQzdFLE1BQU0sU0FBUyxHQUFHLElBQUksd0JBQVMsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUE7SUFDckQsSUFBSSxTQUFTLENBQUMsS0FBSztRQUFFLE1BQU0sU0FBUyxDQUFDLEtBQUssQ0FBQTtJQUUxQyx3QkFBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUUzQixNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQTtJQUN2QyxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDNUMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQTtJQUNwRCxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQTtJQUVyRSxNQUFNLFNBQVMsR0FBb0I7UUFDakMsR0FBRyxNQUFNO1FBQ1QsUUFBUTtLQUNULENBQUE7SUFFRCxNQUFNLGNBQWMsR0FBRyxJQUFJLG1CQUFRLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFOUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sY0FBYyxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFBO0lBQzVELE1BQU0sUUFBUSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUE7SUFFM0MsT0FBTyx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFBO0FBQ3BELENBQUMsQ0FBQTtBQXRCWSxRQUFBLE9BQU8sV0FzQm5CO0FBRU0sTUFBTSxXQUFXLEdBQTJCLENBQUMsTUFBTSxFQUFFLEVBQUU7SUFDNUQsT0FBTyxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsZUFBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxJQUFJLG1CQUFVLEVBQUUsQ0FBQyxDQUFBO0FBQ3RGLENBQUMsQ0FBQTtBQUZZLFFBQUEsV0FBVyxlQUV2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3RlciwgVmFsaWRhdG9yIH0gZnJvbSAnQGNoYWlubGluay9lYS1ib290c3RyYXAnXG5pbXBvcnQgeyBFeGVjdXRlV2l0aENvbmZpZywgRXhlY3V0ZUZhY3RvcnkgfSBmcm9tICdAY2hhaW5saW5rL3R5cGVzJ1xuaW1wb3J0IHsgQ29uZmlnLCBtYWtlQ29uZmlnIH0gZnJvbSAnLi9jb25maWcnXG5pbXBvcnQgeyBCaWdRdWVyeSwgQmlnUXVlcnlPcHRpb25zIH0gZnJvbSAnQGdvb2dsZS1jbG91ZC9iaWdxdWVyeSdcblxuY29uc3QgaW5wdXRQYXJhbXMgPSB7XG4gIHF1ZXJ5OiB0cnVlLFxuICBwYXJhbXM6IGZhbHNlLFxuICBsb2NhdGlvbjogZmFsc2UsXG59XG5cbmV4cG9ydCBjb25zdCBleGVjdXRlOiBFeGVjdXRlV2l0aENvbmZpZzxDb25maWc+ID0gYXN5bmMgKHJlcXVlc3QsIF8sIGNvbmZpZykgPT4ge1xuICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgVmFsaWRhdG9yKHJlcXVlc3QsIGlucHV0UGFyYW1zKVxuICBpZiAodmFsaWRhdG9yLmVycm9yKSB0aHJvdyB2YWxpZGF0b3IuZXJyb3JcblxuICBSZXF1ZXN0ZXIubG9nQ29uZmlnKGNvbmZpZylcblxuICBjb25zdCBqb2JSdW5JRCA9IHZhbGlkYXRvci52YWxpZGF0ZWQuaWRcbiAgY29uc3QgcXVlcnkgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmRhdGEucXVlcnlcbiAgY29uc3QgcGFyYW1zID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLnBhcmFtcyB8fCBbXVxuICBjb25zdCBsb2NhdGlvbiA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5sb2NhdGlvbiB8fCBjb25maWcubG9jYXRpb25cblxuICBjb25zdCBicU9wdGlvbnM6IEJpZ1F1ZXJ5T3B0aW9ucyA9IHtcbiAgICAuLi5jb25maWcsXG4gICAgbG9jYXRpb24sXG4gIH1cblxuICBjb25zdCBiaWdxdWVyeUNsaWVudCA9IG5ldyBCaWdRdWVyeShicU9wdGlvbnMpXG5cbiAgY29uc3QgW3Jvd3NdID0gYXdhaXQgYmlncXVlcnlDbGllbnQucXVlcnkoeyBxdWVyeSwgcGFyYW1zIH0pXG4gIGNvbnN0IHJlc3BvbnNlID0geyBkYXRhOiB7IHJlc3VsdDogcm93cyB9IH1cblxuICByZXR1cm4gUmVxdWVzdGVyLnN1Y2Nlc3Moam9iUnVuSUQsIHJlc3BvbnNlLCB0cnVlKVxufVxuXG5leHBvcnQgY29uc3QgbWFrZUV4ZWN1dGU6IEV4ZWN1dGVGYWN0b3J5PENvbmZpZz4gPSAoY29uZmlnKSA9PiB7XG4gIHJldHVybiBhc3luYyAocmVxdWVzdCwgY29udGV4dCkgPT4gZXhlY3V0ZShyZXF1ZXN0LCBjb250ZXh0LCBjb25maWcgfHwgbWFrZUNvbmZpZygpKVxufVxuIl19