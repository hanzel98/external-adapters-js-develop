"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.supportedEndpoints = exports.CID = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const ipfs_http_client_1 = require("ipfs-http-client");
const cid_1 = require("multiformats/cid");
Object.defineProperty(exports, "CID", { enumerable: true, get: function () { return cid_1.CID; } });
const codec_1 = require("../codec");
exports.supportedEndpoints = ['read'];
const customParams = {
    cid: false,
    ipns: false,
    codec: false,
    type: false,
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, customParams);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    let cid = validator.validated.data.cid;
    const ipns = validator.validated.data.ipns;
    const type = validator.validated.data.type || 'raw';
    if (!cid && !ipns) {
        throw Error('Request is missing both "cid" and "ipns". One is required.');
    }
    const client = ipfs_http_client_1.create({ url: config.api.baseURL });
    // If CID is not included, we try to resolve IPNS
    if (!cid) {
        for await (const ipfsCid of client.name.resolve(`/ipns/${ipns}`)) {
            cid = ipfsCid.replace('/ipfs/', '');
        }
    }
    const codec = validator.validated.data.codec;
    let result;
    switch (type) {
        case 'raw':
            result = await readFile(cid, codec, client);
            break;
        case 'dag':
            result = await readDag(cid, client);
            break;
        default:
            throw Error(`Unknown type: ${type}`);
    }
    const response = {
        data: { result },
    };
    return ea_bootstrap_1.Requester.success(jobRunID, response);
};
exports.execute = execute;
const readFile = async (cid, codec, client) => {
    const stream = client.cat(cid);
    let data = Buffer.from([]);
    for await (const chunk of stream) {
        data = Buffer.concat([data, chunk]);
    }
    return codec_1.deserialize(data, codec);
};
const readDag = async (cid, client) => {
    if (typeof cid === 'string') {
        cid = cid_1.CID.parse(cid);
    }
    const result = await client.dag.get(cid);
    return result.value;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbmRwb2ludC9yZWFkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUE4RDtBQUc5RCx1REFBeUM7QUFDekMsMENBQXNDO0FBSTdCLG9GQUpBLFNBQUcsT0FJQTtBQUZaLG9DQUFzQztBQUl6QixRQUFBLGtCQUFrQixHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7QUFFMUMsTUFBTSxZQUFZLEdBQUc7SUFDbkIsR0FBRyxFQUFFLEtBQUs7SUFDVixJQUFJLEVBQUUsS0FBSztJQUNYLEtBQUssRUFBRSxLQUFLO0lBQ1osSUFBSSxFQUFFLEtBQUs7Q0FDWixDQUFBO0FBRU0sTUFBTSxPQUFPLEdBQThCLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFO0lBQzdFLE1BQU0sU0FBUyxHQUFHLElBQUksd0JBQVMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUE7SUFDdEQsSUFBSSxTQUFTLENBQUMsS0FBSztRQUFFLE1BQU0sU0FBUyxDQUFDLEtBQUssQ0FBQTtJQUUxQyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQTtJQUN2QyxJQUFJLEdBQUcsR0FBYSxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUE7SUFDaEQsTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFBO0lBQzFDLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxLQUFLLENBQUE7SUFFbkQsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNqQixNQUFNLEtBQUssQ0FBQyw0REFBNEQsQ0FBQyxDQUFBO0tBQzFFO0lBRUQsTUFBTSxNQUFNLEdBQUcseUJBQU0sQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7SUFFbEQsaURBQWlEO0lBQ2pELElBQUksQ0FBQyxHQUFHLEVBQUU7UUFDUixJQUFJLEtBQUssRUFBRSxNQUFNLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLEVBQUU7WUFDaEUsR0FBRyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFBO1NBQ3BDO0tBQ0Y7SUFFRCxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUE7SUFFNUMsSUFBSSxNQUF5RCxDQUFBO0lBQzdELFFBQVEsSUFBSSxFQUFFO1FBQ1osS0FBSyxLQUFLO1lBQ1IsTUFBTSxHQUFHLE1BQU0sUUFBUSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUE7WUFDM0MsTUFBSztRQUNQLEtBQUssS0FBSztZQUNSLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUE7WUFDbkMsTUFBSztRQUNQO1lBQ0UsTUFBTSxLQUFLLENBQUMsaUJBQWlCLElBQUksRUFBRSxDQUFDLENBQUE7S0FDdkM7SUFFRCxNQUFNLFFBQVEsR0FBRztRQUNmLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRTtLQUNqQixDQUFBO0lBRUQsT0FBTyx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUE7QUFDOUMsQ0FBQyxDQUFBO0FBekNZLFFBQUEsT0FBTyxXQXlDbkI7QUFFRCxNQUFNLFFBQVEsR0FBRyxLQUFLLEVBQUUsR0FBYSxFQUFFLEtBQWEsRUFBRSxNQUFZLEVBQUUsRUFBRTtJQUNwRSxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBRTlCLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDMUIsSUFBSSxLQUFLLEVBQUUsTUFBTSxLQUFLLElBQUksTUFBTSxFQUFFO1FBQ2hDLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUE7S0FDcEM7SUFFRCxPQUFPLG1CQUFXLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFBO0FBQ2pDLENBQUMsQ0FBQTtBQUVELE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxHQUFhLEVBQUUsTUFBWSxFQUFFLEVBQUU7SUFDcEQsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7UUFDM0IsR0FBRyxHQUFHLFNBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7S0FDckI7SUFFRCxNQUFNLE1BQU0sR0FBRyxNQUFNLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQVUsQ0FBQyxDQUFBO0lBQy9DLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQTtBQUNyQixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0ZXIsIFZhbGlkYXRvciB9IGZyb20gJ0BjaGFpbmxpbmsvZWEtYm9vdHN0cmFwJ1xuaW1wb3J0IHsgQ29uZmlnLCBFeGVjdXRlV2l0aENvbmZpZyB9IGZyb20gJ0BjaGFpbmxpbmsvdHlwZXMnXG5pbXBvcnQgeyBJUEZTIH0gZnJvbSAnaXBmcy1jb3JlLXR5cGVzJ1xuaW1wb3J0IHsgY3JlYXRlIH0gZnJvbSAnaXBmcy1odHRwLWNsaWVudCdcbmltcG9ydCB7IENJRCB9IGZyb20gJ211bHRpZm9ybWF0cy9jaWQnXG5pbXBvcnQgeyBBc3luY1JldHVyblR5cGUgfSBmcm9tICd0eXBlLWZlc3QnXG5pbXBvcnQgeyBkZXNlcmlhbGl6ZSB9IGZyb20gJy4uL2NvZGVjJ1xuZXhwb3J0IHR5cGUgSVBGU1BhdGggPSBzdHJpbmcgfCBDSURcbmV4cG9ydCB7IENJRCB9XG5cbmV4cG9ydCBjb25zdCBzdXBwb3J0ZWRFbmRwb2ludHMgPSBbJ3JlYWQnXVxuXG5jb25zdCBjdXN0b21QYXJhbXMgPSB7XG4gIGNpZDogZmFsc2UsXG4gIGlwbnM6IGZhbHNlLFxuICBjb2RlYzogZmFsc2UsXG4gIHR5cGU6IGZhbHNlLFxufVxuXG5leHBvcnQgY29uc3QgZXhlY3V0ZTogRXhlY3V0ZVdpdGhDb25maWc8Q29uZmlnPiA9IGFzeW5jIChyZXF1ZXN0LCBfLCBjb25maWcpID0+IHtcbiAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihyZXF1ZXN0LCBjdXN0b21QYXJhbXMpXG4gIGlmICh2YWxpZGF0b3IuZXJyb3IpIHRocm93IHZhbGlkYXRvci5lcnJvclxuXG4gIGNvbnN0IGpvYlJ1bklEID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5pZFxuICBsZXQgY2lkOiBJUEZTUGF0aCA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5jaWRcbiAgY29uc3QgaXBucyA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5pcG5zXG4gIGNvbnN0IHR5cGUgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmRhdGEudHlwZSB8fCAncmF3J1xuXG4gIGlmICghY2lkICYmICFpcG5zKSB7XG4gICAgdGhyb3cgRXJyb3IoJ1JlcXVlc3QgaXMgbWlzc2luZyBib3RoIFwiY2lkXCIgYW5kIFwiaXBuc1wiLiBPbmUgaXMgcmVxdWlyZWQuJylcbiAgfVxuXG4gIGNvbnN0IGNsaWVudCA9IGNyZWF0ZSh7IHVybDogY29uZmlnLmFwaS5iYXNlVVJMIH0pXG5cbiAgLy8gSWYgQ0lEIGlzIG5vdCBpbmNsdWRlZCwgd2UgdHJ5IHRvIHJlc29sdmUgSVBOU1xuICBpZiAoIWNpZCkge1xuICAgIGZvciBhd2FpdCAoY29uc3QgaXBmc0NpZCBvZiBjbGllbnQubmFtZS5yZXNvbHZlKGAvaXBucy8ke2lwbnN9YCkpIHtcbiAgICAgIGNpZCA9IGlwZnNDaWQucmVwbGFjZSgnL2lwZnMvJywgJycpXG4gICAgfVxuICB9XG5cbiAgY29uc3QgY29kZWMgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmRhdGEuY29kZWNcblxuICBsZXQgcmVzdWx0OiBBc3luY1JldHVyblR5cGU8dHlwZW9mIHJlYWRGaWxlIHwgdHlwZW9mIHJlYWREYWc+XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3Jhdyc6XG4gICAgICByZXN1bHQgPSBhd2FpdCByZWFkRmlsZShjaWQsIGNvZGVjLCBjbGllbnQpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2RhZyc6XG4gICAgICByZXN1bHQgPSBhd2FpdCByZWFkRGFnKGNpZCwgY2xpZW50KVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgRXJyb3IoYFVua25vd24gdHlwZTogJHt0eXBlfWApXG4gIH1cblxuICBjb25zdCByZXNwb25zZSA9IHtcbiAgICBkYXRhOiB7IHJlc3VsdCB9LFxuICB9XG5cbiAgcmV0dXJuIFJlcXVlc3Rlci5zdWNjZXNzKGpvYlJ1bklELCByZXNwb25zZSlcbn1cblxuY29uc3QgcmVhZEZpbGUgPSBhc3luYyAoY2lkOiBJUEZTUGF0aCwgY29kZWM6IHN0cmluZywgY2xpZW50OiBJUEZTKSA9PiB7XG4gIGNvbnN0IHN0cmVhbSA9IGNsaWVudC5jYXQoY2lkKVxuXG4gIGxldCBkYXRhID0gQnVmZmVyLmZyb20oW10pXG4gIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2Ygc3RyZWFtKSB7XG4gICAgZGF0YSA9IEJ1ZmZlci5jb25jYXQoW2RhdGEsIGNodW5rXSlcbiAgfVxuXG4gIHJldHVybiBkZXNlcmlhbGl6ZShkYXRhLCBjb2RlYylcbn1cblxuY29uc3QgcmVhZERhZyA9IGFzeW5jIChjaWQ6IElQRlNQYXRoLCBjbGllbnQ6IElQRlMpID0+IHtcbiAgaWYgKHR5cGVvZiBjaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgY2lkID0gQ0lELnBhcnNlKGNpZClcbiAgfVxuXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNsaWVudC5kYWcuZ2V0KGNpZCBhcyBDSUQpXG4gIHJldHVybiByZXN1bHQudmFsdWVcbn1cbiJdfQ==