"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const ipfs_http_client_1 = require("ipfs-http-client");
const codec_1 = require("../codec");
exports.supportedEndpoints = ['write'];
const customParams = {
    data: true,
    codec: false,
    cidVersion: false,
    type: false,
    format: false,
    hashAlg: false,
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, customParams);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const data = validator.validated.data.data;
    const codec = validator.validated.data.codec;
    const cidVersion = validator.validated.data.cidVersion || 0;
    const type = validator.validated.data.type || 'raw';
    const format = validator.validated.data.format || 'dag-cbor';
    const hashAlg = validator.validated.data.hashAlg || 'sha2-256';
    const client = ipfs_http_client_1.create({ url: config.api.baseURL });
    const options = { cidVersion };
    let cid = '';
    switch (type) {
        case 'raw':
            cid = await putFile(codec_1.serialize(data, codec), client, options);
            break;
        case 'dag':
            cid = await putDag(data, client, { ...options, format, hashAlg });
            break;
        default:
            throw Error('Unknown type');
    }
    const response = {
        data: { result: cid, cid },
    };
    return ea_bootstrap_1.Requester.success(jobRunID, response);
};
exports.execute = execute;
const putFile = async (data, client, options) => {
    const { cid } = await client.add(data, options);
    return cid.toString();
};
const putDag = async (node, client, options) => client.dag.put(node, options);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JpdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZW5kcG9pbnQvd3JpdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQThEO0FBRTlELHVEQUF5RDtBQUN6RCxvQ0FBb0M7QUFHdkIsUUFBQSxrQkFBa0IsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBRTNDLE1BQU0sWUFBWSxHQUFHO0lBQ25CLElBQUksRUFBRSxJQUFJO0lBQ1YsS0FBSyxFQUFFLEtBQUs7SUFDWixVQUFVLEVBQUUsS0FBSztJQUNqQixJQUFJLEVBQUUsS0FBSztJQUNYLE1BQU0sRUFBRSxLQUFLO0lBQ2IsT0FBTyxFQUFFLEtBQUs7Q0FDZixDQUFBO0FBRU0sTUFBTSxPQUFPLEdBQThCLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFO0lBQzdFLE1BQU0sU0FBUyxHQUFHLElBQUksd0JBQVMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUE7SUFDdEQsSUFBSSxTQUFTLENBQUMsS0FBSztRQUFFLE1BQU0sU0FBUyxDQUFDLEtBQUssQ0FBQTtJQUUxQyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQTtJQUN2QyxNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUE7SUFDMUMsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFBO0lBQzVDLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLENBQUE7SUFDM0QsTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQTtJQUNuRCxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksVUFBVSxDQUFBO0lBQzVELE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxVQUFVLENBQUE7SUFFOUQsTUFBTSxNQUFNLEdBQUcseUJBQU0sQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7SUFDbEQsTUFBTSxPQUFPLEdBQUcsRUFBRSxVQUFVLEVBQUUsQ0FBQTtJQUU5QixJQUFJLEdBQUcsR0FBYSxFQUFFLENBQUE7SUFDdEIsUUFBUSxJQUFJLEVBQUU7UUFDWixLQUFLLEtBQUs7WUFDUixHQUFHLEdBQUcsTUFBTSxPQUFPLENBQUMsaUJBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFBO1lBQzVELE1BQUs7UUFDUCxLQUFLLEtBQUs7WUFDUixHQUFHLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxFQUFFLEdBQUcsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFBO1lBQ2pFLE1BQUs7UUFDUDtZQUNFLE1BQU0sS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFBO0tBQzlCO0lBRUQsTUFBTSxRQUFRLEdBQUc7UUFDZixJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRTtLQUMzQixDQUFBO0lBRUQsT0FBTyx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUE7QUFDOUMsQ0FBQyxDQUFBO0FBaENZLFFBQUEsT0FBTyxXQWdDbkI7QUFFRCxNQUFNLE9BQU8sR0FBRyxLQUFLLEVBQ25CLElBQXlCLEVBQ3pCLE1BQXNCLEVBQ3RCLE9BQTRCLEVBQzVCLEVBQUU7SUFDRixNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsTUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUMvQyxPQUFPLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtBQUN2QixDQUFDLENBQUE7QUFFRCxNQUFNLE1BQU0sR0FBRyxLQUFLLEVBQ2xCLElBQXlCLEVBQ3pCLE1BQXNCLEVBQ3RCLE9BQTRCLEVBQ1QsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3RlciwgVmFsaWRhdG9yIH0gZnJvbSAnQGNoYWlubGluay9lYS1ib290c3RyYXAnXG5pbXBvcnQgeyBFeGVjdXRlV2l0aENvbmZpZywgQ29uZmlnIH0gZnJvbSAnQGNoYWlubGluay90eXBlcydcbmltcG9ydCB7IGNyZWF0ZSwgSVBGU0hUVFBDbGllbnQgfSBmcm9tICdpcGZzLWh0dHAtY2xpZW50J1xuaW1wb3J0IHsgc2VyaWFsaXplIH0gZnJvbSAnLi4vY29kZWMnXG5pbXBvcnQgeyBJUEZTUGF0aCB9IGZyb20gJy4vcmVhZCdcblxuZXhwb3J0IGNvbnN0IHN1cHBvcnRlZEVuZHBvaW50cyA9IFsnd3JpdGUnXVxuXG5jb25zdCBjdXN0b21QYXJhbXMgPSB7XG4gIGRhdGE6IHRydWUsXG4gIGNvZGVjOiBmYWxzZSxcbiAgY2lkVmVyc2lvbjogZmFsc2UsXG4gIHR5cGU6IGZhbHNlLFxuICBmb3JtYXQ6IGZhbHNlLFxuICBoYXNoQWxnOiBmYWxzZSxcbn1cblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGU6IEV4ZWN1dGVXaXRoQ29uZmlnPENvbmZpZz4gPSBhc3luYyAocmVxdWVzdCwgXywgY29uZmlnKSA9PiB7XG4gIGNvbnN0IHZhbGlkYXRvciA9IG5ldyBWYWxpZGF0b3IocmVxdWVzdCwgY3VzdG9tUGFyYW1zKVxuICBpZiAodmFsaWRhdG9yLmVycm9yKSB0aHJvdyB2YWxpZGF0b3IuZXJyb3JcblxuICBjb25zdCBqb2JSdW5JRCA9IHZhbGlkYXRvci52YWxpZGF0ZWQuaWRcbiAgY29uc3QgZGF0YSA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5kYXRhXG4gIGNvbnN0IGNvZGVjID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLmNvZGVjXG4gIGNvbnN0IGNpZFZlcnNpb24gPSB2YWxpZGF0b3IudmFsaWRhdGVkLmRhdGEuY2lkVmVyc2lvbiB8fCAwXG4gIGNvbnN0IHR5cGUgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmRhdGEudHlwZSB8fCAncmF3J1xuICBjb25zdCBmb3JtYXQgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmRhdGEuZm9ybWF0IHx8ICdkYWctY2JvcidcbiAgY29uc3QgaGFzaEFsZyA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5oYXNoQWxnIHx8ICdzaGEyLTI1NidcblxuICBjb25zdCBjbGllbnQgPSBjcmVhdGUoeyB1cmw6IGNvbmZpZy5hcGkuYmFzZVVSTCB9KVxuICBjb25zdCBvcHRpb25zID0geyBjaWRWZXJzaW9uIH1cblxuICBsZXQgY2lkOiBJUEZTUGF0aCA9ICcnXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3Jhdyc6XG4gICAgICBjaWQgPSBhd2FpdCBwdXRGaWxlKHNlcmlhbGl6ZShkYXRhLCBjb2RlYyksIGNsaWVudCwgb3B0aW9ucylcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnZGFnJzpcbiAgICAgIGNpZCA9IGF3YWl0IHB1dERhZyhkYXRhLCBjbGllbnQsIHsgLi4ub3B0aW9ucywgZm9ybWF0LCBoYXNoQWxnIH0pXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBFcnJvcignVW5rbm93biB0eXBlJylcbiAgfVxuXG4gIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgIGRhdGE6IHsgcmVzdWx0OiBjaWQsIGNpZCB9LFxuICB9XG5cbiAgcmV0dXJuIFJlcXVlc3Rlci5zdWNjZXNzKGpvYlJ1bklELCByZXNwb25zZSlcbn1cblxuY29uc3QgcHV0RmlsZSA9IGFzeW5jIChcbiAgZGF0YTogc3RyaW5nIHwgVWludDhBcnJheSxcbiAgY2xpZW50OiBJUEZTSFRUUENsaWVudCxcbiAgb3B0aW9uczogUmVjb3JkPHN0cmluZywgYW55PixcbikgPT4ge1xuICBjb25zdCB7IGNpZCB9ID0gYXdhaXQgY2xpZW50LmFkZChkYXRhLCBvcHRpb25zKVxuICByZXR1cm4gY2lkLnRvU3RyaW5nKClcbn1cblxuY29uc3QgcHV0RGFnID0gYXN5bmMgKFxuICBub2RlOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICBjbGllbnQ6IElQRlNIVFRQQ2xpZW50LFxuICBvcHRpb25zOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuKTogUHJvbWlzZTxJUEZTUGF0aD4gPT4gY2xpZW50LmRhZy5wdXQobm9kZSwgb3B0aW9ucylcbiJdfQ==