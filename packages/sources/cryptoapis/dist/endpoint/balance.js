"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExecute = exports.inputParameters = exports.supportedEndpoints = void 0;
const ethers_1 = require("ethers");
const ea_factories_1 = require("@chainlink/ea-factories");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
exports.supportedEndpoints = ['balance'];
exports.inputParameters = ea_factories_1.balance.inputParameters;
const getBalanceURI = (address, chain, coin) => {
    if (chain === 'testnet')
        chain = ea_bootstrap_1.Requester.toVendorName(coin, config_1.TESTNET_BLOCKCHAINS) || chain;
    return `/v1/bc/${coin}/${chain}/address/${address}`;
};
const getBalance = async (account, config) => {
    const options = {
        ...config.api,
        url: getBalanceURI(account.address, account.chain, account.coin),
    };
    const response = await ea_bootstrap_1.Requester.request(options);
    // Each BTC has 8 decimal places
    const balance = ethers_1.ethers.utils.parseUnits(response.data.payload.balance, 8).toString();
    return {
        payload: response.data,
        result: [{ ...account, balance }],
    };
};
const isSupported = (coin, chain) => config_1.isChainType(chain) && config_1.isCoinType(coin);
const makeExecute = (config) => ea_factories_1.balance.make({ ...config, getBalance, isSupported });
exports.makeExecute = makeExecute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFsYW5jZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbmRwb2ludC9iYWxhbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1DQUErQjtBQUMvQiwwREFBaUQ7QUFDakQsMERBQW1EO0FBRW5ELHNDQUF3RTtBQUUzRCxRQUFBLGtCQUFrQixHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7QUFFaEMsUUFBQSxlQUFlLEdBQUcsc0JBQU8sQ0FBQyxlQUFlLENBQUE7QUFFdEQsTUFBTSxhQUFhLEdBQUcsQ0FBQyxPQUFlLEVBQUUsS0FBYSxFQUFFLElBQVksRUFBRSxFQUFFO0lBQ3JFLElBQUksS0FBSyxLQUFLLFNBQVM7UUFBRSxLQUFLLEdBQUcsd0JBQVMsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLDRCQUFtQixDQUFDLElBQUksS0FBSyxDQUFBO0lBQzNGLE9BQU8sVUFBVSxJQUFJLElBQUksS0FBSyxZQUFZLE9BQU8sRUFBRSxDQUFBO0FBQ3JELENBQUMsQ0FBQTtBQUVELE1BQU0sVUFBVSxHQUF1QixLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO0lBQy9ELE1BQU0sT0FBTyxHQUFHO1FBQ2QsR0FBRyxNQUFNLENBQUMsR0FBRztRQUNiLEdBQUcsRUFBRSxhQUFhLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsS0FBZSxFQUFFLE9BQU8sQ0FBQyxJQUFjLENBQUM7S0FDckYsQ0FBQTtJQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sd0JBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDakQsZ0NBQWdDO0lBQ2hDLE1BQU0sT0FBTyxHQUFHLGVBQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtJQUVwRixPQUFPO1FBQ0wsT0FBTyxFQUFFLFFBQVEsQ0FBQyxJQUFJO1FBQ3RCLE1BQU0sRUFBRSxDQUFDLEVBQUUsR0FBRyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUM7S0FDbEMsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUVELE1BQU0sV0FBVyxHQUF3QixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLG9CQUFXLENBQUMsS0FBSyxDQUFDLElBQUksbUJBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUV6RixNQUFNLFdBQVcsR0FBMkIsQ0FBQyxNQUFlLEVBQUUsRUFBRSxDQUNyRSxzQkFBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsTUFBTSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFBO0FBRHpDLFFBQUEsV0FBVyxlQUM4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV0aGVycyB9IGZyb20gJ2V0aGVycydcbmltcG9ydCB7IGJhbGFuY2UgfSBmcm9tICdAY2hhaW5saW5rL2VhLWZhY3RvcmllcydcbmltcG9ydCB7IFJlcXVlc3RlciB9IGZyb20gJ0BjaGFpbmxpbmsvZWEtYm9vdHN0cmFwJ1xuaW1wb3J0IHsgQ29uZmlnLCBFeGVjdXRlRmFjdG9yeSB9IGZyb20gJ0BjaGFpbmxpbmsvdHlwZXMnXG5pbXBvcnQgeyBpc0NvaW5UeXBlLCBpc0NoYWluVHlwZSwgVEVTVE5FVF9CTE9DS0NIQUlOUyB9IGZyb20gJy4uL2NvbmZpZydcblxuZXhwb3J0IGNvbnN0IHN1cHBvcnRlZEVuZHBvaW50cyA9IFsnYmFsYW5jZSddXG5cbmV4cG9ydCBjb25zdCBpbnB1dFBhcmFtZXRlcnMgPSBiYWxhbmNlLmlucHV0UGFyYW1ldGVyc1xuXG5jb25zdCBnZXRCYWxhbmNlVVJJID0gKGFkZHJlc3M6IHN0cmluZywgY2hhaW46IHN0cmluZywgY29pbjogc3RyaW5nKSA9PiB7XG4gIGlmIChjaGFpbiA9PT0gJ3Rlc3RuZXQnKSBjaGFpbiA9IFJlcXVlc3Rlci50b1ZlbmRvck5hbWUoY29pbiwgVEVTVE5FVF9CTE9DS0NIQUlOUykgfHwgY2hhaW5cbiAgcmV0dXJuIGAvdjEvYmMvJHtjb2lufS8ke2NoYWlufS9hZGRyZXNzLyR7YWRkcmVzc31gXG59XG5cbmNvbnN0IGdldEJhbGFuY2U6IGJhbGFuY2UuR2V0QmFsYW5jZSA9IGFzeW5jIChhY2NvdW50LCBjb25maWcpID0+IHtcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAuLi5jb25maWcuYXBpLFxuICAgIHVybDogZ2V0QmFsYW5jZVVSSShhY2NvdW50LmFkZHJlc3MsIGFjY291bnQuY2hhaW4gYXMgc3RyaW5nLCBhY2NvdW50LmNvaW4gYXMgc3RyaW5nKSxcbiAgfVxuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgUmVxdWVzdGVyLnJlcXVlc3Qob3B0aW9ucylcbiAgLy8gRWFjaCBCVEMgaGFzIDggZGVjaW1hbCBwbGFjZXNcbiAgY29uc3QgYmFsYW5jZSA9IGV0aGVycy51dGlscy5wYXJzZVVuaXRzKHJlc3BvbnNlLmRhdGEucGF5bG9hZC5iYWxhbmNlLCA4KS50b1N0cmluZygpXG5cbiAgcmV0dXJuIHtcbiAgICBwYXlsb2FkOiByZXNwb25zZS5kYXRhLFxuICAgIHJlc3VsdDogW3sgLi4uYWNjb3VudCwgYmFsYW5jZSB9XSxcbiAgfVxufVxuXG5jb25zdCBpc1N1cHBvcnRlZDogYmFsYW5jZS5Jc1N1cHBvcnRlZCA9IChjb2luLCBjaGFpbikgPT4gaXNDaGFpblR5cGUoY2hhaW4pICYmIGlzQ29pblR5cGUoY29pbilcblxuZXhwb3J0IGNvbnN0IG1ha2VFeGVjdXRlOiBFeGVjdXRlRmFjdG9yeTxDb25maWc+ID0gKGNvbmZpZz86IENvbmZpZykgPT5cbiAgYmFsYW5jZS5tYWtlKHsgLi4uY29uZmlnLCBnZXRCYWxhbmNlLCBpc1N1cHBvcnRlZCB9KVxuIl19