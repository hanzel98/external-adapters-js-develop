"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeConfig = exports.TESTNET_BLOCKCHAINS = exports.isChainType = exports.CHAIN_KEYS = exports.isCoinType = exports.COIN_KEYS = exports.DEFAULT_ENDPOINT = exports.NAME = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
exports.NAME = 'CRYPTOAPIS';
exports.DEFAULT_ENDPOINT = 'crypto';
exports.COIN_KEYS = ['btc', 'eth', 'etc', 'bch', 'ltc', 'dash', 'doge', 'btcv', 'zil'];
function isCoinType(key) {
    return exports.COIN_KEYS.includes(key);
}
exports.isCoinType = isCoinType;
exports.CHAIN_KEYS = ['mainnet', 'testnet'];
function isChainType(key) {
    return exports.CHAIN_KEYS.includes(key);
}
exports.isChainType = isChainType;
exports.TESTNET_BLOCKCHAINS = {
    eth: 'rinkeby',
    etc: 'mordor',
};
const makeConfig = (prefix) => {
    const config = ea_bootstrap_1.Requester.getDefaultConfig(prefix, true);
    config.api.headers['X-API-Key'] = config.apiKey;
    config.api.baseURL = 'https://api.cryptoapis.io';
    config.defaultEndpoint = exports.DEFAULT_ENDPOINT;
    return config;
};
exports.makeConfig = makeConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwREFBbUQ7QUFHdEMsUUFBQSxJQUFJLEdBQUcsWUFBWSxDQUFBO0FBRW5CLFFBQUEsZ0JBQWdCLEdBQUcsUUFBUSxDQUFBO0FBRTNCLFFBQUEsU0FBUyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQVUsQ0FBQTtBQUVwRyxTQUFnQixVQUFVLENBQUMsR0FBVztJQUNwQyxPQUFPLGlCQUFTLENBQUMsUUFBUSxDQUFDLEdBQWUsQ0FBQyxDQUFBO0FBQzVDLENBQUM7QUFGRCxnQ0FFQztBQUNZLFFBQUEsVUFBVSxHQUFHLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBVSxDQUFBO0FBRXpELFNBQWdCLFdBQVcsQ0FBQyxHQUFXO0lBQ3JDLE9BQU8sa0JBQVUsQ0FBQyxRQUFRLENBQUMsR0FBZ0IsQ0FBQyxDQUFBO0FBQzlDLENBQUM7QUFGRCxrQ0FFQztBQUVZLFFBQUEsbUJBQW1CLEdBQWlDO0lBQy9ELEdBQUcsRUFBRSxTQUFTO0lBQ2QsR0FBRyxFQUFFLFFBQVE7Q0FDZCxDQUFBO0FBRU0sTUFBTSxVQUFVLEdBQUcsQ0FBQyxNQUFlLEVBQVUsRUFBRTtJQUNwRCxNQUFNLE1BQU0sR0FBRyx3QkFBUyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUN2RCxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFBO0lBQy9DLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxHQUFHLDJCQUEyQixDQUFBO0lBQ2hELE1BQU0sQ0FBQyxlQUFlLEdBQUcsd0JBQWdCLENBQUE7SUFDekMsT0FBTyxNQUFNLENBQUE7QUFDZixDQUFDLENBQUE7QUFOWSxRQUFBLFVBQVUsY0FNdEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0ZXIgfSBmcm9tICdAY2hhaW5saW5rL2VhLWJvb3RzdHJhcCdcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJ0BjaGFpbmxpbmsvdHlwZXMnXG5cbmV4cG9ydCBjb25zdCBOQU1FID0gJ0NSWVBUT0FQSVMnXG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0VORFBPSU5UID0gJ2NyeXB0bydcblxuZXhwb3J0IGNvbnN0IENPSU5fS0VZUyA9IFsnYnRjJywgJ2V0aCcsICdldGMnLCAnYmNoJywgJ2x0YycsICdkYXNoJywgJ2RvZ2UnLCAnYnRjdicsICd6aWwnXSBhcyBjb25zdFxuZXhwb3J0IHR5cGUgQ29pblR5cGUgPSB0eXBlb2YgQ09JTl9LRVlTW251bWJlcl1cbmV4cG9ydCBmdW5jdGlvbiBpc0NvaW5UeXBlKGtleTogc3RyaW5nKToga2V5IGlzIENvaW5UeXBlIHtcbiAgcmV0dXJuIENPSU5fS0VZUy5pbmNsdWRlcyhrZXkgYXMgQ29pblR5cGUpXG59XG5leHBvcnQgY29uc3QgQ0hBSU5fS0VZUyA9IFsnbWFpbm5ldCcsICd0ZXN0bmV0J10gYXMgY29uc3RcbmV4cG9ydCB0eXBlIENoYWluVHlwZSA9IHR5cGVvZiBDSEFJTl9LRVlTW251bWJlcl1cbmV4cG9ydCBmdW5jdGlvbiBpc0NoYWluVHlwZShrZXk6IHN0cmluZyk6IGtleSBpcyBDaGFpblR5cGUge1xuICByZXR1cm4gQ0hBSU5fS0VZUy5pbmNsdWRlcyhrZXkgYXMgQ2hhaW5UeXBlKVxufVxuXG5leHBvcnQgY29uc3QgVEVTVE5FVF9CTE9DS0NIQUlOUzogeyBbdGlja2VyOiBzdHJpbmddOiBzdHJpbmcgfSA9IHtcbiAgZXRoOiAncmlua2VieScsXG4gIGV0YzogJ21vcmRvcicsXG59XG5cbmV4cG9ydCBjb25zdCBtYWtlQ29uZmlnID0gKHByZWZpeD86IHN0cmluZyk6IENvbmZpZyA9PiB7XG4gIGNvbnN0IGNvbmZpZyA9IFJlcXVlc3Rlci5nZXREZWZhdWx0Q29uZmlnKHByZWZpeCwgdHJ1ZSlcbiAgY29uZmlnLmFwaS5oZWFkZXJzWydYLUFQSS1LZXknXSA9IGNvbmZpZy5hcGlLZXlcbiAgY29uZmlnLmFwaS5iYXNlVVJMID0gJ2h0dHBzOi8vYXBpLmNyeXB0b2FwaXMuaW8nXG4gIGNvbmZpZy5kZWZhdWx0RW5kcG9pbnQgPSBERUZBVUxUX0VORFBPSU5UXG4gIHJldHVybiBjb25maWdcbn1cbiJdfQ==