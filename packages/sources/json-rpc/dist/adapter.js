"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExecute = exports.execute = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("./config");
const inputParams = {
    url: false,
    method: false,
    params: false,
    requestId: false,
};
// Export function to integrate with Chainlink node
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, inputParams);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const url = config.RPC_URL || validator.validated.data.url || config_1.DEFAULT_BASE_URL;
    const method = validator.validated.data.method || '';
    const params = validator.validated.data.params;
    const requestId = validator.validated.data.requestId || jobRunID;
    const data = {
        id: requestId,
        jsonrpc: '2.0',
        method,
        params,
    };
    const options = {
        ...config.api,
        url,
        method: 'POST',
        headers: {
            ...config.api.headers,
            'Content-Type': 'application/json',
        },
        // Remove undefined values
        data: JSON.parse(JSON.stringify(data)),
    };
    const response = await ea_bootstrap_1.Requester.request(options);
    if (response.status >= 400)
        throw response.data.error;
    return ea_bootstrap_1.Requester.success(request.id, response);
};
exports.execute = execute;
const makeExecute = (config) => {
    return async (request, context) => exports.execute(request, context, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUE4RDtBQUU5RCxxQ0FBdUU7QUFFdkUsTUFBTSxXQUFXLEdBQUc7SUFDbEIsR0FBRyxFQUFFLEtBQUs7SUFDVixNQUFNLEVBQUUsS0FBSztJQUNiLE1BQU0sRUFBRSxLQUFLO0lBQ2IsU0FBUyxFQUFFLEtBQUs7Q0FDakIsQ0FBQTtBQUVELG1EQUFtRDtBQUM1QyxNQUFNLE9BQU8sR0FBc0MsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUU7SUFDckYsTUFBTSxTQUFTLEdBQUcsSUFBSSx3QkFBUyxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQTtJQUNyRCxJQUFJLFNBQVMsQ0FBQyxLQUFLO1FBQUUsTUFBTSxTQUFTLENBQUMsS0FBSyxDQUFBO0lBRTFDLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFBO0lBQ3ZDLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxPQUFPLElBQUksU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLHlCQUFnQixDQUFBO0lBQzlFLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUE7SUFDcEQsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFBO0lBQzlDLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxRQUFRLENBQUE7SUFFaEUsTUFBTSxJQUFJLEdBQUc7UUFDWCxFQUFFLEVBQUUsU0FBUztRQUNiLE9BQU8sRUFBRSxLQUFLO1FBQ2QsTUFBTTtRQUNOLE1BQU07S0FDUCxDQUFBO0lBRUQsTUFBTSxPQUFPLEdBQUc7UUFDZCxHQUFHLE1BQU0sQ0FBQyxHQUFHO1FBQ2IsR0FBRztRQUNILE1BQU0sRUFBRSxNQUFhO1FBQ3JCLE9BQU8sRUFBRTtZQUNQLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPO1lBQ3JCLGNBQWMsRUFBRSxrQkFBa0I7U0FDbkM7UUFDRCwwQkFBMEI7UUFDMUIsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN2QyxDQUFBO0lBRUQsTUFBTSxRQUFRLEdBQUcsTUFBTSx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNqRCxJQUFJLFFBQVEsQ0FBQyxNQUFNLElBQUksR0FBRztRQUFFLE1BQU0sUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUE7SUFFckQsT0FBTyx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0FBQ2hELENBQUMsQ0FBQTtBQWpDWSxRQUFBLE9BQU8sV0FpQ25CO0FBRU0sTUFBTSxXQUFXLEdBQTJCLENBQUMsTUFBTSxFQUFFLEVBQUU7SUFDNUQsT0FBTyxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsZUFBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxJQUFJLG1CQUFVLEVBQUUsQ0FBQyxDQUFBO0FBQ3RGLENBQUMsQ0FBQTtBQUZZLFFBQUEsV0FBVyxlQUV2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3RlciwgVmFsaWRhdG9yIH0gZnJvbSAnQGNoYWlubGluay9lYS1ib290c3RyYXAnXG5pbXBvcnQgeyBDb25maWcsIEV4ZWN1dGVGYWN0b3J5LCBFeGVjdXRlV2l0aENvbmZpZyB9IGZyb20gJ0BjaGFpbmxpbmsvdHlwZXMnXG5pbXBvcnQgeyBERUZBVUxUX0JBU0VfVVJMLCBFeHRlbmRlZENvbmZpZywgbWFrZUNvbmZpZyB9IGZyb20gJy4vY29uZmlnJ1xuXG5jb25zdCBpbnB1dFBhcmFtcyA9IHtcbiAgdXJsOiBmYWxzZSxcbiAgbWV0aG9kOiBmYWxzZSxcbiAgcGFyYW1zOiBmYWxzZSxcbiAgcmVxdWVzdElkOiBmYWxzZSxcbn1cblxuLy8gRXhwb3J0IGZ1bmN0aW9uIHRvIGludGVncmF0ZSB3aXRoIENoYWlubGluayBub2RlXG5leHBvcnQgY29uc3QgZXhlY3V0ZTogRXhlY3V0ZVdpdGhDb25maWc8RXh0ZW5kZWRDb25maWc+ID0gYXN5bmMgKHJlcXVlc3QsIF8sIGNvbmZpZykgPT4ge1xuICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgVmFsaWRhdG9yKHJlcXVlc3QsIGlucHV0UGFyYW1zKVxuICBpZiAodmFsaWRhdG9yLmVycm9yKSB0aHJvdyB2YWxpZGF0b3IuZXJyb3JcblxuICBjb25zdCBqb2JSdW5JRCA9IHZhbGlkYXRvci52YWxpZGF0ZWQuaWRcbiAgY29uc3QgdXJsID0gY29uZmlnLlJQQ19VUkwgfHwgdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLnVybCB8fCBERUZBVUxUX0JBU0VfVVJMXG4gIGNvbnN0IG1ldGhvZCA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5tZXRob2QgfHwgJydcbiAgY29uc3QgcGFyYW1zID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLnBhcmFtc1xuICBjb25zdCByZXF1ZXN0SWQgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmRhdGEucmVxdWVzdElkIHx8IGpvYlJ1bklEXG5cbiAgY29uc3QgZGF0YSA9IHtcbiAgICBpZDogcmVxdWVzdElkLFxuICAgIGpzb25ycGM6ICcyLjAnLFxuICAgIG1ldGhvZCxcbiAgICBwYXJhbXMsXG4gIH1cblxuICBjb25zdCBvcHRpb25zID0ge1xuICAgIC4uLmNvbmZpZy5hcGksXG4gICAgdXJsLFxuICAgIG1ldGhvZDogJ1BPU1QnIGFzIGFueSxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAuLi5jb25maWcuYXBpLmhlYWRlcnMsXG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgIH0sXG4gICAgLy8gUmVtb3ZlIHVuZGVmaW5lZCB2YWx1ZXNcbiAgICBkYXRhOiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGRhdGEpKSxcbiAgfVxuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgUmVxdWVzdGVyLnJlcXVlc3Qob3B0aW9ucylcbiAgaWYgKHJlc3BvbnNlLnN0YXR1cyA+PSA0MDApIHRocm93IHJlc3BvbnNlLmRhdGEuZXJyb3JcblxuICByZXR1cm4gUmVxdWVzdGVyLnN1Y2Nlc3MocmVxdWVzdC5pZCwgcmVzcG9uc2UpXG59XG5cbmV4cG9ydCBjb25zdCBtYWtlRXhlY3V0ZTogRXhlY3V0ZUZhY3Rvcnk8Q29uZmlnPiA9IChjb25maWcpID0+IHtcbiAgcmV0dXJuIGFzeW5jIChyZXF1ZXN0LCBjb250ZXh0KSA9PiBleGVjdXRlKHJlcXVlc3QsIGNvbnRleHQsIGNvbmZpZyB8fCBtYWtlQ29uZmlnKCkpXG59XG4iXX0=