"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeWSHandler = exports.makeExecute = exports.endpointSelector = exports.execute = void 0;
const tslib_1 = require("tslib");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("./config");
const endpoints = tslib_1.__importStar(require("./endpoint"));
const execute = async (request, context, config) => {
    return ea_bootstrap_1.Builder.buildSelector(request, context, config, endpoints);
};
exports.execute = execute;
const endpointSelector = (request) => ea_bootstrap_1.Builder.selectEndpoint(request, config_1.makeConfig(), endpoints);
exports.endpointSelector = endpointSelector;
const makeExecute = (config) => {
    return async (request, context) => exports.execute(request, context, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
const makeWSHandler = (config) => {
    const getPair = (input) => {
        const validator = new ea_bootstrap_1.Validator(input, endpoints.crypto.inputParameters, {}, false);
        if (validator.error)
            return;
        const base = validator.validated.data.base.toUpperCase();
        const quote = validator.validated.data.quote.toUpperCase();
        const endpoint = input.data.endpoint;
        return endpoints.forex.supportedEndpoints.indexOf(endpoint) !== -1
            ? `${base}${quote}`
            : `${base}/${quote}`;
    };
    const getSubscription = (request, pair) => {
        if (!pair)
            return;
        return { request, ccy: pair };
    };
    const isForexEndpoint = (endpoint) => endpoints.forex.supportedEndpoints.indexOf(endpoint) !== -1;
    const getPairFieldFromNCFXResponse = (endpoint) => isForexEndpoint(endpoint) ? 'ccy' : 'currencyPair';
    return () => {
        const defaultConfig = config || config_1.makeConfig();
        return {
            connection: {
                getUrl: async (input) => {
                    const endpoint = input.data.endpoint;
                    if (isForexEndpoint(endpoint)) {
                        return `${defaultConfig.adapterSpecificParams?.forexDefaultBaseWSUrl}/spotdata`;
                    }
                    return `${defaultConfig.api.baseWebsocketURL}/cryptodata`;
                },
            },
            noHttp: true,
            subscribe: (input) => getSubscription('subscribe', getPair(input)),
            unsubscribe: (input) => getSubscription('unsubscribe', getPair(input)),
            subsFromMessage: (message, subscriptionMsg, input) => {
                if (Array.isArray(message) && message.length > 0) {
                    const pairField = getPairFieldFromNCFXResponse(input.data.endpoint);
                    const pairMessage = message.find((m) => m[pairField] === subscriptionMsg.ccy);
                    if (!pairMessage)
                        return;
                    return getSubscription('subscribe', `${pairMessage.currencyPair || pairMessage.ccy}`);
                }
                return getSubscription('subscribe', `${message}`);
            },
            isError: (message) => Number(message.TYPE) > 400 && Number(message.TYPE) < 900,
            filter: (message) => {
                return Array.isArray(message) && message.length > 0;
            },
            toResponse: (message, input) => {
                const pair = getPair(input);
                const pairMessage = message.find((m) => m[getPairFieldFromNCFXResponse(input.data.endpoint)] === pair);
                if (!pairMessage) {
                    throw new Error(`${pair} not found in message`);
                }
                const endpoint = input.data.endpoint;
                const resultField = isForexEndpoint(endpoint) ? 'rate' : 'mid';
                const result = ea_bootstrap_1.Requester.validateResultNumber(pairMessage, [resultField]);
                return ea_bootstrap_1.Requester.success('1', { data: { ...pairMessage, result } }, defaultConfig.verbose);
            },
            onConnect: (input) => {
                const endpoint = input.data.endpoint;
                const username = isForexEndpoint(endpoint)
                    ? defaultConfig.adapterSpecificParams?.forexWSUsername
                    : defaultConfig.api.auth.username;
                const password = isForexEndpoint(endpoint)
                    ? defaultConfig.adapterSpecificParams?.forexWSPassword
                    : defaultConfig.api.auth.password;
                return {
                    request: 'login',
                    username,
                    password,
                };
            },
        };
    };
};
exports.makeWSHandler = makeWSHandler;
//# sourceMappingURL=data:application/json;base64,