"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.endpointResultPaths = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
// Call this endpont to execute the highestLowest function
exports.supportedEndpoints = ['highest-lowest'];
exports.endpointResultPaths = {};
const customError = (data) => data.Response === 'Error';
exports.inputParameters = {}; // Not needed
// Validate that some values were received
const validateResponse = (response) => {
    const accounts = response.data;
    if (!accounts || accounts.length === 0) {
        throw Error('There are no accounts with balance');
    }
};
// Validate the correct values in the result path
const validateResultPath = (resultPath = []) => {
    const allowedPath1 = ['lowest', 'highest'];
    // Validates that the path value is in the expected values
    if (resultPath[0] && !allowedPath1.includes(resultPath[0])) {
        throw Error(`Path is invalid, this property does not exist: ${resultPath[0]}`);
    }
};
const calculateHighestLowest = (results) => {
    // Calculates the highest and lowest values obtained in the query response
    // Assign the first value as highest and lowest to compare later
    let highest = results[0];
    let lowest = results[0];
    results.forEach((element) => {
        if (element.balance > highest.balance)
            highest = element; // Compares previous highest with current
        if (element.balance < lowest.balance)
            lowest = element; // Compares previous lowest with current
    });
    return [highest, lowest];
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    // No special url or query needed to call the API
    const options = {
        ...config.api,
        baseURL: config_1.DEFAULT_API_ENDPOINT,
        url: '',
    };
    const response = await ea_bootstrap_1.Requester.request(options, customError);
    validateResponse(response);
    const results = response.data;
    const [highest, lowest] = calculateHighestLowest(results);
    // Properties highest/lowest include address and balance
    response.data = { highest, lowest }; // Insert results in the response
    const resultPath = validator.validated.data.resultPath;
    // const resultPath = ['highest'];
    validateResultPath(resultPath);
    const result = response.data[resultPath[0]].address;
    return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, result), config.verbose);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGVzdExvd2VzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbmRwb2ludC9oaWdoZXN0TG93ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUE4RDtBQUU5RCxzQ0FBaUQ7QUFFakQsMERBQTBEO0FBQzdDLFFBQUEsa0JBQWtCLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0FBRXZDLFFBQUEsbUJBQW1CLEdBQUcsRUFBRSxDQUFBO0FBRXJDLE1BQU0sV0FBVyxHQUFHLENBQUMsSUFBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLE9BQU8sQ0FBQTtBQUUvQyxRQUFBLGVBQWUsR0FBb0IsRUFBRSxDQUFBLENBQUMsYUFBYTtBQUVoRSwwQ0FBMEM7QUFDMUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLFFBQTBCLEVBQUUsRUFBRTtJQUN0RCxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFBO0lBQzlCLElBQUksQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDdEMsTUFBTSxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQTtLQUNsRDtBQUNILENBQUMsQ0FBQTtBQUVELGlEQUFpRDtBQUNqRCxNQUFNLGtCQUFrQixHQUFHLENBQUMsYUFBdUIsRUFBRSxFQUFFLEVBQUU7SUFDdkQsTUFBTSxZQUFZLEdBQWEsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDckQsMERBQTBEO0lBQzFELElBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQztRQUN4RCxNQUFNLEtBQUssQ0FBQyxrREFBa0QsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNoRjtBQUNILENBQUMsQ0FBQTtBQU9ELE1BQU0sc0JBQXNCLEdBQUcsQ0FBQyxPQUF5QixFQUFvQixFQUFFO0lBQzdFLDBFQUEwRTtJQUMxRSxnRUFBZ0U7SUFDaEUsSUFBSSxPQUFPLEdBQW1CLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN4QyxJQUFJLE1BQU0sR0FBbUIsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3ZDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFzQixFQUFFLEVBQUU7UUFDdkMsSUFBRyxPQUFPLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPO1lBQUUsT0FBTyxHQUFHLE9BQU8sQ0FBQSxDQUFDLHlDQUF5QztRQUNqRyxJQUFHLE9BQU8sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU87WUFBRSxNQUFNLEdBQUcsT0FBTyxDQUFBLENBQUUsd0NBQXdDO0lBQ25HLENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUMxQixDQUFDLENBQUE7QUFFTSxNQUFNLE9BQU8sR0FBOEIsS0FBSyxFQUFFLE9BQVksRUFBRSxDQUFNLEVBQUUsTUFBVyxFQUFFLEVBQUU7SUFDNUYsTUFBTSxTQUFTLEdBQUcsSUFBSSx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ3hDLElBQUksU0FBUyxDQUFDLEtBQUs7UUFBRSxNQUFNLFNBQVMsQ0FBQyxLQUFLLENBQUE7SUFFMUMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUE7SUFDdkMsaURBQWlEO0lBQ2pELE1BQU0sT0FBTyxHQUFHO1FBQ2QsR0FBRyxNQUFNLENBQUMsR0FBRztRQUNiLE9BQU8sRUFBRSw2QkFBb0I7UUFDN0IsR0FBRyxFQUFFLEVBQUU7S0FDUixDQUFBO0lBRUQsTUFBTSxRQUFRLEdBQUcsTUFBTSx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUE7SUFDOUQsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUE7SUFFMUIsTUFBTSxPQUFPLEdBQXFCLFFBQVEsQ0FBQyxJQUFJLENBQUE7SUFDL0MsTUFBTSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsR0FBRyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMxRCx3REFBd0Q7SUFDeEQsUUFBUSxDQUFDLElBQUksR0FBRyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQSxDQUFDLGlDQUFpQztJQUVyRSxNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUE7SUFDdEQsa0NBQWtDO0lBQ2xDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQzlCLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFBO0lBRW5ELE9BQU8sd0JBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLHdCQUFTLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUE7QUFFNUYsQ0FBQyxDQUFBO0FBM0JZLFFBQUEsT0FBTyxXQTJCbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0ZXIsIFZhbGlkYXRvciB9IGZyb20gJ0BjaGFpbmxpbmsvZWEtYm9vdHN0cmFwJ1xuaW1wb3J0IHsgQ29uZmlnLCBFeGVjdXRlV2l0aENvbmZpZywgSW5wdXRQYXJhbWV0ZXJzIH0gZnJvbSAnQGNoYWlubGluay90eXBlcydcbmltcG9ydCB7IERFRkFVTFRfQVBJX0VORFBPSU5UIH0gZnJvbSAnLi4vY29uZmlnJztcblxuLy8gQ2FsbCB0aGlzIGVuZHBvbnQgdG8gZXhlY3V0ZSB0aGUgaGlnaGVzdExvd2VzdCBmdW5jdGlvblxuZXhwb3J0IGNvbnN0IHN1cHBvcnRlZEVuZHBvaW50cyA9IFsnaGlnaGVzdC1sb3dlc3QnXSBcblxuZXhwb3J0IGNvbnN0IGVuZHBvaW50UmVzdWx0UGF0aHMgPSB7fVxuXG5jb25zdCBjdXN0b21FcnJvciA9IChkYXRhOiBhbnkpID0+IGRhdGEuUmVzcG9uc2UgPT09ICdFcnJvcidcblxuZXhwb3J0IGNvbnN0IGlucHV0UGFyYW1ldGVyczogSW5wdXRQYXJhbWV0ZXJzID0ge30gLy8gTm90IG5lZWRlZFxuXG4vLyBWYWxpZGF0ZSB0aGF0IHNvbWUgdmFsdWVzIHdlcmUgcmVjZWl2ZWRcbmNvbnN0IHZhbGlkYXRlUmVzcG9uc2UgPSAocmVzcG9uc2U6IHtkYXRhOiBudW1iZXJbXX0pID0+IHtcbiAgY29uc3QgYWNjb3VudHMgPSByZXNwb25zZS5kYXRhXG4gIGlmICghYWNjb3VudHMgfHwgYWNjb3VudHMubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgRXJyb3IoJ1RoZXJlIGFyZSBubyBhY2NvdW50cyB3aXRoIGJhbGFuY2UnKVxuICB9XG59XG5cbi8vIFZhbGlkYXRlIHRoZSBjb3JyZWN0IHZhbHVlcyBpbiB0aGUgcmVzdWx0IHBhdGhcbmNvbnN0IHZhbGlkYXRlUmVzdWx0UGF0aCA9IChyZXN1bHRQYXRoOiBzdHJpbmdbXSA9IFtdKSA9PiB7XG4gIGNvbnN0IGFsbG93ZWRQYXRoMTogc3RyaW5nW10gPSBbJ2xvd2VzdCcsICdoaWdoZXN0J107XG4gIC8vIFZhbGlkYXRlcyB0aGF0IHRoZSBwYXRoIHZhbHVlIGlzIGluIHRoZSBleHBlY3RlZCB2YWx1ZXNcbiAgaWYocmVzdWx0UGF0aFswXSAmJiAhYWxsb3dlZFBhdGgxLmluY2x1ZGVzKHJlc3VsdFBhdGhbMF0pKXtcbiAgICB0aHJvdyBFcnJvcihgUGF0aCBpcyBpbnZhbGlkLCB0aGlzIHByb3BlcnR5IGRvZXMgbm90IGV4aXN0OiAke3Jlc3VsdFBhdGhbMF19YCk7XG4gIH1cbn1cblxuaW50ZXJmYWNlIElBY2NvdW50UmVzdWx0IHtcbiAgYWRkcmVzczogc3RyaW5nLFxuICBiYWxhbmNlOiBudW1iZXJcbn1cblxuY29uc3QgY2FsY3VsYXRlSGlnaGVzdExvd2VzdCA9IChyZXN1bHRzOiBJQWNjb3VudFJlc3VsdFtdKTogSUFjY291bnRSZXN1bHRbXSA9PntcbiAgLy8gQ2FsY3VsYXRlcyB0aGUgaGlnaGVzdCBhbmQgbG93ZXN0IHZhbHVlcyBvYnRhaW5lZCBpbiB0aGUgcXVlcnkgcmVzcG9uc2VcbiAgLy8gQXNzaWduIHRoZSBmaXJzdCB2YWx1ZSBhcyBoaWdoZXN0IGFuZCBsb3dlc3QgdG8gY29tcGFyZSBsYXRlclxuICBsZXQgaGlnaGVzdDogSUFjY291bnRSZXN1bHQgPSByZXN1bHRzWzBdXG4gIGxldCBsb3dlc3Q6IElBY2NvdW50UmVzdWx0ID0gcmVzdWx0c1swXVxuICByZXN1bHRzLmZvckVhY2goKGVsZW1lbnQ6SUFjY291bnRSZXN1bHQpID0+IHtcbiAgICAgIGlmKGVsZW1lbnQuYmFsYW5jZSA+IGhpZ2hlc3QuYmFsYW5jZSkgaGlnaGVzdCA9IGVsZW1lbnQgLy8gQ29tcGFyZXMgcHJldmlvdXMgaGlnaGVzdCB3aXRoIGN1cnJlbnRcbiAgICAgIGlmKGVsZW1lbnQuYmFsYW5jZSA8IGxvd2VzdC5iYWxhbmNlKSBsb3dlc3QgPSBlbGVtZW50ICAvLyBDb21wYXJlcyBwcmV2aW91cyBsb3dlc3Qgd2l0aCBjdXJyZW50XG4gIH0pO1xuICByZXR1cm4gW2hpZ2hlc3QsIGxvd2VzdF1cbn1cblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGU6IEV4ZWN1dGVXaXRoQ29uZmlnPENvbmZpZz4gPSBhc3luYyAocmVxdWVzdDogYW55LCBfOiBhbnksIGNvbmZpZzogYW55KSA9PiB7XG4gIGNvbnN0IHZhbGlkYXRvciA9IG5ldyBWYWxpZGF0b3IocmVxdWVzdClcbiAgaWYgKHZhbGlkYXRvci5lcnJvcikgdGhyb3cgdmFsaWRhdG9yLmVycm9yXG5cbiAgY29uc3Qgam9iUnVuSUQgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmlkXG4gIC8vIE5vIHNwZWNpYWwgdXJsIG9yIHF1ZXJ5IG5lZWRlZCB0byBjYWxsIHRoZSBBUElcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAuLi5jb25maWcuYXBpLFxuICAgIGJhc2VVUkw6IERFRkFVTFRfQVBJX0VORFBPSU5ULFxuICAgIHVybDogJycsXG4gIH1cblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IFJlcXVlc3Rlci5yZXF1ZXN0KG9wdGlvbnMsIGN1c3RvbUVycm9yKVxuICB2YWxpZGF0ZVJlc3BvbnNlKHJlc3BvbnNlKVxuXG4gIGNvbnN0IHJlc3VsdHM6IElBY2NvdW50UmVzdWx0W10gPSByZXNwb25zZS5kYXRhXG4gIGNvbnN0IFtoaWdoZXN0LCBsb3dlc3RdID0gY2FsY3VsYXRlSGlnaGVzdExvd2VzdChyZXN1bHRzKTtcbiAgLy8gUHJvcGVydGllcyBoaWdoZXN0L2xvd2VzdCBpbmNsdWRlIGFkZHJlc3MgYW5kIGJhbGFuY2VcbiAgcmVzcG9uc2UuZGF0YSA9IHsgaGlnaGVzdCwgbG93ZXN0IH0gLy8gSW5zZXJ0IHJlc3VsdHMgaW4gdGhlIHJlc3BvbnNlXG5cbiAgY29uc3QgcmVzdWx0UGF0aCA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5yZXN1bHRQYXRoXG4gIC8vIGNvbnN0IHJlc3VsdFBhdGggPSBbJ2hpZ2hlc3QnXTtcbiAgdmFsaWRhdGVSZXN1bHRQYXRoKHJlc3VsdFBhdGgpXG4gIGNvbnN0IHJlc3VsdCA9IHJlc3BvbnNlLmRhdGFbcmVzdWx0UGF0aFswXV0uYWRkcmVzc1xuXG4gIHJldHVybiBSZXF1ZXN0ZXIuc3VjY2Vzcyhqb2JSdW5JRCwgUmVxdWVzdGVyLndpdGhSZXN1bHQocmVzcG9uc2UsIHJlc3VsdCksIGNvbmZpZy52ZXJib3NlKVxuXG59Il19