"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.endpointResultPaths = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
// Call this endpont to execute the highestLowest function
exports.supportedEndpoints = ['highest-lowest'];
exports.endpointResultPaths = {};
const customError = (data) => data.Response === 'Error';
exports.inputParameters = {}; // Not needed
// Validate that some values were received
const validateResponse = (response) => {
    const accounts = response.data;
    if (!accounts || accounts.length === 0) {
        throw Error('There are no accounts with balance');
    }
};
// Validate the correct values in the result path
const validateResultPath = (resultPath = []) => {
    const allowedPath1 = ['lowest', 'highest'];
    // Validates that the path value is in the expected values
    if (resultPath[0] && !allowedPath1.includes(resultPath[0])) {
        throw Error(`Path is invalid, this property does not exist: ${resultPath[0]}`);
    }
};
const includeSplittedAddress = (account) => {
    if (!account) {
        throw Error(`Unable to find values`);
    }
    const accountCopy = { ...account };
    const accountAddressLength = accountCopy.address.length;
    const halfElementIndex = Math.round(accountAddressLength / 2);
    accountCopy.address1 = accountCopy.address.substr(0, halfElementIndex);
    accountCopy.address2 = accountCopy.address.substr(halfElementIndex, accountAddressLength - 1);
    return accountCopy;
};
const calculateHighestLowest = (results) => {
    // Calculates the highest and lowest values obtained in the query response
    // Assign the first value as highest and lowest to compare later
    let highest = results[0];
    let lowest = results[0];
    results.forEach((element) => {
        if (element.balance > highest.balance)
            highest = element; // Compares previous highest with current
        if (element.balance < lowest.balance)
            lowest = element; // Compares previous lowest with current
    });
    return [highest, lowest];
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    // No special url or query needed to call the API
    const options = {
        ...config.api,
        baseURL: config_1.DEFAULT_API_ENDPOINT,
        url: '',
    };
    const response = await ea_bootstrap_1.Requester.request(options, customError);
    validateResponse(response);
    const results = response.data;
    let [highest, lowest] = calculateHighestLowest(results);
    highest = includeSplittedAddress(highest);
    lowest = includeSplittedAddress(lowest);
    // Properties highest/lowest include address and balance
    response.data = { highest, lowest }; // Insert results in the response
    const resultPath = validator.validated.data.resultPath;
    let result = { highest, lowest };
    if (resultPath) { // Result path was specified
        validateResultPath(resultPath);
        result = response.data[resultPath[0]].address; // Formatting the output
        return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, result), config.verbose);
    }
    return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, result), config.verbose);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,