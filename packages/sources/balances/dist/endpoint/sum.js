"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.endpointResultPaths = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
// Call this endpont to execute the sum function
exports.supportedEndpoints = ['sum'];
exports.endpointResultPaths = {};
const customError = (data) => data.Response === 'Error';
exports.inputParameters = {}; // Not needed
// Validate that some values were received
const validateResponse = (response) => {
    const accounts = response.data;
    if (!accounts || accounts.length === 0) {
        throw Error('There are no accounts with balance');
    }
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    // No special url or query needed to call the API
    const options = {
        ...config.api,
        baseURL: config_1.DEFAULT_API_ENDPOINT,
        url: '',
    };
    const response = await ea_bootstrap_1.Requester.request(options, customError);
    validateResponse(response);
    const results = response.data;
    // Sum all the balances obtained in the query response
    const total = results.reduce((accumulator, current) => accumulator + current.balance, 0);
    response.data = {
        total,
    };
    const result = ea_bootstrap_1.Requester.validateResultNumber(response.data, ['total']);
    return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, result), config.verbose);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VuZHBvaW50L3N1bS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwREFBOEQ7QUFFOUQsc0NBQWlEO0FBRWpELGdEQUFnRDtBQUNuQyxRQUFBLGtCQUFrQixHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7QUFFNUIsUUFBQSxtQkFBbUIsR0FBRyxFQUFFLENBQUE7QUFFckMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxJQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFBO0FBRS9DLFFBQUEsZUFBZSxHQUFvQixFQUFFLENBQUEsQ0FBQyxhQUFhO0FBRWhFLDBDQUEwQztBQUMxQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsUUFBMEIsRUFBRSxFQUFFO0lBQ3RELE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUE7SUFDOUIsSUFBSSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN0QyxNQUFNLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFBO0tBQ2xEO0FBQ0gsQ0FBQyxDQUFBO0FBTU0sTUFBTSxPQUFPLEdBQThCLEtBQUssRUFBRSxPQUFZLEVBQUUsQ0FBSyxFQUFFLE1BQVUsRUFBRSxFQUFFO0lBQzFGLE1BQU0sU0FBUyxHQUFHLElBQUksd0JBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUN4QyxJQUFJLFNBQVMsQ0FBQyxLQUFLO1FBQUUsTUFBTSxTQUFTLENBQUMsS0FBSyxDQUFBO0lBRzFDLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFBO0lBQ3ZDLGlEQUFpRDtJQUNqRCxNQUFNLE9BQU8sR0FBRztRQUNkLEdBQUcsTUFBTSxDQUFDLEdBQUc7UUFDYixPQUFPLEVBQUUsNkJBQW9CO1FBQzdCLEdBQUcsRUFBRSxFQUFFO0tBQ1IsQ0FBQTtJQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sd0JBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFBO0lBQzlELGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQzFCLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFDOUIsc0RBQXNEO0lBQ3RELE1BQU0sS0FBSyxHQUFXLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFtQixFQUFFLE9BQXVCLEVBQUUsRUFBRSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pILFFBQVEsQ0FBQyxJQUFJLEdBQUc7UUFDZCxLQUFLO0tBQ04sQ0FBQTtJQUNELE1BQU0sTUFBTSxHQUFHLHdCQUFTLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7SUFDdkUsT0FBTyx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsd0JBQVMsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUM1RixDQUFDLENBQUE7QUF2QlksUUFBQSxPQUFPLFdBdUJuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3RlciwgVmFsaWRhdG9yIH0gZnJvbSAnQGNoYWlubGluay9lYS1ib290c3RyYXAnXG5pbXBvcnQgeyBDb25maWcsIEV4ZWN1dGVXaXRoQ29uZmlnLCBJbnB1dFBhcmFtZXRlcnMgfSBmcm9tICdAY2hhaW5saW5rL3R5cGVzJ1xuaW1wb3J0IHsgREVGQVVMVF9BUElfRU5EUE9JTlQgfSBmcm9tICcuLi9jb25maWcnO1xuXG4vLyBDYWxsIHRoaXMgZW5kcG9udCB0byBleGVjdXRlIHRoZSBzdW0gZnVuY3Rpb25cbmV4cG9ydCBjb25zdCBzdXBwb3J0ZWRFbmRwb2ludHMgPSBbJ3N1bSddIFxuXG5leHBvcnQgY29uc3QgZW5kcG9pbnRSZXN1bHRQYXRocyA9IHt9XG5cbmNvbnN0IGN1c3RvbUVycm9yID0gKGRhdGE6IGFueSkgPT4gZGF0YS5SZXNwb25zZSA9PT0gJ0Vycm9yJ1xuXG5leHBvcnQgY29uc3QgaW5wdXRQYXJhbWV0ZXJzOiBJbnB1dFBhcmFtZXRlcnMgPSB7fSAvLyBOb3QgbmVlZGVkXG5cbi8vIFZhbGlkYXRlIHRoYXQgc29tZSB2YWx1ZXMgd2VyZSByZWNlaXZlZFxuY29uc3QgdmFsaWRhdGVSZXNwb25zZSA9IChyZXNwb25zZToge2RhdGE6IG51bWJlcltdfSkgPT4ge1xuICBjb25zdCBhY2NvdW50cyA9IHJlc3BvbnNlLmRhdGFcbiAgaWYgKCFhY2NvdW50cyB8fCBhY2NvdW50cy5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBFcnJvcignVGhlcmUgYXJlIG5vIGFjY291bnRzIHdpdGggYmFsYW5jZScpXG4gIH1cbn1cblxuaW50ZXJmYWNlIElBY2NvdW50UmVzdWx0IHtcbiAgYWRkcmVzczogc3RyaW5nLFxuICBiYWxhbmNlOiBudW1iZXJcbn1cbmV4cG9ydCBjb25zdCBleGVjdXRlOiBFeGVjdXRlV2l0aENvbmZpZzxDb25maWc+ID0gYXN5bmMgKHJlcXVlc3Q6IGFueSwgXzphbnksIGNvbmZpZzphbnkpID0+IHtcbiAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihyZXF1ZXN0KVxuICBpZiAodmFsaWRhdG9yLmVycm9yKSB0aHJvdyB2YWxpZGF0b3IuZXJyb3JcblxuXG4gIGNvbnN0IGpvYlJ1bklEID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5pZFxuICAvLyBObyBzcGVjaWFsIHVybCBvciBxdWVyeSBuZWVkZWQgdG8gY2FsbCB0aGUgQVBJXG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgLi4uY29uZmlnLmFwaSxcbiAgICBiYXNlVVJMOiBERUZBVUxUX0FQSV9FTkRQT0lOVCxcbiAgICB1cmw6ICcnLFxuICB9XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBSZXF1ZXN0ZXIucmVxdWVzdChvcHRpb25zLCBjdXN0b21FcnJvcilcbiAgdmFsaWRhdGVSZXNwb25zZShyZXNwb25zZSlcbiAgY29uc3QgcmVzdWx0cyA9IHJlc3BvbnNlLmRhdGE7XG4gIC8vIFN1bSBhbGwgdGhlIGJhbGFuY2VzIG9idGFpbmVkIGluIHRoZSBxdWVyeSByZXNwb25zZVxuICBjb25zdCB0b3RhbDogbnVtYmVyID0gcmVzdWx0cy5yZWR1Y2UoKGFjY3VtdWxhdG9yOiBudW1iZXIsIGN1cnJlbnQ6IElBY2NvdW50UmVzdWx0KSA9PiBhY2N1bXVsYXRvciArIGN1cnJlbnQuYmFsYW5jZSwgMCk7XG4gIHJlc3BvbnNlLmRhdGEgPSB7XG4gICAgdG90YWwsXG4gIH1cbiAgY29uc3QgcmVzdWx0ID0gUmVxdWVzdGVyLnZhbGlkYXRlUmVzdWx0TnVtYmVyKHJlc3BvbnNlLmRhdGEsIFsndG90YWwnXSlcbiAgcmV0dXJuIFJlcXVlc3Rlci5zdWNjZXNzKGpvYlJ1bklELCBSZXF1ZXN0ZXIud2l0aFJlc3VsdChyZXNwb25zZSwgcmVzdWx0KSwgY29uZmlnLnZlcmJvc2UpXG59XG4iXX0=