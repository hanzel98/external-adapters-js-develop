"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.endpointResultPaths = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
// Call this endpont to execute the sum function
exports.supportedEndpoints = ['sum'];
exports.endpointResultPaths = {};
const customError = (data) => data.Response === 'Error';
exports.inputParameters = {}; // Not needed
// Validate that some values were received
const validateResponse = (response) => {
    const accounts = response.data;
    if (!accounts || accounts.length === 0) {
        throw Error('There are no accounts with balance');
    }
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    // No special url or query needed to call the API
    const options = {
        ...config.api,
        baseURL: config_1.DEFAULT_API_ENDPOINT,
        url: '',
    };
    const response = await ea_bootstrap_1.Requester.request(options, customError);
    validateResponse(response);
    const results = response.data;
    // Sum all the balances obtained in the query response
    const total = results.reduce((accumulator, current) => accumulator + current.balance, 0);
    response.data = {
        total,
    };
    const result = ea_bootstrap_1.Requester.validateResultNumber(response.data, ['total']);
    return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, result), config.verbose);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VuZHBvaW50L3N1bS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwREFBOEQ7QUFFOUQsc0NBQWdEO0FBRWhELGdEQUFnRDtBQUNuQyxRQUFBLGtCQUFrQixHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7QUFFNUIsUUFBQSxtQkFBbUIsR0FBRyxFQUFFLENBQUE7QUFFckMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxJQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFBO0FBRS9DLFFBQUEsZUFBZSxHQUFvQixFQUFFLENBQUEsQ0FBQyxhQUFhO0FBRWhFLDBDQUEwQztBQUMxQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsUUFBMEIsRUFBRSxFQUFFO0lBQ3RELE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUE7SUFDOUIsSUFBSSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN0QyxNQUFNLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFBO0tBQ2xEO0FBQ0gsQ0FBQyxDQUFBO0FBTU0sTUFBTSxPQUFPLEdBQThCLEtBQUssRUFBRSxPQUFZLEVBQUUsQ0FBSyxFQUFFLE1BQVUsRUFBRSxFQUFFO0lBQzFGLE1BQU0sU0FBUyxHQUFHLElBQUksd0JBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUN4QyxJQUFJLFNBQVMsQ0FBQyxLQUFLO1FBQUUsTUFBTSxTQUFTLENBQUMsS0FBSyxDQUFBO0lBRzFDLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFBO0lBQ3ZDLGlEQUFpRDtJQUNqRCxNQUFNLE9BQU8sR0FBRztRQUNkLEdBQUcsTUFBTSxDQUFDLEdBQUc7UUFDYixPQUFPLEVBQUUsNkJBQW9CO1FBQzdCLEdBQUcsRUFBRSxFQUFFO0tBQ1IsQ0FBQTtJQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sd0JBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFBO0lBQzlELGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQzFCLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUE7SUFDN0Isc0RBQXNEO0lBQ3RELE1BQU0sS0FBSyxHQUFXLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFtQixFQUFFLE9BQXVCLEVBQUUsRUFBRSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ3hILFFBQVEsQ0FBQyxJQUFJLEdBQUc7UUFDZCxLQUFLO0tBQ04sQ0FBQTtJQUNELE1BQU0sTUFBTSxHQUFHLHdCQUFTLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7SUFDdkUsT0FBTyx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsd0JBQVMsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUM1RixDQUFDLENBQUE7QUF2QlksUUFBQSxPQUFPLFdBdUJuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3RlciwgVmFsaWRhdG9yIH0gZnJvbSAnQGNoYWlubGluay9lYS1ib290c3RyYXAnXG5pbXBvcnQgeyBDb25maWcsIEV4ZWN1dGVXaXRoQ29uZmlnLCBJbnB1dFBhcmFtZXRlcnMgfSBmcm9tICdAY2hhaW5saW5rL3R5cGVzJ1xuaW1wb3J0IHsgREVGQVVMVF9BUElfRU5EUE9JTlQgfSBmcm9tICcuLi9jb25maWcnXG5cbi8vIENhbGwgdGhpcyBlbmRwb250IHRvIGV4ZWN1dGUgdGhlIHN1bSBmdW5jdGlvblxuZXhwb3J0IGNvbnN0IHN1cHBvcnRlZEVuZHBvaW50cyA9IFsnc3VtJ10gXG5cbmV4cG9ydCBjb25zdCBlbmRwb2ludFJlc3VsdFBhdGhzID0ge31cblxuY29uc3QgY3VzdG9tRXJyb3IgPSAoZGF0YTogYW55KSA9PiBkYXRhLlJlc3BvbnNlID09PSAnRXJyb3InXG5cbmV4cG9ydCBjb25zdCBpbnB1dFBhcmFtZXRlcnM6IElucHV0UGFyYW1ldGVycyA9IHt9IC8vIE5vdCBuZWVkZWRcblxuLy8gVmFsaWRhdGUgdGhhdCBzb21lIHZhbHVlcyB3ZXJlIHJlY2VpdmVkXG5jb25zdCB2YWxpZGF0ZVJlc3BvbnNlID0gKHJlc3BvbnNlOiB7ZGF0YTogbnVtYmVyW119KSA9PiB7XG4gIGNvbnN0IGFjY291bnRzID0gcmVzcG9uc2UuZGF0YVxuICBpZiAoIWFjY291bnRzIHx8IGFjY291bnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IEVycm9yKCdUaGVyZSBhcmUgbm8gYWNjb3VudHMgd2l0aCBiYWxhbmNlJylcbiAgfVxufVxuXG5pbnRlcmZhY2UgSUFjY291bnRSZXN1bHQge1xuICBhZGRyZXNzOiBzdHJpbmcsXG4gIGJhbGFuY2U6IG51bWJlclxufVxuZXhwb3J0IGNvbnN0IGV4ZWN1dGU6IEV4ZWN1dGVXaXRoQ29uZmlnPENvbmZpZz4gPSBhc3luYyAocmVxdWVzdDogYW55LCBfOmFueSwgY29uZmlnOmFueSkgPT4ge1xuICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgVmFsaWRhdG9yKHJlcXVlc3QpXG4gIGlmICh2YWxpZGF0b3IuZXJyb3IpIHRocm93IHZhbGlkYXRvci5lcnJvclxuXG5cbiAgY29uc3Qgam9iUnVuSUQgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmlkXG4gIC8vIE5vIHNwZWNpYWwgdXJsIG9yIHF1ZXJ5IG5lZWRlZCB0byBjYWxsIHRoZSBBUElcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAuLi5jb25maWcuYXBpLFxuICAgIGJhc2VVUkw6IERFRkFVTFRfQVBJX0VORFBPSU5ULFxuICAgIHVybDogJycsXG4gIH1cblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IFJlcXVlc3Rlci5yZXF1ZXN0KG9wdGlvbnMsIGN1c3RvbUVycm9yKVxuICB2YWxpZGF0ZVJlc3BvbnNlKHJlc3BvbnNlKVxuICBjb25zdCByZXN1bHRzID0gcmVzcG9uc2UuZGF0YVxuICAvLyBTdW0gYWxsIHRoZSBiYWxhbmNlcyBvYnRhaW5lZCBpbiB0aGUgcXVlcnkgcmVzcG9uc2VcbiAgY29uc3QgdG90YWw6IG51bWJlciA9IHJlc3VsdHMucmVkdWNlKChhY2N1bXVsYXRvcjogbnVtYmVyLCBjdXJyZW50OiBJQWNjb3VudFJlc3VsdCkgPT4gYWNjdW11bGF0b3IgKyBjdXJyZW50LmJhbGFuY2UsIDApXG4gIHJlc3BvbnNlLmRhdGEgPSB7XG4gICAgdG90YWwsXG4gIH1cbiAgY29uc3QgcmVzdWx0ID0gUmVxdWVzdGVyLnZhbGlkYXRlUmVzdWx0TnVtYmVyKHJlc3BvbnNlLmRhdGEsIFsndG90YWwnXSlcbiAgcmV0dXJuIFJlcXVlc3Rlci5zdWNjZXNzKGpvYlJ1bklELCBSZXF1ZXN0ZXIud2l0aFJlc3VsdChyZXNwb25zZSwgcmVzdWx0KSwgY29uZmlnLnZlcmJvc2UpXG59XG4iXX0=