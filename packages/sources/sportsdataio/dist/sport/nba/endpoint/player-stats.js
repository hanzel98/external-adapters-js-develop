"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.NAME = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const ethers_1 = require("ethers");
const luxon_1 = require("luxon");
exports.NAME = 'player-stats';
const customParams = {
    date: true,
    playerID: true,
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, customParams);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const { date, playerID } = validator.validated.data;
    const url = `/nba/stats/json/PlayerGameStatsByPlayer/${date}/${playerID}`;
    const params = {
        key: config.nbaKey,
    };
    const options = { ...config.api, params, url };
    const response = await ea_bootstrap_1.Requester.request(options);
    const d = luxon_1.DateTime.fromISO(response.data.DateTime, { zone: 'GMT' });
    const epochSeconds = d.valueOf() / 1000;
    return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, packResponse(response.data, epochSeconds)), config.verbose);
};
exports.execute = execute;
const packResponse = (response, epochS) => {
    const dataTypes = [
        'uint16',
        'uint32',
        'bool',
        'bool',
        'uint32',
        'uint8',
        'uint8',
        'uint8',
        'uint8',
        'uint8',
        'uint8',
        'uint8',
        'uint8',
        'uint8',
        'uint8',
        'uint8',
        'uint8',
        'uint8',
        'uint8',
        'uint8',
        'uint8',
        'uint16',
    ];
    const dataValues = [
        response.Season,
        epochS,
        response.HomeOrAway === 'HOME',
        response.isGameOver,
        response.GlobalGameID,
        response.FieldGoalsMade,
        response.FieldGoalsAttempted,
        response.TwoPointersMade,
        response.TwoPointersAttempted,
        response.ThreePointersMade,
        response.ThreePointersAttempted,
        response.FreeThrowsMade,
        response.FreeThrowsAttempted,
        response.OffensiveRebounds,
        response.DefensiveRebounds,
        response.Rebounds,
        response.Assists,
        response.Steals,
        response.BlockedShots,
        response.DoubleDoubles,
        response.TripleDoubles,
        response.Points,
    ];
    const packedResult = ethers_1.utils.solidityPack(dataTypes, dataValues);
    return packedResult.startsWith('0x') ? packedResult.substring(2) : packedResult;
};
//# sourceMappingURL=data:application/json;base64,