"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
exports.supportedEndpoints = ['crypto', 'ticker'];
const customError = (data) => data.Response === 'Error';
exports.inputParameters = {
    base: ['base', 'from', 'coin'],
    quote: ['quote', 'to', 'market'],
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    let base = validator.overrideSymbol(config_1.NAME);
    if (Array.isArray(base))
        base = base[0];
    const quote = validator.validated.data.quote;
    const symbol = `SPOT_${base.toUpperCase()}_${quote.toUpperCase()}`;
    const limit = '1';
    const url = `/v1/public/market_trades/`;
    const params = {
        symbol,
        limit,
    };
    const options = { ...config.api, params, url };
    const response = await ea_bootstrap_1.Requester.request(options, customError);
    const result = ea_bootstrap_1.Requester.validateResultNumber(response.data, ['rows', 0, 'executed_price']);
    return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, result), config.verbose);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J5cHRvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VuZHBvaW50L2NyeXB0by50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwREFBOEQ7QUFFOUQsc0NBQStDO0FBbUJsQyxRQUFBLGtCQUFrQixHQUFHLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0FBRXRELE1BQU0sV0FBVyxHQUFHLENBQUMsSUFBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLE9BQU8sQ0FBQTtBQUUvQyxRQUFBLGVBQWUsR0FBb0I7SUFDOUMsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUM7SUFDOUIsS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUM7Q0FDakMsQ0FBQTtBQUVNLE1BQU0sT0FBTyxHQUE4QixLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRTtJQUM3RSxNQUFNLFNBQVMsR0FBRyxJQUFJLHdCQUFTLENBQUMsT0FBTyxFQUFFLHVCQUFlLENBQUMsQ0FBQTtJQUN6RCxJQUFJLFNBQVMsQ0FBQyxLQUFLO1FBQUUsTUFBTSxTQUFTLENBQUMsS0FBSyxDQUFBO0lBRTFDLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFBO0lBQ3ZDLElBQUksSUFBSSxHQUFHLFNBQVMsQ0FBQyxjQUFjLENBQUMsYUFBVyxDQUFDLENBQUE7SUFDaEQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztRQUFFLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDdkMsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFBO0lBQzVDLE1BQU0sTUFBTSxHQUFHLFFBQVEsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLEtBQUssQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFBO0lBQ2xFLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQTtJQUNqQixNQUFNLEdBQUcsR0FBRywyQkFBMkIsQ0FBQTtJQUV2QyxNQUFNLE1BQU0sR0FBRztRQUNiLE1BQU07UUFDTixLQUFLO0tBQ04sQ0FBQTtJQUVELE1BQU0sT0FBTyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQTtJQUM5QyxNQUFNLFFBQVEsR0FBRyxNQUFNLHdCQUFTLENBQUMsT0FBTyxDQUFpQixPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUE7SUFDOUUsTUFBTSxNQUFNLEdBQUcsd0JBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUE7SUFDM0YsT0FBTyx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsd0JBQVMsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUM1RixDQUFDLENBQUE7QUFyQlksUUFBQSxPQUFPLFdBcUJuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3RlciwgVmFsaWRhdG9yIH0gZnJvbSAnQGNoYWlubGluay9lYS1ib290c3RyYXAnXG5pbXBvcnQgeyBDb25maWcsIEV4ZWN1dGVXaXRoQ29uZmlnLCBJbnB1dFBhcmFtZXRlcnMgfSBmcm9tICdAY2hhaW5saW5rL3R5cGVzJ1xuaW1wb3J0IHsgTkFNRSBhcyBBZGFwdGVyTmFtZSB9IGZyb20gJy4uL2NvbmZpZydcbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VTY2hlbWEge1xuICBkYXRhOiB7XG4gICAgc3VjY2VzczogYm9vbGVhblxuICAgIHJvd3M6IE1hcmtldFRyYWRlc1tdXG4gIH1bXVxuICBlcnJvcj86IHtcbiAgICB0eXBlOiBzdHJpbmdcbiAgICBtZXNzYWdlOiBzdHJpbmdcbiAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBNYXJrZXRUcmFkZXMge1xuICBzeW1ib2w6IHN0cmluZ1xuICBzaWRlOiBzdHJpbmdcbiAgZXhlY3V0ZWRfcHJpY2U6IG51bWJlclxuICBleGVjdXRlZF9xdWFudGl0eTogbnVtYmVyXG4gIGV4ZWN1dGVkX3RpbWVzdGFtcDogc3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCBzdXBwb3J0ZWRFbmRwb2ludHMgPSBbJ2NyeXB0bycsICd0aWNrZXInXVxuXG5jb25zdCBjdXN0b21FcnJvciA9IChkYXRhOiBhbnkpID0+IGRhdGEuUmVzcG9uc2UgPT09ICdFcnJvcidcblxuZXhwb3J0IGNvbnN0IGlucHV0UGFyYW1ldGVyczogSW5wdXRQYXJhbWV0ZXJzID0ge1xuICBiYXNlOiBbJ2Jhc2UnLCAnZnJvbScsICdjb2luJ10sXG4gIHF1b3RlOiBbJ3F1b3RlJywgJ3RvJywgJ21hcmtldCddLFxufVxuXG5leHBvcnQgY29uc3QgZXhlY3V0ZTogRXhlY3V0ZVdpdGhDb25maWc8Q29uZmlnPiA9IGFzeW5jIChyZXF1ZXN0LCBfLCBjb25maWcpID0+IHtcbiAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihyZXF1ZXN0LCBpbnB1dFBhcmFtZXRlcnMpXG4gIGlmICh2YWxpZGF0b3IuZXJyb3IpIHRocm93IHZhbGlkYXRvci5lcnJvclxuXG4gIGNvbnN0IGpvYlJ1bklEID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5pZFxuICBsZXQgYmFzZSA9IHZhbGlkYXRvci5vdmVycmlkZVN5bWJvbChBZGFwdGVyTmFtZSlcbiAgaWYgKEFycmF5LmlzQXJyYXkoYmFzZSkpIGJhc2UgPSBiYXNlWzBdXG4gIGNvbnN0IHF1b3RlID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLnF1b3RlXG4gIGNvbnN0IHN5bWJvbCA9IGBTUE9UXyR7YmFzZS50b1VwcGVyQ2FzZSgpfV8ke3F1b3RlLnRvVXBwZXJDYXNlKCl9YFxuICBjb25zdCBsaW1pdCA9ICcxJ1xuICBjb25zdCB1cmwgPSBgL3YxL3B1YmxpYy9tYXJrZXRfdHJhZGVzL2BcblxuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgc3ltYm9sLFxuICAgIGxpbWl0LFxuICB9XG5cbiAgY29uc3Qgb3B0aW9ucyA9IHsgLi4uY29uZmlnLmFwaSwgcGFyYW1zLCB1cmwgfVxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IFJlcXVlc3Rlci5yZXF1ZXN0PFJlc3BvbnNlU2NoZW1hPihvcHRpb25zLCBjdXN0b21FcnJvcilcbiAgY29uc3QgcmVzdWx0ID0gUmVxdWVzdGVyLnZhbGlkYXRlUmVzdWx0TnVtYmVyKHJlc3BvbnNlLmRhdGEsIFsncm93cycsIDAsICdleGVjdXRlZF9wcmljZSddKVxuICByZXR1cm4gUmVxdWVzdGVyLnN1Y2Nlc3Moam9iUnVuSUQsIFJlcXVlc3Rlci53aXRoUmVzdWx0KHJlc3BvbnNlLCByZXN1bHQpLCBjb25maWcudmVyYm9zZSlcbn1cbiJdfQ==