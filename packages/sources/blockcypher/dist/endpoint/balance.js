"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExecute = exports.inputParameters = exports.supportedEndpoints = void 0;
const tslib_1 = require("tslib");
const ea_factories_1 = require("@chainlink/ea-factories");
const blockcypher_1 = tslib_1.__importDefault(require("blockcypher"));
const config_1 = require("../config");
exports.supportedEndpoints = ['balance'];
exports.inputParameters = ea_factories_1.balance.inputParameters;
// rewrite chain id for bcypher
const getChainId = (coin, chain) => {
    switch (chain) {
        case 'mainnet':
            return 'main';
        case 'testnet':
            return coin === 'btc' ? 'test3' : 'test';
    }
};
const getBalance = async (account, config) => {
    const chainId = getChainId(account.coin, account.chain);
    const api = new blockcypher_1.default(account.coin, chainId, config.apiKey);
    const params = { confirmations: config.confirmations };
    const _getAddrBal = () => new Promise((resolve, reject) => {
        api.getAddrBal(account.address, params, (error, body) => error ? reject(error) : resolve(body));
    });
    const response = await _getAddrBal();
    return {
        payload: response,
        result: [{ ...account, balance: String(response.balance) }],
    };
};
const isSupported = (coin, chain) => config_1.isChainType(chain) && config_1.isCoinType(coin);
const makeExecute = (config) => ea_factories_1.balance.make({ ...config, getBalance, isSupported });
exports.makeExecute = makeExecute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFsYW5jZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbmRwb2ludC9iYWxhbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSwwREFBaUQ7QUFFakQsc0VBQWlDO0FBQ2pDLHNDQUF3RTtBQUUzRCxRQUFBLGtCQUFrQixHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7QUFFaEMsUUFBQSxlQUFlLEdBQUcsc0JBQU8sQ0FBQyxlQUFlLENBQUE7QUFldEQsK0JBQStCO0FBQy9CLE1BQU0sVUFBVSxHQUFHLENBQUMsSUFBYyxFQUFFLEtBQWdCLEVBQVUsRUFBRTtJQUM5RCxRQUFRLEtBQUssRUFBRTtRQUNiLEtBQUssU0FBUztZQUNaLE9BQU8sTUFBTSxDQUFBO1FBQ2YsS0FBSyxTQUFTO1lBQ1osT0FBTyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQTtLQUMzQztBQUNILENBQUMsQ0FBQTtBQUVELE1BQU0sVUFBVSxHQUF1QixLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO0lBQy9ELE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBZ0IsRUFBRSxPQUFPLENBQUMsS0FBa0IsQ0FBQyxDQUFBO0lBQ2hGLE1BQU0sR0FBRyxHQUFHLElBQUkscUJBQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDN0QsTUFBTSxNQUFNLEdBQUcsRUFBRSxhQUFhLEVBQUUsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFBO0lBQ3RELE1BQU0sV0FBVyxHQUFHLEdBQTRCLEVBQUUsQ0FDaEQsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDOUIsR0FBRyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFDLEtBQVksRUFBRSxJQUFvQixFQUFFLEVBQUUsQ0FDN0UsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FDdEMsQ0FBQTtJQUNILENBQUMsQ0FBQyxDQUFBO0lBRUosTUFBTSxRQUFRLEdBQUcsTUFBTSxXQUFXLEVBQUUsQ0FBQTtJQUVwQyxPQUFPO1FBQ0wsT0FBTyxFQUFFLFFBQVE7UUFDakIsTUFBTSxFQUFFLENBQUMsRUFBRSxHQUFHLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO0tBQzVELENBQUE7QUFDSCxDQUFDLENBQUE7QUFFRCxNQUFNLFdBQVcsR0FBd0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxvQkFBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLG1CQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7QUFFekYsTUFBTSxXQUFXLEdBQTJCLENBQUMsTUFBZSxFQUFFLEVBQUUsQ0FDckUsc0JBQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLE1BQU0sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQTtBQUR6QyxRQUFBLFdBQVcsZUFDOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBiYWxhbmNlIH0gZnJvbSAnQGNoYWlubGluay9lYS1mYWN0b3JpZXMnXG5pbXBvcnQgeyBDb25maWcsIEV4ZWN1dGVGYWN0b3J5IH0gZnJvbSAnQGNoYWlubGluay90eXBlcydcbmltcG9ydCBiY3lwaGVyIGZyb20gJ2Jsb2NrY3lwaGVyJ1xuaW1wb3J0IHsgQ2hhaW5UeXBlLCBDb2luVHlwZSwgaXNDaGFpblR5cGUsIGlzQ29pblR5cGUgfSBmcm9tICcuLi9jb25maWcnXG5cbmV4cG9ydCBjb25zdCBzdXBwb3J0ZWRFbmRwb2ludHMgPSBbJ2JhbGFuY2UnXVxuXG5leHBvcnQgY29uc3QgaW5wdXRQYXJhbWV0ZXJzID0gYmFsYW5jZS5pbnB1dFBhcmFtZXRlcnNcblxuLy8gYmxvY2tjeXBoZXIgcmVzcG9uc2UgdHlwZSBmb3IgYWRkciBiYWxhbmNlIHF1ZXJ5XG50eXBlIEFkZHJlc3NCYWxhbmNlID0ge1xuICBhZGRyZXNzOiBzdHJpbmdcbiAgdG90YWxfcmVjZWl2ZWQ6IG51bWJlclxuICB0b3RhbF9zZW50OiBudW1iZXJcbiAgYmFsYW5jZTogbnVtYmVyXG4gIHVuY29uZmlybWVkX2JhbGFuY2U6IG51bWJlclxuICBmaW5hbF9iYWxhbmNlOiBudW1iZXJcbiAgbl90eDogbnVtYmVyXG4gIHVuY29uZmlybWVkX25fdHg6IG51bWJlclxuICBmaW5hbF9uX3R4OiBudW1iZXJcbn1cblxuLy8gcmV3cml0ZSBjaGFpbiBpZCBmb3IgYmN5cGhlclxuY29uc3QgZ2V0Q2hhaW5JZCA9IChjb2luOiBDb2luVHlwZSwgY2hhaW46IENoYWluVHlwZSk6IHN0cmluZyA9PiB7XG4gIHN3aXRjaCAoY2hhaW4pIHtcbiAgICBjYXNlICdtYWlubmV0JzpcbiAgICAgIHJldHVybiAnbWFpbidcbiAgICBjYXNlICd0ZXN0bmV0JzpcbiAgICAgIHJldHVybiBjb2luID09PSAnYnRjJyA/ICd0ZXN0MycgOiAndGVzdCdcbiAgfVxufVxuXG5jb25zdCBnZXRCYWxhbmNlOiBiYWxhbmNlLkdldEJhbGFuY2UgPSBhc3luYyAoYWNjb3VudCwgY29uZmlnKSA9PiB7XG4gIGNvbnN0IGNoYWluSWQgPSBnZXRDaGFpbklkKGFjY291bnQuY29pbiBhcyBDb2luVHlwZSwgYWNjb3VudC5jaGFpbiBhcyBDaGFpblR5cGUpXG4gIGNvbnN0IGFwaSA9IG5ldyBiY3lwaGVyKGFjY291bnQuY29pbiwgY2hhaW5JZCwgY29uZmlnLmFwaUtleSlcbiAgY29uc3QgcGFyYW1zID0geyBjb25maXJtYXRpb25zOiBjb25maWcuY29uZmlybWF0aW9ucyB9XG4gIGNvbnN0IF9nZXRBZGRyQmFsID0gKCk6IFByb21pc2U8QWRkcmVzc0JhbGFuY2U+ID0+XG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgYXBpLmdldEFkZHJCYWwoYWNjb3VudC5hZGRyZXNzLCBwYXJhbXMsIChlcnJvcjogRXJyb3IsIGJvZHk6IEFkZHJlc3NCYWxhbmNlKSA9PlxuICAgICAgICBlcnJvciA/IHJlamVjdChlcnJvcikgOiByZXNvbHZlKGJvZHkpLFxuICAgICAgKVxuICAgIH0pXG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBfZ2V0QWRkckJhbCgpXG5cbiAgcmV0dXJuIHtcbiAgICBwYXlsb2FkOiByZXNwb25zZSxcbiAgICByZXN1bHQ6IFt7IC4uLmFjY291bnQsIGJhbGFuY2U6IFN0cmluZyhyZXNwb25zZS5iYWxhbmNlKSB9XSxcbiAgfVxufVxuXG5jb25zdCBpc1N1cHBvcnRlZDogYmFsYW5jZS5Jc1N1cHBvcnRlZCA9IChjb2luLCBjaGFpbikgPT4gaXNDaGFpblR5cGUoY2hhaW4pICYmIGlzQ29pblR5cGUoY29pbilcblxuZXhwb3J0IGNvbnN0IG1ha2VFeGVjdXRlOiBFeGVjdXRlRmFjdG9yeTxDb25maWc+ID0gKGNvbmZpZz86IENvbmZpZykgPT5cbiAgYmFsYW5jZS5tYWtlKHsgLi4uY29uZmlnLCBnZXRCYWxhbmNlLCBpc1N1cHBvcnRlZCB9KVxuIl19