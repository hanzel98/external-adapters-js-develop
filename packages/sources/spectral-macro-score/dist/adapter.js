"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExecute = exports.execute = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("./config");
const endpoint_1 = require("./endpoint");
const inputParams = {
    tokenIdInt: true,
    tickSetId: true,
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, inputParams);
    if (validator.error) {
        throw validator.error;
    }
    ea_bootstrap_1.Requester.logConfig(config);
    request.data.jobRunID = validator.validated.id;
    const endpoint = validator.validated.data.endpoint || config_1.DEFAULT_ENDPOINT;
    switch (endpoint.toLowerCase()) {
        case endpoint_1.MacroScoreAPI.MacroScoreAPIName: {
            return await endpoint_1.MacroScoreAPI.execute(request, config);
        }
        default: {
            throw new ea_bootstrap_1.AdapterError({
                jobRunID: request.data.jobRunID,
                message: `Endpoint ${endpoint} not supported.`,
                statusCode: 400,
            });
        }
    }
};
exports.execute = execute;
const makeExecute = (config) => {
    return async (request, context) => exports.execute(request, context, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUE0RTtBQUU1RSxxQ0FBOEU7QUFDOUUseUNBQTBDO0FBRTFDLE1BQU0sV0FBVyxHQUFHO0lBQ2xCLFVBQVUsRUFBRSxJQUFJO0lBQ2hCLFNBQVMsRUFBRSxJQUFJO0NBQ2hCLENBQUE7QUFFTSxNQUFNLE9BQU8sR0FBRyxLQUFLLEVBQzFCLE9BQXVCLEVBQ3ZCLENBQWlCLEVBQ2pCLE1BQTZCLEVBQ0gsRUFBRTtJQUM1QixNQUFNLFNBQVMsR0FBRyxJQUFJLHdCQUFTLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFBO0lBQ3JELElBQUksU0FBUyxDQUFDLEtBQUssRUFBRTtRQUNuQixNQUFNLFNBQVMsQ0FBQyxLQUFLLENBQUE7S0FDdEI7SUFFRCx3QkFBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUUzQixPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQTtJQUM5QyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUkseUJBQWdCLENBQUE7SUFFdEUsUUFBUSxRQUFRLENBQUMsV0FBVyxFQUFFLEVBQUU7UUFDOUIsS0FBSyx3QkFBYSxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDcEMsT0FBTyxNQUFNLHdCQUFhLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQTtTQUNwRDtRQUNELE9BQU8sQ0FBQyxDQUFDO1lBQ1AsTUFBTSxJQUFJLDJCQUFZLENBQUM7Z0JBQ3JCLFFBQVEsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVE7Z0JBQy9CLE9BQU8sRUFBRSxZQUFZLFFBQVEsaUJBQWlCO2dCQUM5QyxVQUFVLEVBQUUsR0FBRzthQUNoQixDQUFDLENBQUE7U0FDSDtLQUNGO0FBQ0gsQ0FBQyxDQUFBO0FBM0JZLFFBQUEsT0FBTyxXQTJCbkI7QUFFTSxNQUFNLFdBQVcsR0FBMEMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtJQUMzRSxPQUFPLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxlQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLElBQUksbUJBQVUsRUFBRSxDQUFDLENBQUE7QUFDdEYsQ0FBQyxDQUFBO0FBRlksUUFBQSxXQUFXLGVBRXZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdGVyLCBWYWxpZGF0b3IsIEFkYXB0ZXJFcnJvciB9IGZyb20gJ0BjaGFpbmxpbmsvZWEtYm9vdHN0cmFwJ1xuaW1wb3J0IHsgRXhlY3V0ZUZhY3RvcnksIEFkYXB0ZXJSZXF1ZXN0LCBBZGFwdGVyQ29udGV4dCwgQWRhcHRlclJlc3BvbnNlIH0gZnJvbSAnQGNoYWlubGluay90eXBlcydcbmltcG9ydCB7IG1ha2VDb25maWcsIERFRkFVTFRfRU5EUE9JTlQsIFNwZWN0cmFsQWRhcHRlckNvbmZpZyB9IGZyb20gJy4vY29uZmlnJ1xuaW1wb3J0IHsgTWFjcm9TY29yZUFQSSB9IGZyb20gJy4vZW5kcG9pbnQnXG5cbmNvbnN0IGlucHV0UGFyYW1zID0ge1xuICB0b2tlbklkSW50OiB0cnVlLFxuICB0aWNrU2V0SWQ6IHRydWUsXG59XG5cbmV4cG9ydCBjb25zdCBleGVjdXRlID0gYXN5bmMgKFxuICByZXF1ZXN0OiBBZGFwdGVyUmVxdWVzdCxcbiAgXzogQWRhcHRlckNvbnRleHQsXG4gIGNvbmZpZzogU3BlY3RyYWxBZGFwdGVyQ29uZmlnLFxuKTogUHJvbWlzZTxBZGFwdGVyUmVzcG9uc2U+ID0+IHtcbiAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihyZXF1ZXN0LCBpbnB1dFBhcmFtcylcbiAgaWYgKHZhbGlkYXRvci5lcnJvcikge1xuICAgIHRocm93IHZhbGlkYXRvci5lcnJvclxuICB9XG5cbiAgUmVxdWVzdGVyLmxvZ0NvbmZpZyhjb25maWcpXG5cbiAgcmVxdWVzdC5kYXRhLmpvYlJ1bklEID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5pZFxuICBjb25zdCBlbmRwb2ludCA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5lbmRwb2ludCB8fCBERUZBVUxUX0VORFBPSU5UXG5cbiAgc3dpdGNoIChlbmRwb2ludC50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSBNYWNyb1Njb3JlQVBJLk1hY3JvU2NvcmVBUElOYW1lOiB7XG4gICAgICByZXR1cm4gYXdhaXQgTWFjcm9TY29yZUFQSS5leGVjdXRlKHJlcXVlc3QsIGNvbmZpZylcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgdGhyb3cgbmV3IEFkYXB0ZXJFcnJvcih7XG4gICAgICAgIGpvYlJ1bklEOiByZXF1ZXN0LmRhdGEuam9iUnVuSUQsXG4gICAgICAgIG1lc3NhZ2U6IGBFbmRwb2ludCAke2VuZHBvaW50fSBub3Qgc3VwcG9ydGVkLmAsXG4gICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBtYWtlRXhlY3V0ZTogRXhlY3V0ZUZhY3Rvcnk8U3BlY3RyYWxBZGFwdGVyQ29uZmlnPiA9IChjb25maWcpID0+IHtcbiAgcmV0dXJuIGFzeW5jIChyZXF1ZXN0LCBjb250ZXh0KSA9PiBleGVjdXRlKHJlcXVlc3QsIGNvbnRleHQsIGNvbmZpZyB8fCBtYWtlQ29uZmlnKCkpXG59XG4iXX0=