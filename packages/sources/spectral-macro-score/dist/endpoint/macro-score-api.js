"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.computeTickWithScore = exports.MacroScoreAPIName = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const NFC_1 = require("../abi/NFC");
exports.MacroScoreAPIName = 'spectral-proxy';
const customError = (data) => {
    if (data.Response === 'Error')
        return true;
    return false;
};
const computeTickWithScore = (score, tickSet) => {
    for (const [index, tick] of tickSet.entries()) {
        if (tick.toNumber() > score)
            return index + 1;
    }
    return tickSet.length; // returns the last (greatest) tick
};
exports.computeTickWithScore = computeTickWithScore;
const execute = async (request, config) => {
    const options = {
        ...config.api,
        url: '/spectral-proxy',
        method: 'POST',
        data: {
            tokenInt: `${request.data.tokenIdInt}`,
        },
    };
    const tickSet = await NFC_1.getTickSet(config.nfcAddress, config.rpcUrl, request.data.tickSetId);
    const response = await ea_bootstrap_1.Requester.request(options, customError);
    const score = ea_bootstrap_1.Requester.validateResultNumber(response.data[0], ['score']);
    const tick = exports.computeTickWithScore(score, tickSet);
    return ea_bootstrap_1.Requester.success(request.data.jobRunID, ea_bootstrap_1.Requester.withResult(response, tick), config.verbose);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFjcm8tc2NvcmUtYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VuZHBvaW50L21hY3JvLXNjb3JlLWFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwREFBbUQ7QUFHbkQsb0NBQXVDO0FBRzFCLFFBQUEsaUJBQWlCLEdBQUcsZ0JBQWdCLENBQUE7QUFNakQsTUFBTSxXQUFXLEdBQUcsQ0FBQyxJQUFrQixFQUFFLEVBQUU7SUFDekMsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLE9BQU87UUFBRSxPQUFPLElBQUksQ0FBQTtJQUMxQyxPQUFPLEtBQUssQ0FBQTtBQUNkLENBQUMsQ0FBQTtBQXNCTSxNQUFNLG9CQUFvQixHQUFHLENBQUMsS0FBYSxFQUFFLE9BQW9CLEVBQVUsRUFBRTtJQUNsRixLQUFLLE1BQU0sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFO1FBQzdDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLEtBQUs7WUFBRSxPQUFPLEtBQUssR0FBRyxDQUFDLENBQUE7S0FDOUM7SUFDRCxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUEsQ0FBQyxtQ0FBbUM7QUFDM0QsQ0FBQyxDQUFBO0FBTFksUUFBQSxvQkFBb0Isd0JBS2hDO0FBRU0sTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLE9BQXNCLEVBQUUsTUFBNkIsRUFBRSxFQUFFO0lBQ3JGLE1BQU0sT0FBTyxHQUFrQjtRQUM3QixHQUFHLE1BQU0sQ0FBQyxHQUFHO1FBQ2IsR0FBRyxFQUFFLGlCQUFpQjtRQUN0QixNQUFNLEVBQUUsTUFBTTtRQUNkLElBQUksRUFBRTtZQUNKLFFBQVEsRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO1NBQ3ZDO0tBQ0YsQ0FBQTtJQUNELE1BQU0sT0FBTyxHQUFHLE1BQU0sZ0JBQVUsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUMxRixNQUFNLFFBQVEsR0FBRyxNQUFNLHdCQUFTLENBQUMsT0FBTyxDQUFrQixPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUE7SUFDL0UsTUFBTSxLQUFLLEdBQUcsd0JBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtJQUN6RSxNQUFNLElBQUksR0FBRyw0QkFBb0IsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDakQsT0FBTyx3QkFBUyxDQUFDLE9BQU8sQ0FDdEIsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQ3JCLHdCQUFTLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFDcEMsTUFBTSxDQUFDLE9BQU8sQ0FDZixDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBbEJZLFFBQUEsT0FBTyxXQWtCbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0ZXIgfSBmcm9tICdAY2hhaW5saW5rL2VhLWJvb3RzdHJhcCdcbmltcG9ydCB7IFJlcXVlc3RDb25maWcgfSBmcm9tICdAY2hhaW5saW5rL3R5cGVzJ1xuaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSAnZXRoZXJzJ1xuaW1wb3J0IHsgZ2V0VGlja1NldCB9IGZyb20gJy4uL2FiaS9ORkMnXG5pbXBvcnQgeyBTcGVjdHJhbEFkYXB0ZXJDb25maWcgfSBmcm9tICcuLi9jb25maWcnXG5cbmV4cG9ydCBjb25zdCBNYWNyb1Njb3JlQVBJTmFtZSA9ICdzcGVjdHJhbC1wcm94eSdcblxuZXhwb3J0IGludGVyZmFjZSBJQ3VzdG9tRXJyb3Ige1xuICBSZXNwb25zZTogc3RyaW5nXG59XG5cbmNvbnN0IGN1c3RvbUVycm9yID0gKGRhdGE6IElDdXN0b21FcnJvcikgPT4ge1xuICBpZiAoZGF0YS5SZXNwb25zZSA9PT0gJ0Vycm9yJykgcmV0dXJuIHRydWVcbiAgcmV0dXJuIGZhbHNlXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJlcXVlc3RJbnB1dCB7XG4gIGlkOiBzdHJpbmcgLy8gbnVtZXJpY1xuICBkYXRhOiB7XG4gICAgdG9rZW5JZEludDogc3RyaW5nIC8vIG51bWVyaWNcbiAgICB0aWNrU2V0SWQ6IHN0cmluZyAvLyBudW1lcmljXG4gICAgam9iUnVuSUQ6IHN0cmluZyAvLyBudW1lcmljXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBTY29yZVJlc3BvbnNlIHtcbiAgYWRkcmVzczogc3RyaW5nXG4gIHNjb3JlX2FhdmU6IHN0cmluZyAvLyBudW1lcmljXG4gIHNjb3JlX2NvbXA6IHN0cmluZyAvLyBudW1lcmljXG4gIHNjb3JlOiBzdHJpbmcgLy8gbnVtZXJpY1xuICB1cGRhdGVkX2F0OiBzdHJpbmcgLy8gSVNPIFVUQyBzdHJpbmdcbiAgaXNfdXBkYXRpbmdfYWF2ZTogYm9vbGVhblxuICBpc191cGRhdGluZ19jb21wOiBib29sZWFuXG4gIHJlc3VsdDogbnVtYmVyXG59XG5cbmV4cG9ydCBjb25zdCBjb21wdXRlVGlja1dpdGhTY29yZSA9IChzY29yZTogbnVtYmVyLCB0aWNrU2V0OiBCaWdOdW1iZXJbXSk6IG51bWJlciA9PiB7XG4gIGZvciAoY29uc3QgW2luZGV4LCB0aWNrXSBvZiB0aWNrU2V0LmVudHJpZXMoKSkge1xuICAgIGlmICh0aWNrLnRvTnVtYmVyKCkgPiBzY29yZSkgcmV0dXJuIGluZGV4ICsgMVxuICB9XG4gIHJldHVybiB0aWNrU2V0Lmxlbmd0aCAvLyByZXR1cm5zIHRoZSBsYXN0IChncmVhdGVzdCkgdGlja1xufVxuXG5leHBvcnQgY29uc3QgZXhlY3V0ZSA9IGFzeW5jIChyZXF1ZXN0OiBJUmVxdWVzdElucHV0LCBjb25maWc6IFNwZWN0cmFsQWRhcHRlckNvbmZpZykgPT4ge1xuICBjb25zdCBvcHRpb25zOiBSZXF1ZXN0Q29uZmlnID0ge1xuICAgIC4uLmNvbmZpZy5hcGksXG4gICAgdXJsOiAnL3NwZWN0cmFsLXByb3h5JyxcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBkYXRhOiB7XG4gICAgICB0b2tlbkludDogYCR7cmVxdWVzdC5kYXRhLnRva2VuSWRJbnR9YCxcbiAgICB9LFxuICB9XG4gIGNvbnN0IHRpY2tTZXQgPSBhd2FpdCBnZXRUaWNrU2V0KGNvbmZpZy5uZmNBZGRyZXNzLCBjb25maWcucnBjVXJsLCByZXF1ZXN0LmRhdGEudGlja1NldElkKVxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IFJlcXVlc3Rlci5yZXF1ZXN0PFNjb3JlUmVzcG9uc2VbXT4ob3B0aW9ucywgY3VzdG9tRXJyb3IpXG4gIGNvbnN0IHNjb3JlID0gUmVxdWVzdGVyLnZhbGlkYXRlUmVzdWx0TnVtYmVyKHJlc3BvbnNlLmRhdGFbMF0sIFsnc2NvcmUnXSlcbiAgY29uc3QgdGljayA9IGNvbXB1dGVUaWNrV2l0aFNjb3JlKHNjb3JlLCB0aWNrU2V0KVxuICByZXR1cm4gUmVxdWVzdGVyLnN1Y2Nlc3MoXG4gICAgcmVxdWVzdC5kYXRhLmpvYlJ1bklELFxuICAgIFJlcXVlc3Rlci53aXRoUmVzdWx0KHJlc3BvbnNlLCB0aWNrKSxcbiAgICBjb25maWcudmVyYm9zZSxcbiAgKVxufVxuIl19