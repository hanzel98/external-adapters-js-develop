"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
exports.supportedEndpoints = ['vwap'];
const customError = (data) => {
    return !data.hits || !data.hits.hits || data.hits.hits.length < 1;
};
exports.inputParameters = {
    address: true,
    debug: false,
    roundDay: false,
    start: false,
    end: false,
};
const buildVWAP = (response, debug) => {
    const sources = response.data.hits.hits.map((i) => {
        const reserve0 = i._source.args.find((j) => j.pos === 0);
        const reserve1 = i._source.args.find((j) => j.pos === 1);
        return {
            timestamp: i._source.timestamp,
            reserve0: parseInt(reserve0['value.hex'], 16),
            reserve1: parseInt(reserve1['value.hex'], 16),
        };
    });
    let overallVolume = 0;
    let sumAmountAndPrices = 0;
    for (let i = 1; i < sources.length; i++) {
        const reserve0volume = Math.abs(sources[i].reserve0 - sources[i - 1].reserve0);
        const price = sources[i].reserve0 / sources[i].reserve1;
        overallVolume += reserve0volume;
        sumAmountAndPrices += price * reserve0volume;
    }
    const vwap = sumAmountAndPrices / overallVolume;
    const resp = {
        status: response.status,
        data: { result: vwap },
    };
    if (debug)
        resp.data.raw = sources;
    return resp;
};
const cleanupDate = (inputDate, roundDay) => {
    let outputDate;
    try {
        outputDate = parseInt(inputDate);
        if (roundDay) {
            const date = new Date(outputDate);
            date.setUTCHours(0, 0, 0, 0);
            outputDate = date.getTime();
        }
    }
    catch (err) {
        return inputDate;
    }
    return outputDate;
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    // TODO: validate this is a checksum address
    const address = validator.validated.data.address;
    const debug = validator.validated.data.debug || false;
    const roundDay = validator.validated.data.roundDay || false;
    let start = validator.validated.data.start;
    let end = validator.validated.data.end;
    const url = '/ethereum/ethereum/mainnet/es/event/search/';
    end = cleanupDate(end, roundDay);
    start = cleanupDate(start, roundDay);
    if (!start && !end) {
        const date = new Date();
        date.setUTCHours(0, 0, 0, 0);
        end = date.getTime() / 1000;
        start = end - 60 * 60 * 24;
    }
    else if (!start) {
        start = end - 60 * 60 * 24;
    }
    else if (!end) {
        end = start + 60 * 60 * 24;
    }
    else if (start === end) {
        start = end - 60 * 60 * 24;
    }
    const body = {
        query: {
            bool: {
                filter: [
                    { term: { 'address.raw': address } },
                    { term: { 'event.raw': 'Sync' } },
                    {
                        range: {
                            timestamp: {
                                gte: start,
                                lte: end,
                            },
                        },
                    },
                ],
            },
        },
        sort: [{ timestamp: 'asc' }],
        size: 10000,
        _source: ['timestamp', 'args'],
    };
    const options = {
        ...config.api,
        url,
        data: body,
    };
    const response = await ea_bootstrap_1.Requester.request(options, customError);
    const vwapResp = buildVWAP(response, debug);
    return ea_bootstrap_1.Requester.success(jobRunID, vwapResp, config.verbose);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,