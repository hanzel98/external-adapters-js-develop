"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
exports.supportedEndpoints = ['crypto', 'price'];
const customError = (data) => {
    return Object.keys(data.payload).length === 0;
};
const symbolOptions = (from, to) => ({
    url: `/api/v2/market/spot/prices/pairs/${from.toLowerCase()}_${to.toLowerCase()}/latest`,
    params: { includeCrossRates: true },
});
const tokenOptions = (from, to) => ({
    url: `/api/v2/market/defi/prices/pairs/bases/${from}/quotes/${to}/latest`,
    params: {},
});
exports.inputParameters = {
    base: ['base', 'from', 'coin'],
    quote: ['quote', 'to', 'market'],
    includes: false,
};
const execute = async (input, _, config) => {
    const validator = new ea_bootstrap_1.Validator(input, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const { url, params, inverse } = getOptions(validator);
    const reqConfig = { ...config.api, params, url };
    const response = await ea_bootstrap_1.Requester.request(reqConfig, customError);
    response.data.result = ea_bootstrap_1.Requester.validateResultNumber(response.data, ['payload', 'price'], {
        inverse,
    });
    return ea_bootstrap_1.Requester.success(jobRunID, response, config.verbose);
};
exports.execute = execute;
const getOptions = (validator) => {
    const base = validator.overrideSymbol(config_1.NAME);
    const quote = validator.validated.data.quote;
    const includes = validator.validated.includes || [];
    const includeOptions = getIncludesOptions(validator, base, quote, includes);
    return includeOptions ?? symbolOptions(base, quote);
};
const getIncludesOptions = (validator, from, to, includes) => {
    const include = getIncludes(validator, from, to, includes);
    if (!include)
        return undefined;
    if (include.tokens) {
        const fromAddress = validator.overrideToken(include.from);
        const toAddress = validator.overrideToken(include.to);
        if (!fromAddress || !toAddress)
            return undefined;
        return {
            ...tokenOptions(fromAddress, toAddress),
            inverse: include.inverse,
        };
    }
    return {
        ...symbolOptions(include.from, include.to),
        inverse: include.inverse,
    };
};
const getIncludes = (validator, from, to, includes) => {
    if (includes.length === 0)
        return undefined;
    const presetIncludes = validator.overrideIncludes(config_1.NAME, from, to);
    if (presetIncludes && typeof includes[0] === 'string')
        return presetIncludes;
    else if (typeof includes[0] === 'string') {
        return {
            from,
            to: includes[0],
            inverse: false,
            tokens: true,
        };
    }
    return presetIncludes;
};
//# sourceMappingURL=data:application/json;base64,