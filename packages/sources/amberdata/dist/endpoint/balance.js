"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExecute = exports.inputParameters = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const ea_factories_1 = require("@chainlink/ea-factories");
const config_1 = require("../config");
exports.supportedEndpoints = ['balance'];
exports.inputParameters = ea_factories_1.balance.inputParameters;
const getBalanceURI = (address) => `/api/v2/addresses/${address}/account-balances/latest`;
const getBlockchainHeader = (coin) => {
    const network = ea_bootstrap_1.Requester.toVendorName(coin, config_1.BLOCKCHAINS);
    return `${network}-mainnet`;
};
const getBalance = async (account, config) => {
    const reqConfig = {
        ...config.api,
        url: getBalanceURI(account.address),
        headers: {
            ...config.api.headers,
            'x-amberdata-blockchain-id': getBlockchainHeader(account.coin),
        },
    };
    const response = await ea_bootstrap_1.Requester.request(reqConfig);
    return {
        payload: response.data,
        result: [{ ...account, balance: response.data.payload.value }],
    };
};
const isSupported = (coin, chain) => config_1.isChainType(chain) && config_1.isCoinType(coin);
const makeExecute = (config) => ea_factories_1.balance.make({ ...config, getBalance, isSupported });
exports.makeExecute = makeExecute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFsYW5jZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbmRwb2ludC9iYWxhbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUFtRDtBQUNuRCwwREFBaUQ7QUFFakQsc0NBQWdFO0FBRW5ELFFBQUEsa0JBQWtCLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUVoQyxRQUFBLGVBQWUsR0FBRyxzQkFBTyxDQUFDLGVBQWUsQ0FBQTtBQUV0RCxNQUFNLGFBQWEsR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFLENBQUMscUJBQXFCLE9BQU8sMEJBQTBCLENBQUE7QUFFakcsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLElBQWEsRUFBRSxFQUFFO0lBQzVDLE1BQU0sT0FBTyxHQUFHLHdCQUFTLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxvQkFBVyxDQUFDLENBQUE7SUFDekQsT0FBTyxHQUFHLE9BQU8sVUFBVSxDQUFBO0FBQzdCLENBQUMsQ0FBQTtBQUVELE1BQU0sVUFBVSxHQUF1QixLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO0lBQy9ELE1BQU0sU0FBUyxHQUFRO1FBQ3JCLEdBQUcsTUFBTSxDQUFDLEdBQUc7UUFDYixHQUFHLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDbkMsT0FBTyxFQUFFO1lBQ1AsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU87WUFDckIsMkJBQTJCLEVBQUUsbUJBQW1CLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztTQUMvRDtLQUNGLENBQUE7SUFDRCxNQUFNLFFBQVEsR0FBRyxNQUFNLHdCQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ25ELE9BQU87UUFDTCxPQUFPLEVBQUUsUUFBUSxDQUFDLElBQUk7UUFDdEIsTUFBTSxFQUFFLENBQUMsRUFBRSxHQUFHLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7S0FDL0QsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUVELE1BQU0sV0FBVyxHQUF3QixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLG9CQUFXLENBQUMsS0FBSyxDQUFDLElBQUksbUJBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUV6RixNQUFNLFdBQVcsR0FBMkIsQ0FBQyxNQUFlLEVBQUUsRUFBRSxDQUNyRSxzQkFBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsTUFBTSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFBO0FBRHpDLFFBQUEsV0FBVyxlQUM4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3RlciB9IGZyb20gJ0BjaGFpbmxpbmsvZWEtYm9vdHN0cmFwJ1xuaW1wb3J0IHsgYmFsYW5jZSB9IGZyb20gJ0BjaGFpbmxpbmsvZWEtZmFjdG9yaWVzJ1xuaW1wb3J0IHsgQ29uZmlnLCBFeGVjdXRlRmFjdG9yeSB9IGZyb20gJ0BjaGFpbmxpbmsvdHlwZXMnXG5pbXBvcnQgeyBCTE9DS0NIQUlOUywgaXNDaGFpblR5cGUsIGlzQ29pblR5cGUgfSBmcm9tICcuLi9jb25maWcnXG5cbmV4cG9ydCBjb25zdCBzdXBwb3J0ZWRFbmRwb2ludHMgPSBbJ2JhbGFuY2UnXVxuXG5leHBvcnQgY29uc3QgaW5wdXRQYXJhbWV0ZXJzID0gYmFsYW5jZS5pbnB1dFBhcmFtZXRlcnNcblxuY29uc3QgZ2V0QmFsYW5jZVVSSSA9IChhZGRyZXNzOiBzdHJpbmcpID0+IGAvYXBpL3YyL2FkZHJlc3Nlcy8ke2FkZHJlc3N9L2FjY291bnQtYmFsYW5jZXMvbGF0ZXN0YFxuXG5jb25zdCBnZXRCbG9ja2NoYWluSGVhZGVyID0gKGNvaW4/OiBzdHJpbmcpID0+IHtcbiAgY29uc3QgbmV0d29yayA9IFJlcXVlc3Rlci50b1ZlbmRvck5hbWUoY29pbiwgQkxPQ0tDSEFJTlMpXG4gIHJldHVybiBgJHtuZXR3b3JrfS1tYWlubmV0YFxufVxuXG5jb25zdCBnZXRCYWxhbmNlOiBiYWxhbmNlLkdldEJhbGFuY2UgPSBhc3luYyAoYWNjb3VudCwgY29uZmlnKSA9PiB7XG4gIGNvbnN0IHJlcUNvbmZpZzogYW55ID0ge1xuICAgIC4uLmNvbmZpZy5hcGksXG4gICAgdXJsOiBnZXRCYWxhbmNlVVJJKGFjY291bnQuYWRkcmVzcyksXG4gICAgaGVhZGVyczoge1xuICAgICAgLi4uY29uZmlnLmFwaS5oZWFkZXJzLFxuICAgICAgJ3gtYW1iZXJkYXRhLWJsb2NrY2hhaW4taWQnOiBnZXRCbG9ja2NoYWluSGVhZGVyKGFjY291bnQuY29pbiksXG4gICAgfSxcbiAgfVxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IFJlcXVlc3Rlci5yZXF1ZXN0KHJlcUNvbmZpZylcbiAgcmV0dXJuIHtcbiAgICBwYXlsb2FkOiByZXNwb25zZS5kYXRhLFxuICAgIHJlc3VsdDogW3sgLi4uYWNjb3VudCwgYmFsYW5jZTogcmVzcG9uc2UuZGF0YS5wYXlsb2FkLnZhbHVlIH1dLFxuICB9XG59XG5cbmNvbnN0IGlzU3VwcG9ydGVkOiBiYWxhbmNlLklzU3VwcG9ydGVkID0gKGNvaW4sIGNoYWluKSA9PiBpc0NoYWluVHlwZShjaGFpbikgJiYgaXNDb2luVHlwZShjb2luKVxuXG5leHBvcnQgY29uc3QgbWFrZUV4ZWN1dGU6IEV4ZWN1dGVGYWN0b3J5PENvbmZpZz4gPSAoY29uZmlnPzogQ29uZmlnKSA9PlxuICBiYWxhbmNlLm1ha2UoeyAuLi5jb25maWcsIGdldEJhbGFuY2UsIGlzU3VwcG9ydGVkIH0pXG4iXX0=