"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeWSHandler = exports.makeExecute = exports.endpointSelector = exports.execute = void 0;
const tslib_1 = require("tslib");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("./config");
const endpoints = tslib_1.__importStar(require("./endpoint"));
const endpoint_1 = require("./endpoint");
// Export function to integrate with Chainlink node
const execute = async (request, context, config) => {
    return ea_bootstrap_1.Builder.buildSelector(request, context, config, endpoints);
};
exports.execute = execute;
const endpointSelector = (request) => ea_bootstrap_1.Builder.selectEndpoint(request, config_1.makeConfig(), endpoints);
exports.endpointSelector = endpointSelector;
const makeExecute = (config) => {
    return async (request, context) => exports.execute(request, context, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
const makeWSHandler = (defaultConfig) => {
    const subscriptions = {};
    const getPair = (input) => {
        const validator = new ea_bootstrap_1.Validator(input, endpoint_1.crypto.inputParameters, {}, false);
        if (validator.error)
            return;
        const base = validator.overrideSymbol(config_1.NAME).toLowerCase();
        const quote = validator.validated.data.quote.toLowerCase();
        return `${base}_${quote}`;
    };
    const getSubscription = (pair) => {
        if (!pair)
            return;
        return { id: 1, method: 'subscribe', params: ['market:tickers', { pair }] };
    };
    const getUnsubscription = (pair) => {
        if (!pair)
            return;
        return { id: 1, method: 'unsubscribe', params: [subscriptions[pair]] };
    };
    return () => {
        const config = defaultConfig || config_1.makeConfig();
        return {
            connection: {
                url: config.api.baseWsURL || config_1.DEFAULT_WS_API_ENDPOINT,
                protocol: { headers: { ...config.api.headers } },
            },
            subscribe: (input) => getSubscription(getPair(input)),
            unsubscribe: (input) => getUnsubscription(getPair(input)),
            subsFromMessage: (message) => {
                const pair = message?.params?.result?.pair;
                subscriptions[pair] = message?.params?.subscription;
                return getSubscription(message?.params?.result?.pair);
            },
            // https://github.com/web3data/web3data-js/blob/5b177803cb168dcaed0a8a6e2b2fbd835b82e0f9/src/websocket.js#L43
            isError: () => false,
            filter: (message) => !!message.params,
            toResponse: (message) => {
                const result = ea_bootstrap_1.Requester.validateResultNumber(message, ['params', 'result', 'last']);
                return ea_bootstrap_1.Requester.success('1', { data: { result } });
            },
        };
    };
};
exports.makeWSHandler = makeWSHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSwwREFBdUU7QUFTdkUscUNBQW9FO0FBQ3BFLDhEQUF1QztBQUN2Qyx5Q0FBbUM7QUFFbkMsbURBQW1EO0FBQzVDLE1BQU0sT0FBTyxHQUE4QixLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtJQUNuRixPQUFPLHNCQUFPLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFBO0FBQ25FLENBQUMsQ0FBQTtBQUZZLFFBQUEsT0FBTyxXQUVuQjtBQUVNLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxPQUF1QixFQUFlLEVBQUUsQ0FDdkUsc0JBQU8sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLG1CQUFVLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQTtBQUQ3QyxRQUFBLGdCQUFnQixvQkFDNkI7QUFFbkQsTUFBTSxXQUFXLEdBQTJCLENBQUMsTUFBTSxFQUFFLEVBQUU7SUFDNUQsT0FBTyxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsZUFBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxJQUFJLG1CQUFVLEVBQUUsQ0FBQyxDQUFBO0FBQ3RGLENBQUMsQ0FBQTtBQUZZLFFBQUEsV0FBVyxlQUV2QjtBQUVNLE1BQU0sYUFBYSxHQUFHLENBQUMsYUFBc0IsRUFBaUIsRUFBRTtJQUNyRSxNQUFNLGFBQWEsR0FBUSxFQUFFLENBQUE7SUFDN0IsTUFBTSxPQUFPLEdBQUcsQ0FBQyxLQUFxQixFQUFFLEVBQUU7UUFDeEMsTUFBTSxTQUFTLEdBQUcsSUFBSSx3QkFBUyxDQUFDLEtBQUssRUFBRSxpQkFBTSxDQUFDLGVBQWUsRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDekUsSUFBSSxTQUFTLENBQUMsS0FBSztZQUFFLE9BQU07UUFDM0IsTUFBTSxJQUFJLEdBQUksU0FBUyxDQUFDLGNBQWMsQ0FBQyxhQUFJLENBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtRQUNyRSxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDMUQsT0FBTyxHQUFHLElBQUksSUFBSSxLQUFLLEVBQUUsQ0FBQTtJQUMzQixDQUFDLENBQUE7SUFDRCxNQUFNLGVBQWUsR0FBRyxDQUFDLElBQWEsRUFBRSxFQUFFO1FBQ3hDLElBQUksQ0FBQyxJQUFJO1lBQUUsT0FBTTtRQUNqQixPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxDQUFDLGdCQUFnQixFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFBO0lBQzdFLENBQUMsQ0FBQTtJQUNELE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxJQUFhLEVBQUUsRUFBRTtRQUMxQyxJQUFJLENBQUMsSUFBSTtZQUFFLE9BQU07UUFDakIsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFBO0lBQ3hFLENBQUMsQ0FBQTtJQUNELE9BQU8sR0FBRyxFQUFFO1FBQ1YsTUFBTSxNQUFNLEdBQUcsYUFBYSxJQUFJLG1CQUFVLEVBQUUsQ0FBQTtRQUM1QyxPQUFPO1lBQ0wsVUFBVSxFQUFFO2dCQUNWLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsSUFBSSxnQ0FBdUI7Z0JBQ3BELFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsRUFBRTthQUNqRDtZQUNELFNBQVMsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNyRCxXQUFXLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN6RCxlQUFlLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDM0IsTUFBTSxJQUFJLEdBQUcsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFBO2dCQUMxQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxFQUFFLE1BQU0sRUFBRSxZQUFZLENBQUE7Z0JBQ25ELE9BQU8sZUFBZSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFBO1lBQ3ZELENBQUM7WUFDRCw2R0FBNkc7WUFDN0csT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUs7WUFDcEIsTUFBTSxFQUFFLENBQUMsT0FBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU07WUFDMUMsVUFBVSxFQUFFLENBQUMsT0FBWSxFQUFFLEVBQUU7Z0JBQzNCLE1BQU0sTUFBTSxHQUFHLHdCQUFTLENBQUMsb0JBQW9CLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFBO2dCQUNwRixPQUFPLHdCQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQTtZQUNyRCxDQUFDO1NBQ0YsQ0FBQTtJQUNILENBQUMsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQXhDWSxRQUFBLGFBQWEsaUJBd0N6QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3RlciwgVmFsaWRhdG9yLCBCdWlsZGVyIH0gZnJvbSAnQGNoYWlubGluay9lYS1ib290c3RyYXAnXG5pbXBvcnQge1xuICBBZGFwdGVyUmVxdWVzdCxcbiAgQ29uZmlnLFxuICBFeGVjdXRlRmFjdG9yeSxcbiAgRXhlY3V0ZVdpdGhDb25maWcsXG4gIE1ha2VXU0hhbmRsZXIsXG4gIEFQSUVuZHBvaW50LFxufSBmcm9tICdAY2hhaW5saW5rL3R5cGVzJ1xuaW1wb3J0IHsgREVGQVVMVF9XU19BUElfRU5EUE9JTlQsIG1ha2VDb25maWcsIE5BTUUgfSBmcm9tICcuL2NvbmZpZydcbmltcG9ydCAqIGFzIGVuZHBvaW50cyBmcm9tICcuL2VuZHBvaW50J1xuaW1wb3J0IHsgY3J5cHRvIH0gZnJvbSAnLi9lbmRwb2ludCdcblxuLy8gRXhwb3J0IGZ1bmN0aW9uIHRvIGludGVncmF0ZSB3aXRoIENoYWlubGluayBub2RlXG5leHBvcnQgY29uc3QgZXhlY3V0ZTogRXhlY3V0ZVdpdGhDb25maWc8Q29uZmlnPiA9IGFzeW5jIChyZXF1ZXN0LCBjb250ZXh0LCBjb25maWcpID0+IHtcbiAgcmV0dXJuIEJ1aWxkZXIuYnVpbGRTZWxlY3RvcihyZXF1ZXN0LCBjb250ZXh0LCBjb25maWcsIGVuZHBvaW50cylcbn1cblxuZXhwb3J0IGNvbnN0IGVuZHBvaW50U2VsZWN0b3IgPSAocmVxdWVzdDogQWRhcHRlclJlcXVlc3QpOiBBUElFbmRwb2ludCA9PlxuICBCdWlsZGVyLnNlbGVjdEVuZHBvaW50KHJlcXVlc3QsIG1ha2VDb25maWcoKSwgZW5kcG9pbnRzKVxuXG5leHBvcnQgY29uc3QgbWFrZUV4ZWN1dGU6IEV4ZWN1dGVGYWN0b3J5PENvbmZpZz4gPSAoY29uZmlnKSA9PiB7XG4gIHJldHVybiBhc3luYyAocmVxdWVzdCwgY29udGV4dCkgPT4gZXhlY3V0ZShyZXF1ZXN0LCBjb250ZXh0LCBjb25maWcgfHwgbWFrZUNvbmZpZygpKVxufVxuXG5leHBvcnQgY29uc3QgbWFrZVdTSGFuZGxlciA9IChkZWZhdWx0Q29uZmlnPzogQ29uZmlnKTogTWFrZVdTSGFuZGxlciA9PiB7XG4gIGNvbnN0IHN1YnNjcmlwdGlvbnM6IGFueSA9IHt9XG4gIGNvbnN0IGdldFBhaXIgPSAoaW5wdXQ6IEFkYXB0ZXJSZXF1ZXN0KSA9PiB7XG4gICAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihpbnB1dCwgY3J5cHRvLmlucHV0UGFyYW1ldGVycywge30sIGZhbHNlKVxuICAgIGlmICh2YWxpZGF0b3IuZXJyb3IpIHJldHVyblxuICAgIGNvbnN0IGJhc2UgPSAodmFsaWRhdG9yLm92ZXJyaWRlU3ltYm9sKE5BTUUpIGFzIHN0cmluZykudG9Mb3dlckNhc2UoKVxuICAgIGNvbnN0IHF1b3RlID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLnF1b3RlLnRvTG93ZXJDYXNlKClcbiAgICByZXR1cm4gYCR7YmFzZX1fJHtxdW90ZX1gXG4gIH1cbiAgY29uc3QgZ2V0U3Vic2NyaXB0aW9uID0gKHBhaXI/OiBzdHJpbmcpID0+IHtcbiAgICBpZiAoIXBhaXIpIHJldHVyblxuICAgIHJldHVybiB7IGlkOiAxLCBtZXRob2Q6ICdzdWJzY3JpYmUnLCBwYXJhbXM6IFsnbWFya2V0OnRpY2tlcnMnLCB7IHBhaXIgfV0gfVxuICB9XG4gIGNvbnN0IGdldFVuc3Vic2NyaXB0aW9uID0gKHBhaXI/OiBzdHJpbmcpID0+IHtcbiAgICBpZiAoIXBhaXIpIHJldHVyblxuICAgIHJldHVybiB7IGlkOiAxLCBtZXRob2Q6ICd1bnN1YnNjcmliZScsIHBhcmFtczogW3N1YnNjcmlwdGlvbnNbcGFpcl1dIH1cbiAgfVxuICByZXR1cm4gKCkgPT4ge1xuICAgIGNvbnN0IGNvbmZpZyA9IGRlZmF1bHRDb25maWcgfHwgbWFrZUNvbmZpZygpXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbm5lY3Rpb246IHtcbiAgICAgICAgdXJsOiBjb25maWcuYXBpLmJhc2VXc1VSTCB8fCBERUZBVUxUX1dTX0FQSV9FTkRQT0lOVCxcbiAgICAgICAgcHJvdG9jb2w6IHsgaGVhZGVyczogeyAuLi5jb25maWcuYXBpLmhlYWRlcnMgfSB9LFxuICAgICAgfSxcbiAgICAgIHN1YnNjcmliZTogKGlucHV0KSA9PiBnZXRTdWJzY3JpcHRpb24oZ2V0UGFpcihpbnB1dCkpLFxuICAgICAgdW5zdWJzY3JpYmU6IChpbnB1dCkgPT4gZ2V0VW5zdWJzY3JpcHRpb24oZ2V0UGFpcihpbnB1dCkpLFxuICAgICAgc3Vic0Zyb21NZXNzYWdlOiAobWVzc2FnZSkgPT4ge1xuICAgICAgICBjb25zdCBwYWlyID0gbWVzc2FnZT8ucGFyYW1zPy5yZXN1bHQ/LnBhaXJcbiAgICAgICAgc3Vic2NyaXB0aW9uc1twYWlyXSA9IG1lc3NhZ2U/LnBhcmFtcz8uc3Vic2NyaXB0aW9uXG4gICAgICAgIHJldHVybiBnZXRTdWJzY3JpcHRpb24obWVzc2FnZT8ucGFyYW1zPy5yZXN1bHQ/LnBhaXIpXG4gICAgICB9LFxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYjNkYXRhL3dlYjNkYXRhLWpzL2Jsb2IvNWIxNzc4MDNjYjE2OGRjYWVkMGE4YTZlMmIyZmJkODM1YjgyZTBmOS9zcmMvd2Vic29ja2V0LmpzI0w0M1xuICAgICAgaXNFcnJvcjogKCkgPT4gZmFsc2UsIC8vIEFtYmVyZGF0YSBuZXZlciByZWNlaXZlcyBlcnJvciB0eXBlcz9cbiAgICAgIGZpbHRlcjogKG1lc3NhZ2U6IGFueSkgPT4gISFtZXNzYWdlLnBhcmFtcyxcbiAgICAgIHRvUmVzcG9uc2U6IChtZXNzYWdlOiBhbnkpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gUmVxdWVzdGVyLnZhbGlkYXRlUmVzdWx0TnVtYmVyKG1lc3NhZ2UsIFsncGFyYW1zJywgJ3Jlc3VsdCcsICdsYXN0J10pXG4gICAgICAgIHJldHVybiBSZXF1ZXN0ZXIuc3VjY2VzcygnMScsIHsgZGF0YTogeyByZXN1bHQgfSB9KVxuICAgICAgfSxcbiAgICB9XG4gIH1cbn1cbiJdfQ==