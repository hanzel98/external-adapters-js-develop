"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
// This should be filled in with a lowercase name corresponding to the API endpoint
exports.supportedEndpoints = ['price'];
const customError = (data) => !!data.error;
exports.inputParameters = {
    base: ['base', 'from', 'coin'],
    quote: ['quote', 'to', 'market'],
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const base = validator.overrideSymbol(config_1.NAME);
    const quote = validator.validated.data.quote;
    const url = 'timeseries/asset-metrics';
    const metric = `ReferenceRate${quote.toUpperCase()}`;
    const params = {
        assets: base,
        metrics: metric,
        frequency: '1s',
        api_key: config.apiKey,
        page_size: 1,
    };
    const options = { ...config.api, params, url };
    const response = await ea_bootstrap_1.Requester.request(options, customError);
    const result = ea_bootstrap_1.Requester.validateResultNumber(response.data, ['data', 0, metric]);
    return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, result), config.verbose);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZW5kcG9pbnQvcHJpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQThEO0FBRTlELHNDQUErQztBQUUvQyxtRkFBbUY7QUFDdEUsUUFBQSxrQkFBa0IsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBZTNDLE1BQU0sV0FBVyxHQUFHLENBQUMsSUFBb0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUE7QUFFN0MsUUFBQSxlQUFlLEdBQW9CO0lBQzlDLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDO0lBQzlCLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDO0NBQ2pDLENBQUE7QUFFTSxNQUFNLE9BQU8sR0FBOEIsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUU7SUFDN0UsTUFBTSxTQUFTLEdBQUcsSUFBSSx3QkFBUyxDQUFDLE9BQU8sRUFBRSx1QkFBZSxDQUFDLENBQUE7SUFDekQsSUFBSSxTQUFTLENBQUMsS0FBSztRQUFFLE1BQU0sU0FBUyxDQUFDLEtBQUssQ0FBQTtJQUUxQyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQTtJQUN2QyxNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsY0FBYyxDQUFDLGFBQVcsQ0FBQyxDQUFBO0lBQ2xELE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQTtJQUM1QyxNQUFNLEdBQUcsR0FBRywwQkFBMEIsQ0FBQTtJQUN0QyxNQUFNLE1BQU0sR0FBRyxnQkFBZ0IsS0FBSyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUE7SUFFcEQsTUFBTSxNQUFNLEdBQUc7UUFDYixNQUFNLEVBQUUsSUFBSTtRQUNaLE9BQU8sRUFBRSxNQUFNO1FBQ2YsU0FBUyxFQUFFLElBQUk7UUFDZixPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU07UUFDdEIsU0FBUyxFQUFFLENBQUM7S0FDYixDQUFBO0lBRUQsTUFBTSxPQUFPLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFBO0lBRTlDLE1BQU0sUUFBUSxHQUFHLE1BQU0sd0JBQVMsQ0FBQyxPQUFPLENBQWlCLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQTtJQUM5RSxNQUFNLE1BQU0sR0FBRyx3QkFBUyxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUE7SUFFakYsT0FBTyx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsd0JBQVMsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUM1RixDQUFDLENBQUE7QUF4QlksUUFBQSxPQUFPLFdBd0JuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3RlciwgVmFsaWRhdG9yIH0gZnJvbSAnQGNoYWlubGluay9lYS1ib290c3RyYXAnXG5pbXBvcnQgeyBDb25maWcsIEV4ZWN1dGVXaXRoQ29uZmlnLCBJbnB1dFBhcmFtZXRlcnMgfSBmcm9tICdAY2hhaW5saW5rL3R5cGVzJ1xuaW1wb3J0IHsgTkFNRSBhcyBBZGFwdGVyTmFtZSB9IGZyb20gJy4uL2NvbmZpZydcblxuLy8gVGhpcyBzaG91bGQgYmUgZmlsbGVkIGluIHdpdGggYSBsb3dlcmNhc2UgbmFtZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBBUEkgZW5kcG9pbnRcbmV4cG9ydCBjb25zdCBzdXBwb3J0ZWRFbmRwb2ludHMgPSBbJ3ByaWNlJ11cblxuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZVNjaGVtYSB7XG4gIGRhdGE6IHtcbiAgICBhc3NldDogc3RyaW5nXG4gICAgdGltZTogc3RyaW5nXG4gICAgUmVmZXJlbmNlUmF0ZVVTRD86IHN0cmluZ1xuICAgIFJlZmVyZW5jZVJhdGVFVVI/OiBzdHJpbmdcbiAgfVtdXG4gIGVycm9yPzoge1xuICAgIHR5cGU6IHN0cmluZ1xuICAgIG1lc3NhZ2U6IHN0cmluZ1xuICB9XG59XG5cbmNvbnN0IGN1c3RvbUVycm9yID0gKGRhdGE6IFJlc3BvbnNlU2NoZW1hKSA9PiAhIWRhdGEuZXJyb3JcblxuZXhwb3J0IGNvbnN0IGlucHV0UGFyYW1ldGVyczogSW5wdXRQYXJhbWV0ZXJzID0ge1xuICBiYXNlOiBbJ2Jhc2UnLCAnZnJvbScsICdjb2luJ10sXG4gIHF1b3RlOiBbJ3F1b3RlJywgJ3RvJywgJ21hcmtldCddLFxufVxuXG5leHBvcnQgY29uc3QgZXhlY3V0ZTogRXhlY3V0ZVdpdGhDb25maWc8Q29uZmlnPiA9IGFzeW5jIChyZXF1ZXN0LCBfLCBjb25maWcpID0+IHtcbiAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihyZXF1ZXN0LCBpbnB1dFBhcmFtZXRlcnMpXG4gIGlmICh2YWxpZGF0b3IuZXJyb3IpIHRocm93IHZhbGlkYXRvci5lcnJvclxuXG4gIGNvbnN0IGpvYlJ1bklEID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5pZFxuICBjb25zdCBiYXNlID0gdmFsaWRhdG9yLm92ZXJyaWRlU3ltYm9sKEFkYXB0ZXJOYW1lKVxuICBjb25zdCBxdW90ZSA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5xdW90ZVxuICBjb25zdCB1cmwgPSAndGltZXNlcmllcy9hc3NldC1tZXRyaWNzJ1xuICBjb25zdCBtZXRyaWMgPSBgUmVmZXJlbmNlUmF0ZSR7cXVvdGUudG9VcHBlckNhc2UoKX1gXG5cbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIGFzc2V0czogYmFzZSxcbiAgICBtZXRyaWNzOiBtZXRyaWMsXG4gICAgZnJlcXVlbmN5OiAnMXMnLFxuICAgIGFwaV9rZXk6IGNvbmZpZy5hcGlLZXksXG4gICAgcGFnZV9zaXplOiAxLFxuICB9XG5cbiAgY29uc3Qgb3B0aW9ucyA9IHsgLi4uY29uZmlnLmFwaSwgcGFyYW1zLCB1cmwgfVxuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgUmVxdWVzdGVyLnJlcXVlc3Q8UmVzcG9uc2VTY2hlbWE+KG9wdGlvbnMsIGN1c3RvbUVycm9yKVxuICBjb25zdCByZXN1bHQgPSBSZXF1ZXN0ZXIudmFsaWRhdGVSZXN1bHROdW1iZXIocmVzcG9uc2UuZGF0YSwgWydkYXRhJywgMCwgbWV0cmljXSlcblxuICByZXR1cm4gUmVxdWVzdGVyLnN1Y2Nlc3Moam9iUnVuSUQsIFJlcXVlc3Rlci53aXRoUmVzdWx0KHJlc3BvbnNlLCByZXN1bHQpLCBjb25maWcudmVyYm9zZSlcbn1cbiJdfQ==