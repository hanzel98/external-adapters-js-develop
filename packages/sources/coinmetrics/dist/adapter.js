"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeWSHandler = exports.BAD_PARAMETER = exports.BAD_PARAMETERS = exports.makeExecute = exports.endpointSelector = exports.execute = void 0;
const tslib_1 = require("tslib");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("./config");
const endpoints = tslib_1.__importStar(require("./endpoint"));
const execute = async (request, context, config) => {
    return ea_bootstrap_1.Builder.buildSelector(request, context, config, endpoints);
};
exports.execute = execute;
const endpointSelector = (request) => ea_bootstrap_1.Builder.selectEndpoint(request, config_1.makeConfig(), endpoints);
exports.endpointSelector = endpointSelector;
const makeExecute = (config) => {
    return async (request, context) => exports.execute(request, context, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
const getSubKeyInfo = (input) => {
    const validator = new ea_bootstrap_1.Validator(input, endpoints.price.inputParameters, {}, false);
    if (validator.error)
        throw validator.error;
    const asset = validator.validated.data.base.toLowerCase();
    const quote = validator.validated.data.quote.toUpperCase();
    if (quote !== 'USD' && quote !== 'EUR')
        throw new ea_bootstrap_1.AdapterError({
            jobRunID: input.id,
            statusCode: 400,
            message: 'Quote must be of type USD or EUR',
        });
    const metrics = `ReferenceRate${quote}`;
    return { asset, metrics };
};
exports.BAD_PARAMETERS = 'bad_parameters';
exports.BAD_PARAMETER = 'bad_parameter';
const makeWSHandler = (config) => {
    return () => {
        const defaultConfig = config || config_1.makeConfig();
        return {
            connection: {
                url: defaultConfig.api.baseWsURL,
            },
            subscribe: (input) => {
                const { asset, metrics } = getSubKeyInfo(input);
                return `${asset}${metrics}`;
            },
            unsubscribe: () => '',
            subsFromMessage: (message) => {
                const metrics = Object.keys(message).find((key) => key.includes('ReferenceRate'));
                if (!metrics)
                    ea_bootstrap_1.Logger.debug(`Error: Could not find "ReferenceRate" key in WS message. ${message}`);
                return `${message.asset}${metrics}`;
            },
            isError: (message) => !!message.error,
            filter: () => true,
            toResponse: (message, input) => {
                const { metrics } = getSubKeyInfo(input);
                const result = ea_bootstrap_1.Requester.validateResultNumber(message, [metrics]);
                return ea_bootstrap_1.Requester.success('1', { data: { result } });
            },
            programmaticConnectionInfo: (input) => {
                const { asset, metrics } = getSubKeyInfo(input);
                const key = `${asset}${metrics}`;
                const url = `${defaultConfig.api.baseWsURL}/timeseries-stream/asset-metrics?assets=${asset}&metrics=${metrics}&frequency=1s&api_key=${defaultConfig.apiKey}`;
                return {
                    key,
                    url,
                };
            },
            shouldNotRetryConnection: (error) => {
                const wsError = error;
                return wsError.error.type === exports.BAD_PARAMETERS || wsError.error.type === exports.BAD_PARAMETER;
            },
        };
    };
};
exports.makeWSHandler = makeWSHandler;
//# sourceMappingURL=data:application/json;base64,