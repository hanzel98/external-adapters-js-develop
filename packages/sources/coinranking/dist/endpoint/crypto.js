"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.endpointResultPaths = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
exports.supportedEndpoints = ['crypto', 'price', 'marketcap'];
exports.endpointResultPaths = {
    crypto: 'price',
    price: 'price',
    marketcap: 'marketCap',
};
exports.inputParameters = {
    base: ['base', 'from', 'coin'],
    quote: ['quote', 'to', 'market'],
    coinid: false,
    resultPath: false,
    referenceCurrencyUuid: false,
};
const referenceSymbolToUuid = async (symbol, config) => {
    const url = 'reference-currencies';
    const options = {
        ...config.api,
        url,
    };
    const response = await ea_bootstrap_1.Requester.request(options);
    const currency = response.data.data.currencies.find((x) => x.symbol.toLowerCase() === symbol.toLowerCase());
    if (!currency)
        throw Error(`Currency not found for symbol: ${symbol}`);
    return currency.uuid;
};
const execute = async (input, _, config) => {
    const validator = new ea_bootstrap_1.Validator(input, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const symbol = validator.validated.data.base;
    const quote = validator.validated.data.quote;
    const coinid = validator.validated.data.coinid;
    const overridenCoinid = validator.overrideSymbol(config_1.NAME);
    let referenceCurrencyUuid = validator.validated.data.referenceCurrencyUuid;
    const resultPath = validator.validated.data.resultPath;
    let cost = 1;
    if (!referenceCurrencyUuid && quote.toUpperCase() !== 'USD') {
        referenceCurrencyUuid = await referenceSymbolToUuid(quote, config);
        cost = 2;
    }
    const params = { symbols: [symbol], referenceCurrencyUuid };
    const url = 'coins';
    const options = {
        ...config.api,
        url,
        params,
    };
    const response = await ea_bootstrap_1.Requester.request(options);
    // If coinid was provided or base was overridden, that UUID will be fetched
    const coinUuid = coinid || (overridenCoinid !== symbol && overridenCoinid);
    const coindata = response.data.data.coins.find((coin) => {
        if (coinUuid && coin.uuid === coinUuid)
            return true;
        else if (!coinUuid && coin.symbol.toUpperCase() === symbol.toUpperCase())
            return true;
        return false;
    });
    if (!coindata) {
        throw new Error(`Unable to find coin: ${coinUuid || symbol}`);
    }
    const result = ea_bootstrap_1.Requester.validateResultNumber(coindata, resultPath);
    response.data.cost = cost;
    return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, result), config.verbose);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,