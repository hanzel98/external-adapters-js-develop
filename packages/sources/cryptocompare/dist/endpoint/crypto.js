"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.endpointResultPaths = exports.batchablePropertyPath = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
exports.supportedEndpoints = ['crypto', 'price', 'marketcap', 'volume'];
exports.batchablePropertyPath = [
    { name: 'base', limit: 1000 },
    { name: 'quote', limit: 100 },
];
exports.endpointResultPaths = {
    crypto: 'PRICE',
    price: 'PRICE',
    marketcap: 'MKTCAP',
    volume: 'VOLUME24HOURTO',
};
exports.inputParameters = {
    base: ['base', 'from', 'coin', 'fsym'],
    quote: ['quote', 'to', 'market', 'tsyms'],
    resultPath: false,
    endpoint: false,
};
const handleBatchedRequest = (jobRunID, request, response, validator, resultPath) => {
    const payload = [];
    for (const base of request.data.base) {
        const baseWithOverride = validator.overrideSymbol(config_1.NAME, base);
        for (const quote in response.data.RAW[baseWithOverride]) {
            // Skip this pair if CC doesn't have resultPath for this pair
            if (!(resultPath in response.data.RAW[baseWithOverride][quote]))
                continue;
            payload.push([
                {
                    ...request,
                    data: { ...request.data, base: base.toUpperCase(), quote: quote.toUpperCase() },
                },
                ea_bootstrap_1.Requester.validateResultNumber(response.data, [
                    'RAW',
                    baseWithOverride,
                    quote,
                    resultPath,
                ]),
            ]);
        }
    }
    return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, undefined, payload), true, exports.batchablePropertyPath);
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const url = `/data/pricemultifull`;
    const symbol = validator.overrideSymbol(config_1.NAME);
    const quote = validator.validated.data.quote;
    const resultPath = validator.validated.data.resultPath;
    const params = {
        fsyms: (Array.isArray(symbol)
            ? symbol.map((s) => s.toUpperCase())
            : [symbol.toUpperCase()]).join(),
        tsyms: (Array.isArray(quote)
            ? quote.map((q) => q.toUpperCase())
            : [quote.toUpperCase()]).join(),
    };
    const options = {
        ...config.api,
        url,
        params,
    };
    const response = await ea_bootstrap_1.Requester.request(options);
    if (Array.isArray(symbol) || Array.isArray(quote))
        return handleBatchedRequest(jobRunID, request, response, validator, resultPath);
    const result = ea_bootstrap_1.Requester.validateResultNumber(response.data, ['RAW', symbol, quote, resultPath]);
    return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, result), config.verbose, exports.batchablePropertyPath);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,