"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeWSHandler = exports.INVALID_SUB = exports.makeExecute = exports.endpointSelector = exports.execute = void 0;
const tslib_1 = require("tslib");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("./config");
const endpoint_1 = require("./endpoint");
const endpoints = tslib_1.__importStar(require("./endpoint"));
const execute = async (request, context, config) => {
    return ea_bootstrap_1.Builder.buildSelector(request, context, config, endpoints);
};
exports.execute = execute;
const endpointSelector = (request) => ea_bootstrap_1.Builder.selectEndpoint(request, config_1.makeConfig(), endpoints);
exports.endpointSelector = endpointSelector;
const makeExecute = (config) => {
    return async (request, context) => exports.execute(request, context, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
exports.INVALID_SUB = 'INVALID_SUB';
const makeWSHandler = (config) => {
    // https://min-api.cryptocompare.com/documentation/websockets
    const subscriptions = {
        trade: 0,
        ticker: 2,
        aggregate: 5,
    };
    const getPair = (input) => {
        const validator = new ea_bootstrap_1.Validator(input, { endpoint: false, ...endpoint_1.crypto.inputParameters }, {}, false);
        if (validator.error)
            return false;
        const endpoint = validator.validated.data.endpoint?.toLowerCase();
        if (endpoint == 'marketcap')
            return false;
        const base = validator.overrideSymbol(config_1.NAME);
        const quote = validator.validated.data.quote.toUpperCase();
        return `${base}~${quote}`;
    };
    const getSubscription = (action, pair) => {
        if (!pair)
            return false;
        return { action, subs: [`${subscriptions.aggregate}~CCCAGG~${pair}`] };
    };
    const withApiKey = (url, apiKey) => `${url}?api_key=${apiKey}`;
    const shouldNotRetryAfterError = (error) => {
        return error.MESSAGE === exports.INVALID_SUB;
    };
    return () => {
        const defaultConfig = config || config_1.makeConfig();
        return {
            connection: {
                url: withApiKey(defaultConfig.api.baseWsURL || config_1.DEFAULT_WS_API_ENDPOINT, defaultConfig.apiKey || ''),
                protocol: { query: { api_key: defaultConfig.apiKey } },
            },
            subscribe: (input) => getSubscription('SubAdd', getPair(input)),
            unsubscribe: (input) => getSubscription('SubRemove', getPair(input)),
            subsFromMessage: (message) => getSubscription('SubAdd', `${message?.FROMSYMBOL}~${message?.TOSYMBOL}`),
            isError: (message) => Number(message.TYPE) > 400 && Number(message.TYPE) < 900,
            filter: (message) => {
                // Ignore everything is not from the wanted channels
                const code = Number(message.TYPE);
                const flag = Number(message.FLAGS); // flags = 4 (means price unchanged, PRICE parameter not included)
                return (code === subscriptions.ticker || code === subscriptions.aggregate) && flag !== 4;
            },
            toResponse: (message) => {
                const result = ea_bootstrap_1.Requester.validateResultNumber(message, ['PRICE']);
                return ea_bootstrap_1.Requester.success('1', { data: { result } });
            },
            shouldNotRetrySubscription: (error) => shouldNotRetryAfterError(error),
        };
    };
};
exports.makeWSHandler = makeWSHandler;
//# sourceMappingURL=data:application/json;base64,