"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSymbolsToIds = exports.getCoinIds = void 0;
const adapter_1 = require("./adapter");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
function getCoinIds(context, id) {
    const execute = adapter_1.makeExecute();
    const options = {
        data: {
            endpoint: 'coins',
            maxAge: 60 * 60 * 1000, // 1 hour
        },
        method: 'post',
        id,
    };
    return new Promise((resolve, reject) => {
        const middleware = ea_bootstrap_1.makeMiddleware(execute, undefined, adapter_1.endpointSelector);
        ea_bootstrap_1.withMiddleware(execute, context, middleware)
            .then((executeWithMiddleware) => {
            executeWithMiddleware(options, context).then((value) => resolve(value.data));
        })
            .catch((error) => reject(error));
    });
}
exports.getCoinIds = getCoinIds;
const getSymbolsToIds = (symbols, coinList) => {
    const idToSymbol = {};
    symbols.forEach((symbol) => {
        const coin = coinList.find((d) => d.symbol.toLowerCase() === symbol.toLowerCase());
        if (coin && coin.id) {
            idToSymbol[coin.id] = coin.symbol;
            return;
        }
        const byId = coinList.find((d) => d.id.toLowerCase() === symbol.toLowerCase());
        if (byId) {
            idToSymbol[byId.id] = byId.symbol;
            return;
        }
    });
    return idToSymbol;
};
exports.getSymbolsToIds = getSymbolsToIds;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHVDQUF5RDtBQUN6RCwwREFBd0U7QUFJeEUsU0FBZ0IsVUFBVSxDQUFDLE9BQXVCLEVBQUUsRUFBVTtJQUM1RCxNQUFNLE9BQU8sR0FBRyxxQkFBVyxFQUFFLENBQUE7SUFDN0IsTUFBTSxPQUFPLEdBQUc7UUFDZCxJQUFJLEVBQUU7WUFDSixRQUFRLEVBQUUsT0FBTztZQUNqQixNQUFNLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLEVBQUUsU0FBUztTQUNsQztRQUNELE1BQU0sRUFBRSxNQUFNO1FBQ2QsRUFBRTtLQUNILENBQUE7SUFDRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ3JDLE1BQU0sVUFBVSxHQUFHLDZCQUFjLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSwwQkFBZ0IsQ0FBQyxDQUFBO1FBQ3ZFLDZCQUFjLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUM7YUFDekMsSUFBSSxDQUFDLENBQUMscUJBQXFCLEVBQUUsRUFBRTtZQUM5QixxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7UUFDOUUsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtJQUNwQyxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFsQkQsZ0NBa0JDO0FBRU0sTUFBTSxlQUFlLEdBQUcsQ0FDN0IsT0FBaUIsRUFDakIsUUFBeUIsRUFDRCxFQUFFO0lBQzFCLE1BQU0sVUFBVSxHQUEyQixFQUFFLENBQUE7SUFDN0MsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ3pCLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLEtBQUssTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUE7UUFDbEYsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNuQixVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUE7WUFDakMsT0FBTTtTQUNQO1FBQ0QsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsS0FBSyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQTtRQUM5RSxJQUFJLElBQUksRUFBRTtZQUNSLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQTtZQUNqQyxPQUFNO1NBQ1A7SUFDSCxDQUFDLENBQUMsQ0FBQTtJQUNGLE9BQU8sVUFBVSxDQUFBO0FBQ25CLENBQUMsQ0FBQTtBQWxCWSxRQUFBLGVBQWUsbUJBa0IzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVuZHBvaW50U2VsZWN0b3IsIG1ha2VFeGVjdXRlIH0gZnJvbSAnLi9hZGFwdGVyJ1xuaW1wb3J0IHsgbWFrZU1pZGRsZXdhcmUsIHdpdGhNaWRkbGV3YXJlIH0gZnJvbSAnQGNoYWlubGluay9lYS1ib290c3RyYXAnXG5pbXBvcnQgeyBDb2luc1Jlc3BvbnNlIH0gZnJvbSAnLi9lbmRwb2ludC9jb2lucydcbmltcG9ydCB7IEFkYXB0ZXJDb250ZXh0IH0gZnJvbSAnQGNoYWlubGluay90eXBlcydcblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvaW5JZHMoY29udGV4dDogQWRhcHRlckNvbnRleHQsIGlkOiBzdHJpbmcpOiBQcm9taXNlPENvaW5zUmVzcG9uc2VbXT4ge1xuICBjb25zdCBleGVjdXRlID0gbWFrZUV4ZWN1dGUoKVxuICBjb25zdCBvcHRpb25zID0ge1xuICAgIGRhdGE6IHtcbiAgICAgIGVuZHBvaW50OiAnY29pbnMnLFxuICAgICAgbWF4QWdlOiA2MCAqIDYwICogMTAwMCwgLy8gMSBob3VyXG4gICAgfSxcbiAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICBpZCxcbiAgfVxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IG1pZGRsZXdhcmUgPSBtYWtlTWlkZGxld2FyZShleGVjdXRlLCB1bmRlZmluZWQsIGVuZHBvaW50U2VsZWN0b3IpXG4gICAgd2l0aE1pZGRsZXdhcmUoZXhlY3V0ZSwgY29udGV4dCwgbWlkZGxld2FyZSlcbiAgICAgIC50aGVuKChleGVjdXRlV2l0aE1pZGRsZXdhcmUpID0+IHtcbiAgICAgICAgZXhlY3V0ZVdpdGhNaWRkbGV3YXJlKG9wdGlvbnMsIGNvbnRleHQpLnRoZW4oKHZhbHVlKSA9PiByZXNvbHZlKHZhbHVlLmRhdGEpKVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHJlamVjdChlcnJvcikpXG4gIH0pXG59XG5cbmV4cG9ydCBjb25zdCBnZXRTeW1ib2xzVG9JZHMgPSAoXG4gIHN5bWJvbHM6IHN0cmluZ1tdLFxuICBjb2luTGlzdDogQ29pbnNSZXNwb25zZVtdLFxuKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9PiB7XG4gIGNvbnN0IGlkVG9TeW1ib2w6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fVxuICBzeW1ib2xzLmZvckVhY2goKHN5bWJvbCkgPT4ge1xuICAgIGNvbnN0IGNvaW4gPSBjb2luTGlzdC5maW5kKChkKSA9PiBkLnN5bWJvbC50b0xvd2VyQ2FzZSgpID09PSBzeW1ib2wudG9Mb3dlckNhc2UoKSlcbiAgICBpZiAoY29pbiAmJiBjb2luLmlkKSB7XG4gICAgICBpZFRvU3ltYm9sW2NvaW4uaWRdID0gY29pbi5zeW1ib2xcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCBieUlkID0gY29pbkxpc3QuZmluZCgoZCkgPT4gZC5pZC50b0xvd2VyQ2FzZSgpID09PSBzeW1ib2wudG9Mb3dlckNhc2UoKSlcbiAgICBpZiAoYnlJZCkge1xuICAgICAgaWRUb1N5bWJvbFtieUlkLmlkXSA9IGJ5SWQuc3ltYm9sXG4gICAgICByZXR1cm5cbiAgICB9XG4gIH0pXG4gIHJldHVybiBpZFRvU3ltYm9sXG59XG4iXX0=