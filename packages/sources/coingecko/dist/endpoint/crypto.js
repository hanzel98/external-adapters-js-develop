"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.endpointResultPaths = exports.batchablePropertyPath = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
const util_1 = require("../util");
exports.supportedEndpoints = ['crypto', 'price', 'marketcap', 'volume'];
exports.batchablePropertyPath = [{ name: 'base' }, { name: 'quote' }];
const customError = (data) => {
    if (Object.keys(data).length === 0)
        return true;
    return false;
};
const buildResultPath = (path) => (request) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const quote = validator.validated.data.quote;
    if (Array.isArray(quote))
        return '';
    return `${quote.toLowerCase()}${path}`;
};
exports.endpointResultPaths = {
    price: buildResultPath(''),
    crypto: buildResultPath(''),
    marketcap: buildResultPath('_market_cap'),
    volume: buildResultPath('_24h_vol'),
};
exports.inputParameters = {
    base: ['base', 'from', 'coin'],
    quote: ['quote', 'to', 'market'],
    coinid: false,
    resultPath: false,
    endpoint: false,
};
const handleBatchedRequest = (jobRunID, request, response, validator, endpoint, idToSymbol) => {
    const payload = [];
    for (const base in response.data) {
        const quoteArray = Array.isArray(request.data.quote) ? request.data.quote : [request.data.quote];
        for (const quote of quoteArray) {
            const symbol = idToSymbol?.[base];
            if (symbol) {
                const individualRequest = {
                    ...request,
                    data: {
                        ...request.data,
                        base: validator.overrideReverseLookup(config_1.NAME, 'overrides', symbol).toUpperCase(),
                        quote: quote.toUpperCase(),
                    },
                };
                payload.push([
                    individualRequest,
                    ea_bootstrap_1.Requester.validateResultNumber(response.data, [
                        base,
                        exports.endpointResultPaths[endpoint](individualRequest),
                    ]),
                ]);
            }
            else
                ea_bootstrap_1.Logger.debug('WARNING: Symbol not found ', base);
        }
    }
    response.data.results = payload;
    return ea_bootstrap_1.Requester.success(jobRunID, response, true, exports.batchablePropertyPath);
};
const execute = async (request, context, config) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const endpoint = validator.validated.data.endpoint;
    const jobRunID = validator.validated.id;
    const base = validator.overrideSymbol(config_1.NAME);
    const quote = validator.validated.data.quote;
    const coinid = validator.validated.data.coinid;
    let idToSymbol = {};
    let ids = coinid;
    if (!ids) {
        const coinIds = await util_1.getCoinIds(context, jobRunID);
        const symbols = Array.isArray(base) ? base : [base];
        idToSymbol = util_1.getSymbolsToIds(symbols, coinIds);
        ids = Object.keys(idToSymbol).join(',');
    }
    const url = '/simple/price';
    const resultPath = validator.validated.data.resultPath;
    const params = {
        ids,
        vs_currencies: Array.isArray(quote) ? quote.join(',') : quote,
        include_market_cap: endpoint === 'marketcap',
        include_24hr_vol: endpoint === 'volume',
        x_cg_pro_api_key: config.apiKey,
    };
    const options = {
        ...config.api,
        url,
        params,
    };
    const response = await ea_bootstrap_1.Requester.request(options, customError);
    if (Array.isArray(base) || Array.isArray(quote))
        return handleBatchedRequest(jobRunID, request, response, validator, endpoint, idToSymbol);
    response.data.result = ea_bootstrap_1.Requester.validateResultNumber(response.data, [
        ids.toLowerCase(),
        resultPath,
    ]);
    return ea_bootstrap_1.Requester.success(jobRunID, response, config.verbose, exports.batchablePropertyPath);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,