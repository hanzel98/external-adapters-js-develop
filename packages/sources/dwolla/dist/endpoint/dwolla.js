"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.createRequest = exports.inputParameters = exports.supportedEndpoints = void 0;
const tslib_1 = require("tslib");
const dwolla = tslib_1.__importStar(require("dwolla-v2"));
exports.supportedEndpoints = ['dwolla'];
exports.inputParameters = {
    method: false,
};
const ENV = process.env.ENVIRONMENT || 'sandbox';
const ENDPOINT = ENV.toLowerCase() === 'sandbox' ? 'https://api-sandbox.dwolla.com' : 'https://api.dwolla.com';
const FUNDING_SOURCE = process.env.FUNDING_SOURCE || '';
const client = new dwolla.Client({
    key: process.env.DWOLLA_APP_KEY || '',
    secret: process.env.DWOLLA_APP_SECRET || '',
    environment: ENV || undefined,
});
// Convert xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (32 chars)
// into xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx format
const convertToLongUUID = (uuid) => {
    if (uuid.length != 32)
        return uuid;
    return uuid.replace(/(.{8})(.{4})(.{4})(.{4})(.{12})/, '$1-$2-$3-$4-$5');
};
const getTransfer = async (id) => {
    return new Promise((resolve, reject) => {
        client.auth
            .client()
            .then((appToken) => appToken.get(ENDPOINT + '/transfers/' + convertToLongUUID(id)))
            .then((res) => resolve({ statusCode: res.status, data: res.body }))
            .catch((err) => {
            reject({ statusCode: err.status, data: err.body.message });
        });
    });
};
const sendTransfer = async (data) => {
    return new Promise((resolve, reject) => {
        if (!('amount' in data) ||
            !('destination' in data) ||
            data.amount.length === 0 ||
            data.destination.length === 0 ||
            (!('source' in data) && FUNDING_SOURCE.length === 0)) {
            return reject({ statusCode: 400, data: 'missing required parameters' });
        }
        const transferRequest = {
            _links: {
                source: {
                    href: ENDPOINT + '/funding-sources/' + convertToLongUUID(data.source || FUNDING_SOURCE),
                },
                destination: {
                    href: ENDPOINT + '/funding-sources/' + convertToLongUUID(data.destination),
                },
            },
            amount: {
                currency: data.currency || 'USD',
                value: data.amount,
            },
        };
        client.auth
            .client()
            .then((appToken) => appToken.post('transfers', transferRequest))
            .then((res) => {
            const location = res.headers.get('location');
            const parts = location.split('/');
            return resolve({
                statusCode: res.status,
                data: {
                    // UUID is given in xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx format
                    // Convert to xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                    result: parts[parts.length - 1].replace(/-/g, ''),
                },
            });
        })
            .catch((err) => {
            reject({ statusCode: err.status, data: err.body.message });
        });
    });
};
const createRequest = async (input) => {
    return new Promise((resolve, reject) => {
        const data = input.data;
        const method = process.env.API_METHOD || data.method || '';
        switch (method.toLowerCase()) {
            case 'sendtransfer':
                sendTransfer(data)
                    .then(resolve)
                    .catch(reject);
                break;
            case 'gettransfer':
                // eslint-disable-next-line no-case-declarations
                const getData = data;
                if (!('transfer_id' in getData))
                    return reject({ statusCode: 400, data: 'missing required parameters' });
                getTransfer(getData.transfer_id)
                    .then((response) => {
                    response.data.result = response.data.status || '';
                    return resolve(response);
                })
                    .catch(reject);
                break;
            default:
                return reject({ statusCode: 400, data: 'Invalid method' });
        }
    });
};
exports.createRequest = createRequest;
const execute = async (req) => {
    return new Promise((resolve) => {
        const response = { jobRunID: req.id || '' };
        exports.createRequest(req)
            .then(({ statusCode, data }) => {
            response.status = 'success';
            response.data = data;
            response.statusCode = statusCode;
            resolve(response);
        })
            .catch(({ statusCode, data }) => {
            response.status = 'errored';
            response.error = data;
            response.statusCode = statusCode;
            resolve(response);
        });
    });
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,