"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
exports.supportedEndpoints = ['events'];
exports.inputParameters = {
    sportId: true,
    date: true,
    status: false,
};
const formatDate = (date) => {
    const pad = (n) => (n < 10 ? '0' + n : n);
    return date.getUTCFullYear() + '-' + pad(date.getUTCMonth() + 1) + '-' + pad(date.getUTCDate());
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const sportId = validator.validated.data.sportId;
    const date = validator.validated.data.date;
    const status = validator.validated.data.status;
    const url = `/sports/${sportId}/events/${formatDate(date)}`;
    const reqConfig = {
        ...config.api,
        headers: {
            ...config.api.headers,
            'x-rapidapi-key': config.apiKey,
        },
        params: {
            include: 'scores',
        },
        url,
    };
    const response = await ea_bootstrap_1.Requester.request(reqConfig);
    if (status !== undefined) {
        response.data.events = response.data.events.filter(({ score: { event_status } }) => event_status === status);
    }
    response.data.result = response.data.events;
    return ea_bootstrap_1.Requester.success(jobRunID, response, config.verbose);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VuZHBvaW50L2V2ZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwREFBOEQ7QUFHakQsUUFBQSxrQkFBa0IsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBRS9CLFFBQUEsZUFBZSxHQUFvQjtJQUM5QyxPQUFPLEVBQUUsSUFBSTtJQUNiLElBQUksRUFBRSxJQUFJO0lBQ1YsTUFBTSxFQUFFLEtBQUs7Q0FDZCxDQUFBO0FBVUQsTUFBTSxVQUFVLEdBQUcsQ0FBQyxJQUFVLEVBQVUsRUFBRTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNqRCxPQUFPLElBQUksQ0FBQyxjQUFjLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFBO0FBQ2pHLENBQUMsQ0FBQTtBQUVNLE1BQU0sT0FBTyxHQUE4QixLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRTtJQUM3RSxNQUFNLFNBQVMsR0FBRyxJQUFJLHdCQUFTLENBQUMsT0FBTyxFQUFFLHVCQUFlLENBQUMsQ0FBQTtJQUN6RCxJQUFJLFNBQVMsQ0FBQyxLQUFLO1FBQUUsTUFBTSxTQUFTLENBQUMsS0FBSyxDQUFBO0lBRTFDLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFBO0lBQ3ZDLE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQTtJQUNoRCxNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUE7SUFDMUMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFBO0lBQzlDLE1BQU0sR0FBRyxHQUFHLFdBQVcsT0FBTyxXQUFXLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFBO0lBRTNELE1BQU0sU0FBUyxHQUFHO1FBQ2hCLEdBQUcsTUFBTSxDQUFDLEdBQUc7UUFDYixPQUFPLEVBQUU7WUFDUCxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTztZQUNyQixnQkFBZ0IsRUFBRSxNQUFNLENBQUMsTUFBTTtTQUNoQztRQUNELE1BQU0sRUFBRTtZQUNOLE9BQU8sRUFBRSxRQUFRO1NBQ2xCO1FBQ0QsR0FBRztLQUNKLENBQUE7SUFFRCxNQUFNLFFBQVEsR0FBRyxNQUFNLHdCQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ25ELElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtRQUN4QixRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBSSxRQUFRLENBQUMsSUFBdUIsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUNwRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsWUFBWSxLQUFLLE1BQU0sQ0FDekQsQ0FBQTtLQUNGO0lBQ0QsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUE7SUFFM0MsT0FBTyx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUM5RCxDQUFDLENBQUE7QUEvQlksUUFBQSxPQUFPLFdBK0JuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3RlciwgVmFsaWRhdG9yIH0gZnJvbSAnQGNoYWlubGluay9lYS1ib290c3RyYXAnXG5pbXBvcnQgeyBFeGVjdXRlV2l0aENvbmZpZywgQ29uZmlnLCBJbnB1dFBhcmFtZXRlcnMgfSBmcm9tICdAY2hhaW5saW5rL3R5cGVzJ1xuXG5leHBvcnQgY29uc3Qgc3VwcG9ydGVkRW5kcG9pbnRzID0gWydldmVudHMnXVxuXG5leHBvcnQgY29uc3QgaW5wdXRQYXJhbWV0ZXJzOiBJbnB1dFBhcmFtZXRlcnMgPSB7XG4gIHNwb3J0SWQ6IHRydWUsXG4gIGRhdGU6IHRydWUsXG4gIHN0YXR1czogZmFsc2UsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VTY2hlbWEge1xuICBldmVudHM6IHtcbiAgICBzY29yZToge1xuICAgICAgZXZlbnRfc3RhdHVzOiBzdHJpbmdcbiAgICB9XG4gIH1bXVxufVxuXG5jb25zdCBmb3JtYXREYXRlID0gKGRhdGU6IERhdGUpOiBzdHJpbmcgPT4ge1xuICBjb25zdCBwYWQgPSAobjogbnVtYmVyKSA9PiAobiA8IDEwID8gJzAnICsgbiA6IG4pXG4gIHJldHVybiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgKyAnLScgKyBwYWQoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBwYWQoZGF0ZS5nZXRVVENEYXRlKCkpXG59XG5cbmV4cG9ydCBjb25zdCBleGVjdXRlOiBFeGVjdXRlV2l0aENvbmZpZzxDb25maWc+ID0gYXN5bmMgKHJlcXVlc3QsIF8sIGNvbmZpZykgPT4ge1xuICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgVmFsaWRhdG9yKHJlcXVlc3QsIGlucHV0UGFyYW1ldGVycylcbiAgaWYgKHZhbGlkYXRvci5lcnJvcikgdGhyb3cgdmFsaWRhdG9yLmVycm9yXG5cbiAgY29uc3Qgam9iUnVuSUQgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmlkXG4gIGNvbnN0IHNwb3J0SWQgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmRhdGEuc3BvcnRJZFxuICBjb25zdCBkYXRlID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLmRhdGVcbiAgY29uc3Qgc3RhdHVzID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLnN0YXR1c1xuICBjb25zdCB1cmwgPSBgL3Nwb3J0cy8ke3Nwb3J0SWR9L2V2ZW50cy8ke2Zvcm1hdERhdGUoZGF0ZSl9YFxuXG4gIGNvbnN0IHJlcUNvbmZpZyA9IHtcbiAgICAuLi5jb25maWcuYXBpLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgIC4uLmNvbmZpZy5hcGkuaGVhZGVycyxcbiAgICAgICd4LXJhcGlkYXBpLWtleSc6IGNvbmZpZy5hcGlLZXksXG4gICAgfSxcbiAgICBwYXJhbXM6IHtcbiAgICAgIGluY2x1ZGU6ICdzY29yZXMnLFxuICAgIH0sXG4gICAgdXJsLFxuICB9XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBSZXF1ZXN0ZXIucmVxdWVzdChyZXFDb25maWcpXG4gIGlmIChzdGF0dXMgIT09IHVuZGVmaW5lZCkge1xuICAgIHJlc3BvbnNlLmRhdGEuZXZlbnRzID0gKHJlc3BvbnNlLmRhdGEgYXMgUmVzcG9uc2VTY2hlbWEpLmV2ZW50cy5maWx0ZXIoXG4gICAgICAoeyBzY29yZTogeyBldmVudF9zdGF0dXMgfSB9KSA9PiBldmVudF9zdGF0dXMgPT09IHN0YXR1cyxcbiAgICApXG4gIH1cbiAgcmVzcG9uc2UuZGF0YS5yZXN1bHQgPSByZXNwb25zZS5kYXRhLmV2ZW50c1xuXG4gIHJldHVybiBSZXF1ZXN0ZXIuc3VjY2Vzcyhqb2JSdW5JRCwgcmVzcG9uc2UsIGNvbmZpZy52ZXJib3NlKVxufVxuIl19