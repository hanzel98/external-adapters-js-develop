"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeWSHandler = exports.makeExecute = exports.execute = exports.customParams = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("./config");
exports.customParams = {
    base: ['base', 'from', 'asset'],
};
const execute = async (input, config) => {
    const validator = new ea_bootstrap_1.Validator(input, exports.customParams);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const symbol = validator.overrideSymbol(config_1.NAME).toUpperCase();
    // Fall back to getting the data from HTTP endpoint
    const url = `/symbol/${symbol}`;
    const params = {
        c: `${config.client.key}:${config.client.secret}`,
    };
    const request = {
        ...config.api,
        url,
        params,
    };
    const response = await ea_bootstrap_1.Requester.request(request);
    if (!response.data || response.data.length < 1) {
        throw new Error('no result for query');
    }
    // Replace array by the first object in array
    // to avoid unexpected behavior when returning arrays.
    response.data = response.data[0];
    response.data.result = ea_bootstrap_1.Requester.validateResultNumber(response.data, ['Last']);
    return ea_bootstrap_1.Requester.success(jobRunID, response);
};
exports.execute = execute;
const makeExecute = (config) => {
    return async (request) => exports.execute(request, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
const makeWSHandler = (config) => {
    // http://api.tradingeconomics.com/documentation/Streaming
    // https://github.com/boxhock/tradingeconomics-nodejs-stream/blob/master/src/index.ts
    const withApiKey = (url, key, secret) => `${url}?client=${key}:${secret}`;
    const getSubscription = (to) => ({ topic: 'subscribe', to });
    return () => {
        const defaultConfig = config || config_1.makeConfig();
        return {
            connection: {
                url: withApiKey(defaultConfig.api.baseWsURL || config_1.DEFAULT_WS_API_ENDPOINT, defaultConfig.client.key || '', defaultConfig.client.secret || ''),
            },
            subscribe: (input) => {
                const validator = new ea_bootstrap_1.Validator(input, exports.customParams, {}, false);
                if (validator.error) {
                    return;
                }
                const base = validator.overrideSymbol(config_1.NAME).toUpperCase();
                return getSubscription(base);
            },
            unsubscribe: () => undefined,
            subsFromMessage: (message) => getSubscription(message?.s),
            isError: (message) => Number(message.TYPE) > 400 && Number(message.TYPE) < 900,
            filter: (message) => {
                return message.topic && message.topic !== 'keepalive';
            },
            toResponse: (wsResponse) => ea_bootstrap_1.Requester.success(undefined, { data: { result: wsResponse?.price } }),
        };
    };
};
exports.makeWSHandler = makeWSHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUE4RDtBQUU5RCxxQ0FBNEU7QUFFL0QsUUFBQSxZQUFZLEdBQUc7SUFDMUIsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUM7Q0FDaEMsQ0FBQTtBQUVNLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFxQixFQUFFLE1BQWMsRUFBRSxFQUFFO0lBQ3JFLE1BQU0sU0FBUyxHQUFHLElBQUksd0JBQVMsQ0FBQyxLQUFLLEVBQUUsb0JBQVksQ0FBQyxDQUFBO0lBQ3BELElBQUksU0FBUyxDQUFDLEtBQUs7UUFBRSxNQUFNLFNBQVMsQ0FBQyxLQUFLLENBQUE7SUFFMUMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUE7SUFDdkMsTUFBTSxNQUFNLEdBQUksU0FBUyxDQUFDLGNBQWMsQ0FBQyxhQUFJLENBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUV2RSxtREFBbUQ7SUFDbkQsTUFBTSxHQUFHLEdBQUcsV0FBVyxNQUFNLEVBQUUsQ0FBQTtJQUUvQixNQUFNLE1BQU0sR0FBRztRQUNiLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO0tBQ2xELENBQUE7SUFFRCxNQUFNLE9BQU8sR0FBRztRQUNkLEdBQUcsTUFBTSxDQUFDLEdBQUc7UUFDYixHQUFHO1FBQ0gsTUFBTTtLQUNQLENBQUE7SUFFRCxNQUFNLFFBQVEsR0FBRyxNQUFNLHdCQUFTLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ2pELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUM5QyxNQUFN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O0FBQ0gsQ0FBQyxDQUFBO0FBbkNZLFFBQUEsYUFBYSxpQkFtQ3pCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdGVyLCBWYWxpZGF0b3IgfSBmcm9tICdAY2hhaW5saW5rL2VhLWJvb3RzdHJhcCdcbmltcG9ydCB7IEFkYXB0ZXJSZXF1ZXN0LCBBZGFwdGVyUmVzcG9uc2UsIE1ha2VXU0hhbmRsZXIgfSBmcm9tICdAY2hhaW5saW5rL3R5cGVzJ1xuaW1wb3J0IHsgQ29uZmlnLCBERUZBVUxUX1dTX0FQSV9FTkRQT0lOVCwgbWFrZUNvbmZpZywgTkFNRSB9IGZyb20gJy4vY29uZmlnJ1xuXG5leHBvcnQgY29uc3QgY3VzdG9tUGFyYW1zID0ge1xuICBiYXNlOiBbJ2Jhc2UnLCAnZnJvbScsICdhc3NldCddLFxufVxuXG5leHBvcnQgY29uc3QgZXhlY3V0ZSA9IGFzeW5jIChpbnB1dDogQWRhcHRlclJlcXVlc3QsIGNvbmZpZzogQ29uZmlnKSA9PiB7XG4gIGNvbnN0IHZhbGlkYXRvciA9IG5ldyBWYWxpZGF0b3IoaW5wdXQsIGN1c3RvbVBhcmFtcylcbiAgaWYgKHZhbGlkYXRvci5lcnJvcikgdGhyb3cgdmFsaWRhdG9yLmVycm9yXG5cbiAgY29uc3Qgam9iUnVuSUQgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmlkXG4gIGNvbnN0IHN5bWJvbCA9ICh2YWxpZGF0b3Iub3ZlcnJpZGVTeW1ib2woTkFNRSkgYXMgc3RyaW5nKS50b1VwcGVyQ2FzZSgpXG5cbiAgLy8gRmFsbCBiYWNrIHRvIGdldHRpbmcgdGhlIGRhdGEgZnJvbSBIVFRQIGVuZHBvaW50XG4gIGNvbnN0IHVybCA9IGAvc3ltYm9sLyR7c3ltYm9sfWBcblxuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgYzogYCR7Y29uZmlnLmNsaWVudC5rZXl9OiR7Y29uZmlnLmNsaWVudC5zZWNyZXR9YCxcbiAgfVxuXG4gIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgLi4uY29uZmlnLmFwaSxcbiAgICB1cmwsXG4gICAgcGFyYW1zLFxuICB9XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBSZXF1ZXN0ZXIucmVxdWVzdChyZXF1ZXN0KVxuICBpZiAoIXJlc3BvbnNlLmRhdGEgfHwgcmVzcG9uc2UuZGF0YS5sZW5ndGggPCAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdubyByZXN1bHQgZm9yIHF1ZXJ5JylcbiAgfVxuICAvLyBSZXBsYWNlIGFycmF5IGJ5IHRoZSBmaXJzdCBvYmplY3QgaW4gYXJyYXlcbiAgLy8gdG8gYXZvaWQgdW5leHBlY3RlZCBiZWhhdmlvciB3aGVuIHJldHVybmluZyBhcnJheXMuXG4gIHJlc3BvbnNlLmRhdGEgPSByZXNwb25zZS5kYXRhWzBdXG5cbiAgcmVzcG9uc2UuZGF0YS5yZXN1bHQgPSBSZXF1ZXN0ZXIudmFsaWRhdGVSZXN1bHROdW1iZXIocmVzcG9uc2UuZGF0YSwgWydMYXN0J10pXG4gIHJldHVybiBSZXF1ZXN0ZXIuc3VjY2Vzcyhqb2JSdW5JRCwgcmVzcG9uc2UpXG59XG5cbmV4cG9ydCBjb25zdCBtYWtlRXhlY3V0ZSA9IChjb25maWc/OiBDb25maWcpID0+IHtcbiAgcmV0dXJuIGFzeW5jIChyZXF1ZXN0OiBBZGFwdGVyUmVxdWVzdCkgPT4gZXhlY3V0ZShyZXF1ZXN0LCBjb25maWcgfHwgbWFrZUNvbmZpZygpKVxufVxuXG5leHBvcnQgY29uc3QgbWFrZVdTSGFuZGxlciA9IChjb25maWc/OiBDb25maWcpOiBNYWtlV1NIYW5kbGVyID0+IHtcbiAgLy8gaHR0cDovL2FwaS50cmFkaW5nZWNvbm9taWNzLmNvbS9kb2N1bWVudGF0aW9uL1N0cmVhbWluZ1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vYm94aG9jay90cmFkaW5nZWNvbm9taWNzLW5vZGVqcy1zdHJlYW0vYmxvYi9tYXN0ZXIvc3JjL2luZGV4LnRzXG4gIGNvbnN0IHdpdGhBcGlLZXkgPSAodXJsOiBzdHJpbmcsIGtleTogc3RyaW5nLCBzZWNyZXQ6IHN0cmluZykgPT4gYCR7dXJsfT9jbGllbnQ9JHtrZXl9OiR7c2VjcmV0fWBcbiAgY29uc3QgZ2V0U3Vic2NyaXB0aW9uID0gKHRvOiBzdHJpbmcpID0+ICh7IHRvcGljOiAnc3Vic2NyaWJlJywgdG8gfSlcblxuICByZXR1cm4gKCkgPT4ge1xuICAgIGNvbnN0IGRlZmF1bHRDb25maWcgPSBjb25maWcgfHwgbWFrZUNvbmZpZygpXG5cbiAgICByZXR1cm4ge1xuICAgICAgY29ubmVjdGlvbjoge1xuICAgICAgICB1cmw6IHdpdGhBcGlLZXkoXG4gICAgICAgICAgZGVmYXVsdENvbmZpZy5hcGkuYmFzZVdzVVJMIHx8IERFRkFVTFRfV1NfQVBJX0VORFBPSU5ULFxuICAgICAgICAgIGRlZmF1bHRDb25maWcuY2xpZW50LmtleSB8fCAnJyxcbiAgICAgICAgICBkZWZhdWx0Q29uZmlnLmNsaWVudC5zZWNyZXQgfHwgJycsXG4gICAgICAgICksXG4gICAgICB9LFxuICAgICAgc3Vic2NyaWJlOiAoaW5wdXQpID0+IHtcbiAgICAgICAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihpbnB1dCwgY3VzdG9tUGFyYW1zLCB7fSwgZmFsc2UpXG4gICAgICAgIGlmICh2YWxpZGF0b3IuZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBiYXNlID0gKHZhbGlkYXRvci5vdmVycmlkZVN5bWJvbChOQU1FKSBhcyBzdHJpbmcpLnRvVXBwZXJDYXNlKClcbiAgICAgICAgcmV0dXJuIGdldFN1YnNjcmlwdGlvbihiYXNlKVxuICAgICAgfSxcbiAgICAgIHVuc3Vic2NyaWJlOiAoKSA9PiB1bmRlZmluZWQsXG4gICAgICBzdWJzRnJvbU1lc3NhZ2U6IChtZXNzYWdlKSA9PiBnZXRTdWJzY3JpcHRpb24obWVzc2FnZT8ucyksXG4gICAgICBpc0Vycm9yOiAobWVzc2FnZTogYW55KSA9PiBOdW1iZXIobWVzc2FnZS5UWVBFKSA+IDQwMCAmJiBOdW1iZXIobWVzc2FnZS5UWVBFKSA8IDkwMCxcbiAgICAgIGZpbHRlcjogKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2UudG9waWMgJiYgbWVzc2FnZS50b3BpYyAhPT0gJ2tlZXBhbGl2ZSdcbiAgICAgIH0sXG4gICAgICB0b1Jlc3BvbnNlOiAod3NSZXNwb25zZTogYW55KTogQWRhcHRlclJlc3BvbnNlID0+XG4gICAgICAgIFJlcXVlc3Rlci5zdWNjZXNzKHVuZGVmaW5lZCwgeyBkYXRhOiB7IHJlc3VsdDogd3NSZXNwb25zZT8ucHJpY2UgfSB9KSxcbiAgICB9XG4gIH1cbn1cbiJdfQ==