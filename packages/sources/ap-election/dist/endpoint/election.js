"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.endpointResultPaths = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const ethers_1 = require("ethers");
exports.supportedEndpoints = ['election'];
exports.endpointResultPaths = {};
const customError = (data) => data.Response === 'Error';
exports.inputParameters = {
    date: true,
    statePostal: true,
    officeID: false,
    raceType: false,
    raceID: false,
    resultsType: false,
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    validateRequest(request);
    const jobRunID = validator.validated.id;
    const { raceType, date, resultsType, ...rest } = validator.validated.data;
    const url = `/elections/${date}`;
    const params = {
        ...rest,
        level: 'state',
        raceTypeID: raceType,
        format: 'json',
        winner: 'X',
        resultsType: resultsType || 'l',
        apikey: config.apiKey,
    };
    const options = { ...config.api, params, url };
    const response = await ea_bootstrap_1.Requester.request(options, customError);
    validateResponse(response.data);
    const race = response.data.races[0];
    const reportingUnit = getReportingUnit(race.reportingUnits, rest.statePostal);
    const raceWinner = getReportingUnitWinner(reportingUnit);
    response.data.precinctsReporting = reportingUnit.precinctsReporting;
    response.data.precinctsReportingPct = reportingUnit.precinctsReportingPct;
    response.data.winnerFirstName = raceWinner.first;
    response.data.winnerLastName = raceWinner.last;
    response.data.winnerVoteCount = raceWinner.voteCount;
    response.data.winnerCandidateId = raceWinner.candidateID;
    response.data.winnerParty = raceWinner.party;
    response.data.candidates = encodeCandidates(reportingUnit.candidates);
    return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, concatenateName(raceWinner)), config.verbose);
};
exports.execute = execute;
const validateRequest = (request) => {
    const { statePostal, officeID, raceID } = request.data;
    const statePostals = statePostal.split(',');
    if (statePostals.length > 1) {
        throw new ea_bootstrap_1.AdapterError({
            jobRunID: request.id,
            statusCode: 400,
            message: 'Adapter only supports finding results from a single state',
        });
    }
    if (!officeID && !raceID) {
        throw new ea_bootstrap_1.AdapterError({
            jobRunID: request.id,
            statusCode: 400,
            message: 'Either officeID or raceID must be present',
        });
    }
};
const validateResponse = (response) => {
    const races = response.races;
    if (races.length === 0) {
        throw Error('We could not find any races');
    }
    if (races.length > 1) {
        throw Error("We don't support finding the winner from multiple races");
    }
};
const getReportingUnit = (reportingUnits, statePostal) => {
    // Response should only contain a national RU if the statePostal is US but will contain both national and state for any other statePostal codes.
    const level = statePostal === 'US' ? 'national' : 'state';
    const reportingUnit = reportingUnits.find((ru) => ru.level === level);
    if (!reportingUnit) {
        throw Error('Cannot find reporting unit');
    }
    return reportingUnit;
};
const getReportingUnitWinner = (reportingUnit) => {
    for (const candidate of reportingUnit.candidates) {
        if (candidate.winner === 'X') {
            return candidate;
        }
    }
    throw Error('Candidate not found');
};
const concatenateName = (candidate) => `${candidate.voteCount},${candidate.last}`;
const encodeCandidates = (candidates) => {
    const encodedCandidates = [];
    const encodedValTypes = ['uint32', 'string', 'string', 'string', 'uint32', 'bool'];
    const abiCoder = ethers_1.utils.defaultAbiCoder;
    for (const { candidateID, party, first, last, voteCount, winner } of candidates) {
        const encodedCandidate = abiCoder.encode(encodedValTypes, [
            candidateID,
            party,
            first,
            last,
            voteCount,
            !!winner,
        ]);
        encodedCandidates.push(encodedCandidate);
    }
    return encodedCandidates;
};
//# sourceMappingURL=data:application/json;base64,