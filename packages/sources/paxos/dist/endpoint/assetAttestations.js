"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
exports.supportedEndpoints = ['assetAttestation'];
const customError = (data) => data.Response === 'Error';
exports.inputParameters = {
    asset: true,
};
const getAttestationURI = (asset) => `/asset-attestations/${asset.toUpperCase()}`;
const execute = async (input, _, config) => {
    const validator = new ea_bootstrap_1.Validator(input, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const asset = validator.validated.data.asset;
    const jobRunID = validator.validated.id;
    if (!asset)
        throw Error('asset must be provided');
    const url = getAttestationURI(asset);
    const reqConfig = { ...config.api, baseURL: config_1.DEFAULT_BASE_URL, url };
    const response = await ea_bootstrap_1.Requester.request(reqConfig, customError);
    const output = {
        asset: asset,
        auditorName: response.data.auditorName,
        lastAttestedAt: response.data.lastAttestedAt,
        amount: ea_bootstrap_1.Requester.validateResultNumber(response.data, ['amount']),
        verified: response.data.verified,
    };
    response.data = output;
    return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, response.data.amount));
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXRBdHRlc3RhdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZW5kcG9pbnQvYXNzZXRBdHRlc3RhdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQThEO0FBRTlELHNDQUE0QztBQUUvQixRQUFBLGtCQUFrQixHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtBQUV0RCxNQUFNLFdBQVcsR0FBRyxDQUFDLElBQVMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUE7QUFFL0MsUUFBQSxlQUFlLEdBQW9CO0lBQzlDLEtBQUssRUFBRSxJQUFJO0NBQ1osQ0FBQTtBQVVELE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUFDLHVCQUF1QixLQUFLLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQTtBQUVsRixNQUFNLE9BQU8sR0FBOEIsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUU7SUFDM0UsTUFBTSxTQUFTLEdBQUcsSUFBSSx3QkFBUyxDQUFDLEtBQUssRUFBRSx1QkFBZSxDQUFDLENBQUE7SUFDdkQsSUFBSSxTQUFTLENBQUMsS0FBSztRQUFFLE1BQU0sU0FBUyxDQUFDLEtBQUssQ0FBQTtJQUMxQyxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDNUMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUE7SUFFdkMsSUFBSSxDQUFDLEtBQUs7UUFBRSxNQUFNLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO0lBRWpELE1BQU0sR0FBRyxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3BDLE1BQU0sU0FBUyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSx5QkFBZ0IsRUFBRSxHQUFHLEVBQUUsQ0FBQTtJQUVuRSxNQUFNLFFBQVEsR0FBRyxNQUFNLHdCQUFTLENBQUMsT0FBTyxDQUFjLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQTtJQUU3RSxNQUFNLE1BQU0sR0FBRztRQUNiLEtBQUssRUFBRSxLQUFLO1FBQ1osV0FBVyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVztRQUN0QyxjQUFjLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxjQUFjO1FBQzVDLE1BQU0sRUFBRSx3QkFBUyxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNqRSxRQUFRLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRO0tBQ2pDLENBQUE7SUFFRCxRQUFRLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQTtJQUV0QixPQUFPLHdCQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSx3QkFBUyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO0FBQzFGLENBQUMsQ0FBQTtBQXhCWSxRQUFBLE9BQU8sV0F3Qm5CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdGVyLCBWYWxpZGF0b3IgfSBmcm9tICdAY2hhaW5saW5rL2VhLWJvb3RzdHJhcCdcbmltcG9ydCB7IENvbmZpZywgRXhlY3V0ZVdpdGhDb25maWcsIElucHV0UGFyYW1ldGVycyB9IGZyb20gJ0BjaGFpbmxpbmsvdHlwZXMnXG5pbXBvcnQgeyBERUZBVUxUX0JBU0VfVVJMIH0gZnJvbSAnLi4vY29uZmlnJ1xuXG5leHBvcnQgY29uc3Qgc3VwcG9ydGVkRW5kcG9pbnRzID0gWydhc3NldEF0dGVzdGF0aW9uJ11cblxuY29uc3QgY3VzdG9tRXJyb3IgPSAoZGF0YTogYW55KSA9PiBkYXRhLlJlc3BvbnNlID09PSAnRXJyb3InXG5cbmV4cG9ydCBjb25zdCBpbnB1dFBhcmFtZXRlcnM6IElucHV0UGFyYW1ldGVycyA9IHtcbiAgYXNzZXQ6IHRydWUsXG59XG5cbnR5cGUgQXR0ZXN0YXRpb24gPSB7XG4gIGFzc2V0OiBzdHJpbmdcbiAgYXVkaXRvck5hbWU6IHN0cmluZ1xuICBsYXN0QXR0ZXN0ZWRBdDogc3RyaW5nXG4gIGFtb3VudDogbnVtYmVyXG4gIHZlcmlmaWVkOiBib29sZWFuXG59XG5cbmNvbnN0IGdldEF0dGVzdGF0aW9uVVJJID0gKGFzc2V0OiBzdHJpbmcpID0+IGAvYXNzZXQtYXR0ZXN0YXRpb25zLyR7YXNzZXQudG9VcHBlckNhc2UoKX1gXG5cbmV4cG9ydCBjb25zdCBleGVjdXRlOiBFeGVjdXRlV2l0aENvbmZpZzxDb25maWc+ID0gYXN5bmMgKGlucHV0LCBfLCBjb25maWcpID0+IHtcbiAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihpbnB1dCwgaW5wdXRQYXJhbWV0ZXJzKVxuICBpZiAodmFsaWRhdG9yLmVycm9yKSB0aHJvdyB2YWxpZGF0b3IuZXJyb3JcbiAgY29uc3QgYXNzZXQgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmRhdGEuYXNzZXRcbiAgY29uc3Qgam9iUnVuSUQgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmlkXG5cbiAgaWYgKCFhc3NldCkgdGhyb3cgRXJyb3IoJ2Fzc2V0IG11c3QgYmUgcHJvdmlkZWQnKVxuXG4gIGNvbnN0IHVybCA9IGdldEF0dGVzdGF0aW9uVVJJKGFzc2V0KVxuICBjb25zdCByZXFDb25maWcgPSB7IC4uLmNvbmZpZy5hcGksIGJhc2VVUkw6IERFRkFVTFRfQkFTRV9VUkwsIHVybCB9XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBSZXF1ZXN0ZXIucmVxdWVzdDxBdHRlc3RhdGlvbj4ocmVxQ29uZmlnLCBjdXN0b21FcnJvcilcblxuICBjb25zdCBvdXRwdXQgPSB7XG4gICAgYXNzZXQ6IGFzc2V0LFxuICAgIGF1ZGl0b3JOYW1lOiByZXNwb25zZS5kYXRhLmF1ZGl0b3JOYW1lLFxuICAgIGxhc3RBdHRlc3RlZEF0OiByZXNwb25zZS5kYXRhLmxhc3RBdHRlc3RlZEF0LFxuICAgIGFtb3VudDogUmVxdWVzdGVyLnZhbGlkYXRlUmVzdWx0TnVtYmVyKHJlc3BvbnNlLmRhdGEsIFsnYW1vdW50J10pLFxuICAgIHZlcmlmaWVkOiByZXNwb25zZS5kYXRhLnZlcmlmaWVkLFxuICB9XG5cbiAgcmVzcG9uc2UuZGF0YSA9IG91dHB1dFxuXG4gIHJldHVybiBSZXF1ZXN0ZXIuc3VjY2Vzcyhqb2JSdW5JRCwgUmVxdWVzdGVyLndpdGhSZXN1bHQocmVzcG9uc2UsIHJlc3BvbnNlLmRhdGEuYW1vdW50KSlcbn1cbiJdfQ==