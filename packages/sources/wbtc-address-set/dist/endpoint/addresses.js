"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
exports.supportedEndpoints = ['addresses'];
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request);
    if (validator.error)
        throw validator.error;
    ea_bootstrap_1.Requester.logConfig(config);
    const jobRunID = validator.validated.id;
    if (!config.addressesEndpoint) {
        throw new Error('The address list endpoint has not been configured for this adapter');
    }
    const options = { ...config.api, baseURL: config.addressesEndpoint };
    const response = await ea_bootstrap_1.Requester.request(options);
    const result = response.data.result
        .filter((a) => a.type == 'custodial' && a.balance)
        .map((a) => ({ ...a, coin: 'btc', chain: 'mainnet' }));
    const output = { ...response, data: { ...response.data, result } };
    return ea_bootstrap_1.Requester.success(jobRunID, output, config.verbose);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzc2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VuZHBvaW50L2FkZHJlc3Nlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwREFBOEQ7QUFJakQsUUFBQSxrQkFBa0IsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBaUJ4QyxNQUFNLE9BQU8sR0FBOEIsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUU7SUFDN0UsTUFBTSxTQUFTLEdBQUcsSUFBSSx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ3hDLElBQUksU0FBUyxDQUFDLEtBQUs7UUFBRSxNQUFNLFNBQVMsQ0FBQyxLQUFLLENBQUE7SUFFMUMsd0JBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUE7SUFFM0IsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUE7SUFFdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRTtRQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLG9FQUFvRSxDQUFDLENBQUE7S0FDdEY7SUFFRCxNQUFNLE9BQU8sR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLGlCQUFpQixFQUFFLENBQUE7SUFDcEUsTUFBTSxRQUFRLEdBQUcsTUFBTSx3QkFBUyxDQUFDLE9BQU8sQ0FBcUIsT0FBTyxDQUFDLENBQUE7SUFFckUsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNO1NBQ2hDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxXQUFXLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQztTQUNqRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFFeEQsTUFBTSxNQUFNLEdBQUcsRUFBRSxHQUFHLFFBQVEsRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQTtJQUNsRSxPQUFPLHdCQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBQzVELENBQUMsQ0FBQTtBQXJCWSxRQUFBLE9BQU8sV0FxQm5CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdGVyLCBWYWxpZGF0b3IgfSBmcm9tICdAY2hhaW5saW5rL2VhLWJvb3RzdHJhcCdcbmltcG9ydCB7IEV4ZWN1dGVXaXRoQ29uZmlnIH0gZnJvbSAnQGNoYWlubGluay90eXBlcydcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uL2NvbmZpZydcblxuZXhwb3J0IGNvbnN0IHN1cHBvcnRlZEVuZHBvaW50cyA9IFsnYWRkcmVzc2VzJ11cblxudHlwZSBBUElNZW1iZXJzUmVzcG9uc2UgPSB7XG4gIHJlc3VsdDogQWRkcmVzc1tdXG4gIGNvdW50OiBudW1iZXJcbn1cblxudHlwZSBBZGRyZXNzID0ge1xuICBpZDogc3RyaW5nXG4gIGFkZHJlc3M6IHN0cmluZ1xuICBiYWxhbmNlPzogbnVtYmVyXG4gIHR5cGU6IEFkZHJlc3NUeXBlXG4gIHZlcmlmaWVkOiBib29sZWFuXG59XG5cbnR5cGUgQWRkcmVzc1R5cGUgPSAnY3VzdG9kaWFsJyB8ICdtZXJjaGFudCcgfCAnZGVwb3NpdCdcblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGU6IEV4ZWN1dGVXaXRoQ29uZmlnPENvbmZpZz4gPSBhc3luYyAocmVxdWVzdCwgXywgY29uZmlnKSA9PiB7XG4gIGNvbnN0IHZhbGlkYXRvciA9IG5ldyBWYWxpZGF0b3IocmVxdWVzdClcbiAgaWYgKHZhbGlkYXRvci5lcnJvcikgdGhyb3cgdmFsaWRhdG9yLmVycm9yXG5cbiAgUmVxdWVzdGVyLmxvZ0NvbmZpZyhjb25maWcpXG5cbiAgY29uc3Qgam9iUnVuSUQgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmlkXG5cbiAgaWYgKCFjb25maWcuYWRkcmVzc2VzRW5kcG9pbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBhZGRyZXNzIGxpc3QgZW5kcG9pbnQgaGFzIG5vdCBiZWVuIGNvbmZpZ3VyZWQgZm9yIHRoaXMgYWRhcHRlcicpXG4gIH1cblxuICBjb25zdCBvcHRpb25zID0geyAuLi5jb25maWcuYXBpLCBiYXNlVVJMOiBjb25maWcuYWRkcmVzc2VzRW5kcG9pbnQgfVxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IFJlcXVlc3Rlci5yZXF1ZXN0PEFQSU1lbWJlcnNSZXNwb25zZT4ob3B0aW9ucylcblxuICBjb25zdCByZXN1bHQgPSByZXNwb25zZS5kYXRhLnJlc3VsdFxuICAgIC5maWx0ZXIoKGEpID0+IGEudHlwZSA9PSAnY3VzdG9kaWFsJyAmJiBhLmJhbGFuY2UpXG4gICAgLm1hcCgoYSkgPT4gKHsgLi4uYSwgY29pbjogJ2J0YycsIGNoYWluOiAnbWFpbm5ldCcgfSkpXG5cbiAgY29uc3Qgb3V0cHV0ID0geyAuLi5yZXNwb25zZSwgZGF0YTogeyAuLi5yZXNwb25zZS5kYXRhLCByZXN1bHQgfSB9XG4gIHJldHVybiBSZXF1ZXN0ZXIuc3VjY2Vzcyhqb2JSdW5JRCwgb3V0cHV0LCBjb25maWcudmVyYm9zZSlcbn1cbiJdfQ==