"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
exports.supportedEndpoints = ['members'];
const inputParams = {};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, inputParams);
    if (validator.error)
        throw validator.error;
    ea_bootstrap_1.Requester.logConfig(config);
    const jobRunID = validator.validated.id;
    if (!config.membersEndpoint) {
        throw new Error('The member list endpoint has not been configured for this adapter');
    }
    const options = { ...config.api, baseURL: config.membersEndpoint };
    const response = await ea_bootstrap_1.Requester.request(options);
    const result = response.data.result
        .filter((member) => member.token === 'wbtc')
        .flatMap((member) => member.addresses)
        .filter((a) => a.type == 'custodial' && a.balance)
        .map((a) => ({ ...a, coin: 'btc', chain: 'mainnet' }));
    const output = { ...response, data: { ...response.data, result } };
    return ea_bootstrap_1.Requester.success(jobRunID, output, config.verbose);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtYmVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbmRwb2ludC9tZW1iZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUE4RDtBQUlqRCxRQUFBLGtCQUFrQixHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7QUE4QjdDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQTtBQUVmLE1BQU0sT0FBTyxHQUE4QixLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRTtJQUM3RSxNQUFNLFNBQVMsR0FBRyxJQUFJLHdCQUFTLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFBO0lBQ3JELElBQUksU0FBUyxDQUFDLEtBQUs7UUFBRSxNQUFNLFNBQVMsQ0FBQyxLQUFLLENBQUE7SUFFMUMsd0JBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUE7SUFFM0IsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUE7SUFFdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUU7UUFDM0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxtRUFBbUUsQ0FBQyxDQUFBO0tBQ3JGO0lBRUQsTUFBTSxPQUFPLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQTtJQUNsRSxNQUFNLFFBQVEsR0FBRyxNQUFNLHdCQUFTLENBQUMsT0FBTyxDQUFxQixPQUFPLENBQUMsQ0FBQTtJQUVyRSxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU07U0FDaEMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxLQUFLLE1BQU0sQ0FBQztTQUMzQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7U0FDckMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLFdBQVcsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDO1NBQ2pELEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUV4RCxNQUFNLE1BQU0sR0FBRyxFQUFFLEdBQUcsUUFBUSxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsUUFBUSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFBO0lBQ2xFLE9BQU8sd0JBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUE7QUFDNUQsQ0FBQyxDQUFBO0FBdkJZLFFBQUEsT0FBTyxXQXVCbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0ZXIsIFZhbGlkYXRvciB9IGZyb20gJ0BjaGFpbmxpbmsvZWEtYm9vdHN0cmFwJ1xuaW1wb3J0IHsgRXhlY3V0ZVdpdGhDb25maWcgfSBmcm9tICdAY2hhaW5saW5rL3R5cGVzJ1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJ1xuXG5leHBvcnQgY29uc3Qgc3VwcG9ydGVkRW5kcG9pbnRzID0gWydtZW1iZXJzJ11cblxudHlwZSBBUElNZW1iZXJzUmVzcG9uc2UgPSB7XG4gIHJlc3VsdDogTWVtYmVyW11cbiAgY291bnQ6IG51bWJlclxufVxuXG50eXBlIE1lbWJlciA9IHtcbiAgaWQ6IHN0cmluZ1xuICB0b2tlbjogc3RyaW5nXG4gIHRhZ3M6IHN0cmluZ1tdXG4gIG5hbWU6IHN0cmluZ1xuICBhZGRyZXNzZXM6IEFkZHJlc3NbXVxuICBkZXNjcmlwdGlvbjogc3RyaW5nXG4gIG1lcmNoYW50UG9ydGFsVXJpPzogc3RyaW5nXG4gIHdlYnNpdGVVcmk/OiBzdHJpbmdcbn1cblxudHlwZSBBZGRyZXNzID0ge1xuICBhZGRyZXNzOiBzdHJpbmdcbiAgdmVyaWZpZWQ6IGJvb2xlYW5cbiAgdHlwZTogQWRkcmVzc1R5cGVcbiAgZGF0ZTogc3RyaW5nXG4gIGNoYWluOiBDaGFpblR5cGVcbiAgYmFsYW5jZT86IG51bWJlclxufVxuXG50eXBlIEFkZHJlc3NUeXBlID0gJ2N1c3RvZGlhbCcgfCAnbWVyY2hhbnQnIHwgJ2RlcG9zaXQnXG50eXBlIENoYWluVHlwZSA9ICdidGMnIHwgJ2V0aCdcblxuY29uc3QgaW5wdXRQYXJhbXMgPSB7fVxuXG5leHBvcnQgY29uc3QgZXhlY3V0ZTogRXhlY3V0ZVdpdGhDb25maWc8Q29uZmlnPiA9IGFzeW5jIChyZXF1ZXN0LCBfLCBjb25maWcpID0+IHtcbiAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihyZXF1ZXN0LCBpbnB1dFBhcmFtcylcbiAgaWYgKHZhbGlkYXRvci5lcnJvcikgdGhyb3cgdmFsaWRhdG9yLmVycm9yXG5cbiAgUmVxdWVzdGVyLmxvZ0NvbmZpZyhjb25maWcpXG5cbiAgY29uc3Qgam9iUnVuSUQgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmlkXG5cbiAgaWYgKCFjb25maWcubWVtYmVyc0VuZHBvaW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgbWVtYmVyIGxpc3QgZW5kcG9pbnQgaGFzIG5vdCBiZWVuIGNvbmZpZ3VyZWQgZm9yIHRoaXMgYWRhcHRlcicpXG4gIH1cblxuICBjb25zdCBvcHRpb25zID0geyAuLi5jb25maWcuYXBpLCBiYXNlVVJMOiBjb25maWcubWVtYmVyc0VuZHBvaW50IH1cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBSZXF1ZXN0ZXIucmVxdWVzdDxBUElNZW1iZXJzUmVzcG9uc2U+KG9wdGlvbnMpXG5cbiAgY29uc3QgcmVzdWx0ID0gcmVzcG9uc2UuZGF0YS5yZXN1bHRcbiAgICAuZmlsdGVyKChtZW1iZXIpID0+IG1lbWJlci50b2tlbiA9PT0gJ3didGMnKVxuICAgIC5mbGF0TWFwKChtZW1iZXIpID0+IG1lbWJlci5hZGRyZXNzZXMpXG4gICAgLmZpbHRlcigoYSkgPT4gYS50eXBlID09ICdjdXN0b2RpYWwnICYmIGEuYmFsYW5jZSlcbiAgICAubWFwKChhKSA9PiAoeyAuLi5hLCBjb2luOiAnYnRjJywgY2hhaW46ICdtYWlubmV0JyB9KSlcblxuICBjb25zdCBvdXRwdXQgPSB7IC4uLnJlc3BvbnNlLCBkYXRhOiB7IC4uLnJlc3BvbnNlLmRhdGEsIHJlc3VsdCB9IH1cbiAgcmV0dXJuIFJlcXVlc3Rlci5zdWNjZXNzKGpvYlJ1bklELCBvdXRwdXQsIGNvbmZpZy52ZXJib3NlKVxufVxuIl19