"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
exports.supportedEndpoints = ['balance'];
exports.inputParameters = {
    addresses: ['addresses', 'result'],
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const addresses = validator.validated.data.addresses;
    if (!Array.isArray(addresses) || addresses.length === 0) {
        throw new ea_bootstrap_1.AdapterError({
            jobRunID,
            message: `Input, at 'addresses' or 'result' path, must be a non-empty array.`,
            statusCode: 400,
        });
    }
    const balances = await Promise.all(addresses.map((addr) => getBalance(addr.address, config)));
    const response = {
        jobRunID,
        status: 200,
        statusText: 'OK',
        headers: {},
        config: {},
        data: balances,
    };
    return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, balances));
};
exports.execute = execute;
const getBalance = async (address, config) => ({
    address,
    balance: (await config.provider.getBalance(address)).toString(),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFsYW5jZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbmRwb2ludC9iYWxhbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUE0RTtBQUkvRCxRQUFBLGtCQUFrQixHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7QUFFaEMsUUFBQSxlQUFlLEdBQW9CO0lBQzlDLFNBQVMsRUFBRSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUM7Q0FDbkMsQ0FBQTtBQVdNLE1BQU0sT0FBTyxHQUE4QixLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRTtJQUM3RSxNQUFNLFNBQVMsR0FBRyxJQUFJLHdCQUFTLENBQUMsT0FBTyxFQUFFLHVCQUFlLENBQUMsQ0FBQTtJQUN6RCxJQUFJLFNBQVMsQ0FBQyxLQUFLO1FBQUUsTUFBTSxTQUFTLENBQUMsS0FBSyxDQUFBO0lBRTFDLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFBO0lBQ3ZDLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQXNCLENBQUE7SUFFakUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDdkQsTUFBTSxJQUFJLDJCQUFZLENBQUM7WUFDckIsUUFBUTtZQUNSLE9BQU8sRUFBRSxvRUFBb0U7WUFDN0UsVUFBVSxFQUFFLEdBQUc7U0FDaEIsQ0FBQyxDQUFBO0tBQ0g7SUFFRCxNQUFNLFFBQVEsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRTdGLE1BQU0sUUFBUSxHQUFHO1FBQ2YsUUFBUTtRQUNSLE1BQU0sRUFBRSxHQUFHO1FBQ1gsVUFBVSxFQUFFLElBQUk7UUFDaEIsT0FBTyxFQUFFLEVBQUU7UUFDWCxNQUFNLEVBQUUsRUFBRTtRQUNWLElBQUksRUFBRSxRQUFRO0tBQ2YsQ0FBQTtJQUVELE9BQU8sd0JBQVMsQ0FBQyxPQUFPLENBQ3RCLFFBQVEsRUFDUix3QkFBUyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsUUFBK0MsQ0FBQyxDQUNoRixDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBOUJZLFFBQUEsT0FBTyxXQThCbkI7QUFFRCxNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQUUsT0FBZSxFQUFFLE1BQWMsRUFBK0IsRUFBRSxDQUFDLENBQUM7SUFDMUYsT0FBTztJQUNQLE9BQU8sRUFBRSxDQUFDLE1BQU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUU7Q0FDaEUsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmFsaWRhdG9yLCBSZXF1ZXN0ZXIsIEFkYXB0ZXJFcnJvciB9IGZyb20gJ0BjaGFpbmxpbmsvZWEtYm9vdHN0cmFwJ1xuaW1wb3J0IHsgRXhlY3V0ZVdpdGhDb25maWcsIElucHV0UGFyYW1ldGVycywgQXhpb3NSZXNwb25zZSB9IGZyb20gJ0BjaGFpbmxpbmsvdHlwZXMnXG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuLi9jb25maWcnXG5cbmV4cG9ydCBjb25zdCBzdXBwb3J0ZWRFbmRwb2ludHMgPSBbJ2JhbGFuY2UnXVxuXG5leHBvcnQgY29uc3QgaW5wdXRQYXJhbWV0ZXJzOiBJbnB1dFBhcmFtZXRlcnMgPSB7XG4gIGFkZHJlc3NlczogWydhZGRyZXNzZXMnLCAncmVzdWx0J10sXG59XG5cbmludGVyZmFjZSBBZGRyZXNzV2l0aEJhbGFuY2Uge1xuICBhZGRyZXNzOiBzdHJpbmdcbiAgYmFsYW5jZTogc3RyaW5nXG59XG5cbmludGVyZmFjZSBBZGRyZXNzIHtcbiAgYWRkcmVzczogc3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCBleGVjdXRlOiBFeGVjdXRlV2l0aENvbmZpZzxDb25maWc+ID0gYXN5bmMgKHJlcXVlc3QsIF8sIGNvbmZpZykgPT4ge1xuICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgVmFsaWRhdG9yKHJlcXVlc3QsIGlucHV0UGFyYW1ldGVycylcbiAgaWYgKHZhbGlkYXRvci5lcnJvcikgdGhyb3cgdmFsaWRhdG9yLmVycm9yXG5cbiAgY29uc3Qgam9iUnVuSUQgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmlkXG4gIGNvbnN0IGFkZHJlc3NlcyA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5hZGRyZXNzZXMgYXMgQWRkcmVzc1tdXG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KGFkZHJlc3NlcykgfHwgYWRkcmVzc2VzLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBBZGFwdGVyRXJyb3Ioe1xuICAgICAgam9iUnVuSUQsXG4gICAgICBtZXNzYWdlOiBgSW5wdXQsIGF0ICdhZGRyZXNzZXMnIG9yICdyZXN1bHQnIHBhdGgsIG11c3QgYmUgYSBub24tZW1wdHkgYXJyYXkuYCxcbiAgICAgIHN0YXR1c0NvZGU6IDQwMCxcbiAgICB9KVxuICB9XG5cbiAgY29uc3QgYmFsYW5jZXMgPSBhd2FpdCBQcm9taXNlLmFsbChhZGRyZXNzZXMubWFwKChhZGRyKSA9PiBnZXRCYWxhbmNlKGFkZHIuYWRkcmVzcywgY29uZmlnKSkpXG5cbiAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgam9iUnVuSUQsXG4gICAgc3RhdHVzOiAyMDAsXG4gICAgc3RhdHVzVGV4dDogJ09LJyxcbiAgICBoZWFkZXJzOiB7fSxcbiAgICBjb25maWc6IHt9LFxuICAgIGRhdGE6IGJhbGFuY2VzLFxuICB9XG5cbiAgcmV0dXJuIFJlcXVlc3Rlci5zdWNjZXNzKFxuICAgIGpvYlJ1bklELFxuICAgIFJlcXVlc3Rlci53aXRoUmVzdWx0KHJlc3BvbnNlLCBiYWxhbmNlcyBhcyBBeGlvc1Jlc3BvbnNlPEFkZHJlc3NXaXRoQmFsYW5jZVtdPiksXG4gIClcbn1cblxuY29uc3QgZ2V0QmFsYW5jZSA9IGFzeW5jIChhZGRyZXNzOiBzdHJpbmcsIGNvbmZpZzogQ29uZmlnKTogUHJvbWlzZTxBZGRyZXNzV2l0aEJhbGFuY2U+ID0+ICh7XG4gIGFkZHJlc3MsXG4gIGJhbGFuY2U6IChhd2FpdCBjb25maWcucHJvdmlkZXIuZ2V0QmFsYW5jZShhZGRyZXNzKSkudG9TdHJpbmcoKSxcbn0pXG4iXX0=