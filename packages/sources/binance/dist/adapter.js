"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeWSHandler = exports.makeExecute = exports.endpointSelector = exports.execute = void 0;
const tslib_1 = require("tslib");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("./config");
const endpoints = tslib_1.__importStar(require("./endpoint"));
const execute = async (request, context, config) => {
    return ea_bootstrap_1.Builder.buildSelector(request, context, config, endpoints);
};
exports.execute = execute;
const endpointSelector = (request) => ea_bootstrap_1.Builder.selectEndpoint(request, config_1.makeConfig(), endpoints);
exports.endpointSelector = endpointSelector;
const makeExecute = (config) => {
    return async (request, context) => exports.execute(request, context, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
const makeWSHandler = (config) => {
    const getSubscription = (symbol, subscribe = true) => {
        if (!symbol)
            return;
        return {
            method: subscribe ? 'SUBSCRIBE' : 'UNSUBSCRIBE',
            params: [`${symbol}@miniTicker`],
            id: 1,
        };
    };
    const getSymbol = (input) => {
        const validator = new ea_bootstrap_1.Validator(input, endpoints.crypto.inputParameters, {}, false);
        if (validator.error)
            return;
        const symbol = validator.validated.data.base.toUpperCase();
        const convert = validator.validated.data.quote.toUpperCase();
        return `${symbol.toLowerCase()}${convert.toLowerCase()}`;
    };
    return () => {
        const defaultConfig = config || config_1.makeConfig();
        return {
            connection: {
                url: defaultConfig.api.baseWsURL || config_1.DEFAULT_WS_API_ENDPOINT,
            },
            subscribe: (input) => getSubscription(getSymbol(input)),
            unsubscribe: (input) => getSubscription(getSymbol(input), false),
            subsFromMessage: (message) => {
                if (!message.s)
                    return undefined;
                return getSubscription(`${message.s.toLowerCase()}`);
            },
            isError: (message) => message.type === 'error',
            // Ignore everything is not a ticker message. Throw an error on incoming errors.
            filter: (message) => message.e === '24hrMiniTicker',
            toResponse: (message) => {
                const result = ea_bootstrap_1.Requester.validateResultNumber(message, ['c']);
                return ea_bootstrap_1.Requester.success('1', { data: { result } });
            },
        };
    };
};
exports.makeWSHandler = makeWSHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSwwREFBdUU7QUFTdkUscUNBQThEO0FBQzlELDhEQUF1QztBQUVoQyxNQUFNLE9BQU8sR0FBOEIsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7SUFDbkYsT0FBTyxzQkFBTyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQTtBQUNuRSxDQUFDLENBQUE7QUFGWSxRQUFBLE9BQU8sV0FFbkI7QUFFTSxNQUFNLGdCQUFnQixHQUFHLENBQUMsT0FBdUIsRUFBZSxFQUFFLENBQ3ZFLHNCQUFPLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxtQkFBVSxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUE7QUFEN0MsUUFBQSxnQkFBZ0Isb0JBQzZCO0FBRW5ELE1BQU0sV0FBVyxHQUEyQixDQUFDLE1BQU0sRUFBRSxFQUFFO0lBQzVELE9BQU8sS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLGVBQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sSUFBSSxtQkFBVSxFQUFFLENBQUMsQ0FBQTtBQUN0RixDQUFDLENBQUE7QUFGWSxRQUFBLFdBQVcsZUFFdkI7QUFFTSxNQUFNLGFBQWEsR0FBRyxDQUFDLE1BQWUsRUFBaUIsRUFBRTtJQUM5RCxNQUFNLGVBQWUsR0FBRyxDQUFDLE1BQWUsRUFBRSxTQUFTLEdBQUcsSUFBSSxFQUFFLEVBQUU7UUFDNUQsSUFBSSxDQUFDLE1BQU07WUFBRSxPQUFNO1FBQ25CLE9BQU87WUFDTCxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLGFBQWE7WUFDL0MsTUFBTSxFQUFFLENBQUMsR0FBRyxNQUFNLGFBQWEsQ0FBQztZQUNoQyxFQUFFLEVBQUUsQ0FBQztTQUNOLENBQUE7SUFDSCxDQUFDLENBQUE7SUFDRCxNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQXFCLEVBQUUsRUFBRTtRQUMxQyxNQUFNLFNBQVMsR0FBRyxJQUFJLHdCQUFTLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUNuRixJQUFJLFNBQVMsQ0FBQyxLQUFLO1lBQUUsT0FBTTtRQUMzQixNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDMUQsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQzVELE9BQU8sR0FBRyxNQUFNLENBQUMsV0FBVyxFQUFFLEdBQUcsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUE7SUFDMUQsQ0FBQyxDQUFBO0lBQ0QsT0FBTyxHQUFHLEVBQUU7UUFDVixNQUFNLGFBQWEsR0FBRyxNQUFNLElBQUksbUJBQVUsRUFBRSxDQUFBO1FBQzVDLE9BQU87WUFDTCxVQUFVLEVBQUU7Z0JBQ1YsR0FBRyxFQUFFLGFBQWEsQ0FBQyxHQUFHLENBQUMsU0FBUyxJQUFJLGdDQUF1QjthQUM1RDtZQUNELFNBQVMsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN2RCxXQUFXLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxDQUFDO1lBQ2hFLGVBQWUsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQUUsT0FBTyxTQUFTLENBQUE7Z0JBQ2hDLE9BQU8sZUFBZSxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUE7WUFDdEQsQ0FBQztZQUNELE9BQU8sRUFBRSxDQUFDLE9BQVksRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxPQUFPO1lBQ25ELGdGQUFnRjtZQUNoRixNQUFNLEVBQUUsQ0FBQyxPQUFZLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssZ0JBQWdCO1lBQ3hELFVBQVUsRUFBRSxDQUFDLE9BQVksRUFBRSxFQUFFO2dCQUMzQixNQUFNLE1BQU0sR0FBRyx3QkFBUyxDQUFDLG9CQUFvQixDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7Z0JBQzdELE9BQU8sd0JBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFBO1lBQ3JELENBQUM7U0FDRixDQUFBO0lBQ0gsQ0FBQyxDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBckNZLFFBQUEsYUFBYSxpQkFxQ3pCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdGVyLCBWYWxpZGF0b3IsIEJ1aWxkZXIgfSBmcm9tICdAY2hhaW5saW5rL2VhLWJvb3RzdHJhcCdcbmltcG9ydCB7XG4gIENvbmZpZyxcbiAgRXhlY3V0ZVdpdGhDb25maWcsXG4gIEV4ZWN1dGVGYWN0b3J5LFxuICBNYWtlV1NIYW5kbGVyLFxuICBBZGFwdGVyUmVxdWVzdCxcbiAgQVBJRW5kcG9pbnQsXG59IGZyb20gJ0BjaGFpbmxpbmsvdHlwZXMnXG5pbXBvcnQgeyBtYWtlQ29uZmlnLCBERUZBVUxUX1dTX0FQSV9FTkRQT0lOVCB9IGZyb20gJy4vY29uZmlnJ1xuaW1wb3J0ICogYXMgZW5kcG9pbnRzIGZyb20gJy4vZW5kcG9pbnQnXG5cbmV4cG9ydCBjb25zdCBleGVjdXRlOiBFeGVjdXRlV2l0aENvbmZpZzxDb25maWc+ID0gYXN5bmMgKHJlcXVlc3QsIGNvbnRleHQsIGNvbmZpZykgPT4ge1xuICByZXR1cm4gQnVpbGRlci5idWlsZFNlbGVjdG9yKHJlcXVlc3QsIGNvbnRleHQsIGNvbmZpZywgZW5kcG9pbnRzKVxufVxuXG5leHBvcnQgY29uc3QgZW5kcG9pbnRTZWxlY3RvciA9IChyZXF1ZXN0OiBBZGFwdGVyUmVxdWVzdCk6IEFQSUVuZHBvaW50ID0+XG4gIEJ1aWxkZXIuc2VsZWN0RW5kcG9pbnQocmVxdWVzdCwgbWFrZUNvbmZpZygpLCBlbmRwb2ludHMpXG5cbmV4cG9ydCBjb25zdCBtYWtlRXhlY3V0ZTogRXhlY3V0ZUZhY3Rvcnk8Q29uZmlnPiA9IChjb25maWcpID0+IHtcbiAgcmV0dXJuIGFzeW5jIChyZXF1ZXN0LCBjb250ZXh0KSA9PiBleGVjdXRlKHJlcXVlc3QsIGNvbnRleHQsIGNvbmZpZyB8fCBtYWtlQ29uZmlnKCkpXG59XG5cbmV4cG9ydCBjb25zdCBtYWtlV1NIYW5kbGVyID0gKGNvbmZpZz86IENvbmZpZyk6IE1ha2VXU0hhbmRsZXIgPT4ge1xuICBjb25zdCBnZXRTdWJzY3JpcHRpb24gPSAoc3ltYm9sPzogc3RyaW5nLCBzdWJzY3JpYmUgPSB0cnVlKSA9PiB7XG4gICAgaWYgKCFzeW1ib2wpIHJldHVyblxuICAgIHJldHVybiB7XG4gICAgICBtZXRob2Q6IHN1YnNjcmliZSA/ICdTVUJTQ1JJQkUnIDogJ1VOU1VCU0NSSUJFJyxcbiAgICAgIHBhcmFtczogW2Ake3N5bWJvbH1AbWluaVRpY2tlcmBdLFxuICAgICAgaWQ6IDEsXG4gICAgfVxuICB9XG4gIGNvbnN0IGdldFN5bWJvbCA9IChpbnB1dDogQWRhcHRlclJlcXVlc3QpID0+IHtcbiAgICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgVmFsaWRhdG9yKGlucHV0LCBlbmRwb2ludHMuY3J5cHRvLmlucHV0UGFyYW1ldGVycywge30sIGZhbHNlKVxuICAgIGlmICh2YWxpZGF0b3IuZXJyb3IpIHJldHVyblxuICAgIGNvbnN0IHN5bWJvbCA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5iYXNlLnRvVXBwZXJDYXNlKClcbiAgICBjb25zdCBjb252ZXJ0ID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLnF1b3RlLnRvVXBwZXJDYXNlKClcbiAgICByZXR1cm4gYCR7c3ltYm9sLnRvTG93ZXJDYXNlKCl9JHtjb252ZXJ0LnRvTG93ZXJDYXNlKCl9YFxuICB9XG4gIHJldHVybiAoKSA9PiB7XG4gICAgY29uc3QgZGVmYXVsdENvbmZpZyA9IGNvbmZpZyB8fCBtYWtlQ29uZmlnKClcbiAgICByZXR1cm4ge1xuICAgICAgY29ubmVjdGlvbjoge1xuICAgICAgICB1cmw6IGRlZmF1bHRDb25maWcuYXBpLmJhc2VXc1VSTCB8fCBERUZBVUxUX1dTX0FQSV9FTkRQT0lOVCxcbiAgICAgIH0sXG4gICAgICBzdWJzY3JpYmU6IChpbnB1dCkgPT4gZ2V0U3Vic2NyaXB0aW9uKGdldFN5bWJvbChpbnB1dCkpLFxuICAgICAgdW5zdWJzY3JpYmU6IChpbnB1dCkgPT4gZ2V0U3Vic2NyaXB0aW9uKGdldFN5bWJvbChpbnB1dCksIGZhbHNlKSxcbiAgICAgIHN1YnNGcm9tTWVzc2FnZTogKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgaWYgKCFtZXNzYWdlLnMpIHJldHVybiB1bmRlZmluZWRcbiAgICAgICAgcmV0dXJuIGdldFN1YnNjcmlwdGlvbihgJHttZXNzYWdlLnMudG9Mb3dlckNhc2UoKX1gKVxuICAgICAgfSxcbiAgICAgIGlzRXJyb3I6IChtZXNzYWdlOiBhbnkpID0+IG1lc3NhZ2UudHlwZSA9PT0gJ2Vycm9yJyxcbiAgICAgIC8vIElnbm9yZSBldmVyeXRoaW5nIGlzIG5vdCBhIHRpY2tlciBtZXNzYWdlLiBUaHJvdyBhbiBlcnJvciBvbiBpbmNvbWluZyBlcnJvcnMuXG4gICAgICBmaWx0ZXI6IChtZXNzYWdlOiBhbnkpID0+IG1lc3NhZ2UuZSA9PT0gJzI0aHJNaW5pVGlja2VyJyxcbiAgICAgIHRvUmVzcG9uc2U6IChtZXNzYWdlOiBhbnkpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gUmVxdWVzdGVyLnZhbGlkYXRlUmVzdWx0TnVtYmVyKG1lc3NhZ2UsIFsnYyddKVxuICAgICAgICByZXR1cm4gUmVxdWVzdGVyLnN1Y2Nlc3MoJzEnLCB7IGRhdGE6IHsgcmVzdWx0IH0gfSlcbiAgICAgIH0sXG4gICAgfVxuICB9XG59XG4iXX0=