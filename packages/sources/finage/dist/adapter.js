"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeWSHandler = exports.makeExecute = exports.execute = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("./config");
const customParams = {
    base: ['base', 'from', 'symbol'],
    endpoint: false,
};
const DEFAULT_ENDPOINT = 'stock';
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, customParams);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const endpoint = validator.validated.data.endpoint || DEFAULT_ENDPOINT;
    let url;
    const base = validator.validated.data.base;
    const symbol = Array.isArray(base)
        ? base.map((symbol) => symbol.toUpperCase()).join(',')
        : validator.overrideSymbol(config_1.NAME).toUpperCase();
    const apikey = ea_bootstrap_1.util.getRandomRequiredEnv('API_KEY');
    let responsePath;
    let params;
    switch (endpoint) {
        case 'stock': {
            url = getStockURL(base, symbol);
            responsePath = ['bid'];
            params = {
                apikey,
            };
            break;
        }
        case 'eod': {
            url = `/agg/stock/prev-close/${symbol}`;
            responsePath = ['results', 0, 'c'];
            params = {
                apikey,
            };
            break;
        }
        default: {
            throw new ea_bootstrap_1.AdapterError({
                jobRunID,
                message: `Endpoint ${endpoint} not supported.`,
                statusCode: 400,
            });
        }
    }
    const options = {
        ...config.api,
        url,
        params,
    };
    const response = await ea_bootstrap_1.Requester.request(options);
    if (Array.isArray(base)) {
        return handleBatchedRequest(jobRunID, response);
    }
    response.data.result = ea_bootstrap_1.Requester.validateResultNumber(response.data, responsePath);
    return ea_bootstrap_1.Requester.success(jobRunID, response);
};
exports.execute = execute;
const makeExecute = (config) => {
    return async (request, context) => exports.execute(request, context, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
const getStockURL = (base, symbol) => {
    if (Array.isArray(base)) {
        return `/last/stocks/?symbols=${symbol}`;
    }
    return `/last/stock/${symbol}`;
};
const handleBatchedRequest = (jobRunID, response) => {
    const payload = [];
    for (const base in response.data) {
        payload.push({
            symbol: response.data[base].symbol,
            bid: response.data[base].bid,
        });
        ea_bootstrap_1.Requester.validateResultNumber(response.data, [base, 'bid']);
    }
    response.data.result = payload;
    return ea_bootstrap_1.Requester.success(jobRunID, response);
};
const makeWSHandler = (config) => {
    const getSubscription = (symbols, subscribe = true) => {
        if (!symbols)
            return;
        const sub = {
            action: subscribe ? 'subscribe' : 'unsubscribe',
            symbols,
        };
        return sub;
    };
    const getSymbol = (input) => {
        const validator = new ea_bootstrap_1.Validator(input, customParams, {}, false);
        if (validator.error)
            return;
        return validator.validated.data.base.toUpperCase();
    };
    return () => {
        const defaultConfig = config || config_1.makeConfig();
        return {
            connection: {
                url: defaultConfig.api.baseWsURL || config_1.DEFAULT_WS_API_ENDPOINT,
            },
            subscribe: (input) => getSubscription(getSymbol(input)),
            unsubscribe: (input) => getSubscription(getSymbol(input), false),
            subsFromMessage: (message) => {
                if (!message.s)
                    return undefined;
                return getSubscription(`${message.s.toUpperCase()}`);
            },
            isError: (message) => message['status_code'] && message['status_code'] !== 200,
            filter: (message) => !!message.p,
            toResponse: (message) => {
                const result = ea_bootstrap_1.Requester.validateResultNumber(message, ['p']);
                return ea_bootstrap_1.Requester.success('1', { data: { result } });
            },
        };
    };
};
exports.makeWSHandler = makeWSHandler;
//# sourceMappingURL=data:application/json;base64,