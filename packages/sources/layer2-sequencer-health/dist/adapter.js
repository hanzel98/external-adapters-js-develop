"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExecute = exports.execute = exports.inputParameters = exports.getL2NetworkStatus = exports.makeNetworkStatusCheck = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("./config");
const network_1 = require("./network");
const makeNetworkStatusCheck = (network) => {
    let lastSeenBlock = {
        block: 0,
        timestamp: 0,
    };
    const _isPastBlock = (block) => block <= lastSeenBlock.block;
    const _isStaleBlock = (block, delta) => {
        return _isPastBlock(block) && Date.now() - lastSeenBlock.timestamp >= delta;
    };
    // If the request hit a replica node that fell behind, the block could be previous to the last seen. Including a deltaBlocks range to consider this case.
    const _isValidBlock = (block, deltaBlocks) => lastSeenBlock.block - block <= deltaBlocks;
    const _updateLastSeenBlock = (block) => {
        lastSeenBlock = {
            block,
            timestamp: Date.now(),
        };
    };
    return async (delta, deltaBlocks) => {
        const block = await network_1.requestBlockHeight(network);
        if (!_isValidBlock(block, deltaBlocks))
            throw new Error(`Block found #${block} is previous to last seen #${lastSeenBlock.block} with more than ${deltaBlocks} difference`);
        if (!_isStaleBlock(block, delta)) {
            if (!_isPastBlock(block))
                _updateLastSeenBlock(block);
            ea_bootstrap_1.Logger.info(`Block #${block} is not considered stale at ${Date.now()}. Last seen block #${lastSeenBlock.block} was at ${lastSeenBlock.timestamp}`);
            return true;
        }
        ea_bootstrap_1.Logger.warn(`Block #${block} is considered stale at ${Date.now()}. Last seen block #${lastSeenBlock.block} was at ${lastSeenBlock.timestamp}, more than ${delta} milliseconds ago.`);
        return false;
    };
};
exports.makeNetworkStatusCheck = makeNetworkStatusCheck;
const networks = {
    [config_1.Networks.Arbitrum]: exports.makeNetworkStatusCheck(config_1.Networks.Arbitrum),
    [config_1.Networks.Optimism]: exports.makeNetworkStatusCheck(config_1.Networks.Optimism),
};
const getL2NetworkStatus = (network, delta, deltaBlocks) => {
    return networks[network](delta, deltaBlocks);
};
exports.getL2NetworkStatus = getL2NetworkStatus;
exports.inputParameters = {
    network: true,
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const network = validator.validated.data.network;
    const _translateIntoFeedResponse = (isHealthy) => {
        return isHealthy ? 0 : 1;
    };
    const _respond = (isHealthy) => ea_bootstrap_1.Requester.success(jobRunID, {
        data: {
            isHealthy: _translateIntoFeedResponse(isHealthy),
            result: _translateIntoFeedResponse(isHealthy),
        },
    }, config.verbose);
    const _tryMethod = (fn) => async (network, delta, deltaBlocks) => {
        try {
            const isHealthy = await fn(network, delta, deltaBlocks);
            if (isHealthy === false) {
                ea_bootstrap_1.Logger.warn(`Method ${fn.name} reported an unhealthy response. Network ${network} considered unhealthy`);
                return false;
            }
        }
        catch (e) {
            ea_bootstrap_1.Logger.error(`Method ${fn.name} failed: ${e.message}. Network ${network} considered unhealthy`);
            return false;
        }
        return true;
    };
    // #1 Option: Direct check on health endpoint
    // #2 Option: Check block height
    // #3 Option: Check L1 Rollup Contract
    // If every method succeeds, the Network is considered healthy
    // If any method fails, an empty tx is sent. This determines the final state
    const wrappedMethods = [network_1.getSequencerHealth, exports.getL2NetworkStatus, network_1.getL1RollupStatus].map(_tryMethod);
    for (let i = 0; i < wrappedMethods.length; i++) {
        const method = wrappedMethods[i];
        const isHealthy = await method(network, config.delta, config.deltaBlocks);
        if (!isHealthy) {
            ea_bootstrap_1.Logger.info(`Checking unhealthy network ${network} with transaction submission`);
            const isHealthyByTransaction = await network_1.getStatusByTransaction(network, config.timeoutLimit);
            if (isHealthyByTransaction) {
                ea_bootstrap_1.Logger.info(`Transaction submission check succeeded. Network ${network} can be considered healthy`);
                return _respond(true);
            }
            return _respond(false);
        }
    }
    // Every method succeded. Network is healthy
    return _respond(true);
};
exports.execute = execute;
const makeExecute = (config) => {
    return async (request, context) => exports.execute(request, context, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
//# sourceMappingURL=data:application/json;base64,