"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeConfig = exports.HEALTH_ENDPOINTS = exports.RPC_ENDPOINTS = exports.Networks = exports.DEFAULT_TIMEOUT_LIMIT = exports.DEFAULT_DELTA_BLOCKS = exports.DEFAULT_DELTA_TIME = exports.NAME = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
exports.NAME = 'L2_SEQUENCER_HEALTH';
// 2 minutes
exports.DEFAULT_DELTA_TIME = 2 * 60 * 1000;
// Blocks that replica nodes can fall behind
exports.DEFAULT_DELTA_BLOCKS = 6;
// milliseconds to consider a timeout transaction (10 secs)
exports.DEFAULT_TIMEOUT_LIMIT = 5 * 1000;
var Networks;
(function (Networks) {
    Networks["Arbitrum"] = "arbitrum";
    Networks["Optimism"] = "optimism";
})(Networks = exports.Networks || (exports.Networks = {}));
exports.RPC_ENDPOINTS = {
    [Networks.Arbitrum]: ea_bootstrap_1.util.getEnv('ARBITRUM_RPC_ENDPOINT') || 'https://arb1.arbitrum.io/rpc',
    [Networks.Optimism]: ea_bootstrap_1.util.getEnv('OPTIMISM_RPC_ENDPOINT') || 'https://mainnet.optimism.io',
};
exports.HEALTH_ENDPOINTS = {
    [Networks.Arbitrum]: {
        endpoint: ea_bootstrap_1.util.getEnv('ARBITRUM_HEALTH_ENDPOINT'),
        responsePath: [],
    },
    [Networks.Optimism]: {
        endpoint: ea_bootstrap_1.util.getEnv('OPTIMISM_HEALTH_ENDPOINT') || 'https://mainnet-sequencer.optimism.io/health',
        responsePath: ['healthy'],
    },
};
const makeConfig = (prefix) => {
    const isCacheEnabled = ea_bootstrap_1.util.parseBool(ea_bootstrap_1.util.getEnv('CACHE_ENABLED'));
    if (isCacheEnabled) {
        throw new Error('Cache cannot be enabled on this adapter');
    }
    const config = ea_bootstrap_1.Requester.getDefaultConfig(prefix);
    const delta = Number(ea_bootstrap_1.util.getEnv('DELTA', prefix)) || exports.DEFAULT_DELTA_TIME;
    const deltaBlocks = Number(ea_bootstrap_1.util.getEnv('DELTA_BLOCKS', prefix)) || exports.DEFAULT_DELTA_BLOCKS;
    const timeoutLimit = Number(ea_bootstrap_1.util.getEnv('NETWORK_TIMEOUT_LIMIT', prefix)) || exports.DEFAULT_TIMEOUT_LIMIT;
    return { ...config, delta, deltaBlocks, timeoutLimit };
};
exports.makeConfig = makeConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwREFBeUQ7QUFHNUMsUUFBQSxJQUFJLEdBQUcscUJBQXFCLENBQUE7QUFFekMsWUFBWTtBQUNDLFFBQUEsa0JBQWtCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUE7QUFDL0MsNENBQTRDO0FBQy9CLFFBQUEsb0JBQW9CLEdBQUcsQ0FBQyxDQUFBO0FBQ3JDLDJEQUEyRDtBQUM5QyxRQUFBLHFCQUFxQixHQUFHLENBQUMsR0FBRyxJQUFJLENBQUE7QUFFN0MsSUFBWSxRQUdYO0FBSEQsV0FBWSxRQUFRO0lBQ2xCLGlDQUFxQixDQUFBO0lBQ3JCLGlDQUFxQixDQUFBO0FBQ3ZCLENBQUMsRUFIVyxRQUFRLEdBQVIsZ0JBQVEsS0FBUixnQkFBUSxRQUduQjtBQUVZLFFBQUEsYUFBYSxHQUFHO0lBQzNCLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLG1CQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLElBQUksOEJBQThCO0lBQzNGLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLG1CQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLElBQUksNkJBQTZCO0NBQzNGLENBQUE7QUFFWSxRQUFBLGdCQUFnQixHQUFHO0lBQzlCLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ25CLFFBQVEsRUFBRSxtQkFBSSxDQUFDLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQztRQUNqRCxZQUFZLEVBQUUsRUFBRTtLQUNqQjtJQUNELENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ25CLFFBQVEsRUFDTixtQkFBSSxDQUFDLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLDhDQUE4QztRQUMzRixZQUFZLEVBQUUsQ0FBQyxTQUFTLENBQUM7S0FDMUI7Q0FDRixDQUFBO0FBUU0sTUFBTSxVQUFVLEdBQUcsQ0FBQyxNQUFlLEVBQWtCLEVBQUU7SUFDNUQsTUFBTSxjQUFjLEdBQUcsbUJBQUksQ0FBQyxTQUFTLENBQUMsbUJBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQTtJQUNuRSxJQUFJLGNBQWMsRUFBRTtRQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUE7S0FDM0Q7SUFDRCxNQUFNLE1BQU0sR0FBRyx3QkFBUyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ2pELE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxtQkFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSwwQkFBa0IsQ0FBQTtJQUN4RSxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsbUJBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksNEJBQW9CLENBQUE7SUFDdkYsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLG1CQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1QixFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksNkJBQXFCLENBQUE7SUFDbEcsT0FBTyxFQUFFLEdBQUcsTUFBTSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLENBQUE7QUFDeEQsQ0FBQyxDQUFBO0FBVlksUUFBQSxVQUFVLGNBVXRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdGVyLCB1dGlsIH0gZnJvbSAnQGNoYWlubGluay9lYS1ib290c3RyYXAnXG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICdAY2hhaW5saW5rL3R5cGVzJ1xuXG5leHBvcnQgY29uc3QgTkFNRSA9ICdMMl9TRVFVRU5DRVJfSEVBTFRIJ1xuXG4vLyAyIG1pbnV0ZXNcbmV4cG9ydCBjb25zdCBERUZBVUxUX0RFTFRBX1RJTUUgPSAyICogNjAgKiAxMDAwXG4vLyBCbG9ja3MgdGhhdCByZXBsaWNhIG5vZGVzIGNhbiBmYWxsIGJlaGluZFxuZXhwb3J0IGNvbnN0IERFRkFVTFRfREVMVEFfQkxPQ0tTID0gNlxuLy8gbWlsbGlzZWNvbmRzIHRvIGNvbnNpZGVyIGEgdGltZW91dCB0cmFuc2FjdGlvbiAoMTAgc2VjcylcbmV4cG9ydCBjb25zdCBERUZBVUxUX1RJTUVPVVRfTElNSVQgPSA1ICogMTAwMFxuXG5leHBvcnQgZW51bSBOZXR3b3JrcyB7XG4gIEFyYml0cnVtID0gJ2FyYml0cnVtJyxcbiAgT3B0aW1pc20gPSAnb3B0aW1pc20nLFxufVxuXG5leHBvcnQgY29uc3QgUlBDX0VORFBPSU5UUyA9IHtcbiAgW05ldHdvcmtzLkFyYml0cnVtXTogdXRpbC5nZXRFbnYoJ0FSQklUUlVNX1JQQ19FTkRQT0lOVCcpIHx8ICdodHRwczovL2FyYjEuYXJiaXRydW0uaW8vcnBjJyxcbiAgW05ldHdvcmtzLk9wdGltaXNtXTogdXRpbC5nZXRFbnYoJ09QVElNSVNNX1JQQ19FTkRQT0lOVCcpIHx8ICdodHRwczovL21haW5uZXQub3B0aW1pc20uaW8nLFxufVxuXG5leHBvcnQgY29uc3QgSEVBTFRIX0VORFBPSU5UUyA9IHtcbiAgW05ldHdvcmtzLkFyYml0cnVtXToge1xuICAgIGVuZHBvaW50OiB1dGlsLmdldEVudignQVJCSVRSVU1fSEVBTFRIX0VORFBPSU5UJyksXG4gICAgcmVzcG9uc2VQYXRoOiBbXSxcbiAgfSxcbiAgW05ldHdvcmtzLk9wdGltaXNtXToge1xuICAgIGVuZHBvaW50OlxuICAgICAgdXRpbC5nZXRFbnYoJ09QVElNSVNNX0hFQUxUSF9FTkRQT0lOVCcpIHx8ICdodHRwczovL21haW5uZXQtc2VxdWVuY2VyLm9wdGltaXNtLmlvL2hlYWx0aCcsXG4gICAgcmVzcG9uc2VQYXRoOiBbJ2hlYWx0aHknXSxcbiAgfSxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFeHRlbmRlZENvbmZpZyBleHRlbmRzIENvbmZpZyB7XG4gIGRlbHRhOiBudW1iZXJcbiAgZGVsdGFCbG9ja3M6IG51bWJlclxuICB0aW1lb3V0TGltaXQ6IG51bWJlclxufVxuXG5leHBvcnQgY29uc3QgbWFrZUNvbmZpZyA9IChwcmVmaXg/OiBzdHJpbmcpOiBFeHRlbmRlZENvbmZpZyA9PiB7XG4gIGNvbnN0IGlzQ2FjaGVFbmFibGVkID0gdXRpbC5wYXJzZUJvb2wodXRpbC5nZXRFbnYoJ0NBQ0hFX0VOQUJMRUQnKSlcbiAgaWYgKGlzQ2FjaGVFbmFibGVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYWNoZSBjYW5ub3QgYmUgZW5hYmxlZCBvbiB0aGlzIGFkYXB0ZXInKVxuICB9XG4gIGNvbnN0IGNvbmZpZyA9IFJlcXVlc3Rlci5nZXREZWZhdWx0Q29uZmlnKHByZWZpeClcbiAgY29uc3QgZGVsdGEgPSBOdW1iZXIodXRpbC5nZXRFbnYoJ0RFTFRBJywgcHJlZml4KSkgfHwgREVGQVVMVF9ERUxUQV9USU1FXG4gIGNvbnN0IGRlbHRhQmxvY2tzID0gTnVtYmVyKHV0aWwuZ2V0RW52KCdERUxUQV9CTE9DS1MnLCBwcmVmaXgpKSB8fCBERUZBVUxUX0RFTFRBX0JMT0NLU1xuICBjb25zdCB0aW1lb3V0TGltaXQgPSBOdW1iZXIodXRpbC5nZXRFbnYoJ05FVFdPUktfVElNRU9VVF9MSU1JVCcsIHByZWZpeCkpIHx8IERFRkFVTFRfVElNRU9VVF9MSU1JVFxuICByZXR1cm4geyAuLi5jb25maWcsIGRlbHRhLCBkZWx0YUJsb2NrcywgdGltZW91dExpbWl0IH1cbn1cbiJdfQ==