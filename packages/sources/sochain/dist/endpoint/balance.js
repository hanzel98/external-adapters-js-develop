"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExecute = exports.inputParameters = exports.supportedEndpoints = void 0;
const ethers_1 = require("ethers");
const ea_factories_1 = require("@chainlink/ea-factories");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
exports.supportedEndpoints = ['balance'];
exports.inputParameters = ea_factories_1.balance.inputParameters;
const getBalanceURI = (account, confirmations) => {
    account.coin = account.coin?.toUpperCase();
    if (account.chain === 'testnet')
        account.coin = account.coin + 'TEST';
    return `/api/v2/get_address_balance/${account.coin}/${account.address}/${confirmations}`;
};
const getBalance = async (account, config) => {
    const options = {
        ...config.api,
        url: getBalanceURI(account, config.confirmations),
    };
    const response = await ea_bootstrap_1.Requester.request(options);
    // Each BTC has 8 decimal places
    const balance = ethers_1.ethers.utils.parseUnits(response.data.data.confirmed_balance, 8).toString();
    return {
        payload: response.data,
        result: [{ ...account, balance }],
    };
};
const isSupported = (coin, chain) => config_1.isChainType(chain) && config_1.isCoinType(coin);
const makeExecute = (config) => ea_factories_1.balance.make({ ...config, getBalance, isSupported });
exports.makeExecute = makeExecute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFsYW5jZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbmRwb2ludC9iYWxhbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1DQUErQjtBQUMvQiwwREFBaUQ7QUFDakQsMERBQW1EO0FBRW5ELHNDQUFtRDtBQUV0QyxRQUFBLGtCQUFrQixHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7QUFFaEMsUUFBQSxlQUFlLEdBQUcsc0JBQU8sQ0FBQyxlQUFlLENBQUE7QUFFdEQsTUFBTSxhQUFhLEdBQUcsQ0FBQyxPQUFnQixFQUFFLGFBQXFCLEVBQUUsRUFBRTtJQUNoRSxPQUFPLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLENBQUE7SUFDMUMsSUFBSSxPQUFPLENBQUMsS0FBSyxLQUFLLFNBQVM7UUFBRSxPQUFPLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFBO0lBQ3JFLE9BQU8sK0JBQStCLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLE9BQU8sSUFBSSxhQUFhLEVBQUUsQ0FBQTtBQUMxRixDQUFDLENBQUE7QUFFRCxNQUFNLFVBQVUsR0FBdUIsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtJQUMvRCxNQUFNLE9BQU8sR0FBRztRQUNkLEdBQUcsTUFBTSxDQUFDLEdBQUc7UUFDYixHQUFHLEVBQUUsYUFBYSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsYUFBdUIsQ0FBQztLQUM1RCxDQUFBO0lBRUQsTUFBTSxRQUFRLEdBQUcsTUFBTSx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNqRCxnQ0FBZ0M7SUFDaEMsTUFBTSxPQUFPLEdBQUcsZUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUE7SUFFM0YsT0FBTztRQUNMLE9BQU8sRUFBRSxRQUFRLENBQUMsSUFBSTtRQUN0QixNQUFNLEVBQUUsQ0FBQyxFQUFFLEdBQUcsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDO0tBQ2xDLENBQUE7QUFDSCxDQUFDLENBQUE7QUFFRCxNQUFNLFdBQVcsR0FBd0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxvQkFBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLG1CQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7QUFFekYsTUFBTSxXQUFXLEdBQTJCLENBQUMsTUFBZSxFQUFFLEVBQUUsQ0FDckUsc0JBQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLE1BQU0sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQTtBQUR6QyxRQUFBLFdBQVcsZUFDOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBldGhlcnMgfSBmcm9tICdldGhlcnMnXG5pbXBvcnQgeyBiYWxhbmNlIH0gZnJvbSAnQGNoYWlubGluay9lYS1mYWN0b3JpZXMnXG5pbXBvcnQgeyBSZXF1ZXN0ZXIgfSBmcm9tICdAY2hhaW5saW5rL2VhLWJvb3RzdHJhcCdcbmltcG9ydCB7IEFjY291bnQsIENvbmZpZywgRXhlY3V0ZUZhY3RvcnkgfSBmcm9tICdAY2hhaW5saW5rL3R5cGVzJ1xuaW1wb3J0IHsgaXNDb2luVHlwZSwgaXNDaGFpblR5cGUgfSBmcm9tICcuLi9jb25maWcnXG5cbmV4cG9ydCBjb25zdCBzdXBwb3J0ZWRFbmRwb2ludHMgPSBbJ2JhbGFuY2UnXVxuXG5leHBvcnQgY29uc3QgaW5wdXRQYXJhbWV0ZXJzID0gYmFsYW5jZS5pbnB1dFBhcmFtZXRlcnNcblxuY29uc3QgZ2V0QmFsYW5jZVVSSSA9IChhY2NvdW50OiBBY2NvdW50LCBjb25maXJtYXRpb25zOiBudW1iZXIpID0+IHtcbiAgYWNjb3VudC5jb2luID0gYWNjb3VudC5jb2luPy50b1VwcGVyQ2FzZSgpXG4gIGlmIChhY2NvdW50LmNoYWluID09PSAndGVzdG5ldCcpIGFjY291bnQuY29pbiA9IGFjY291bnQuY29pbiArICdURVNUJ1xuICByZXR1cm4gYC9hcGkvdjIvZ2V0X2FkZHJlc3NfYmFsYW5jZS8ke2FjY291bnQuY29pbn0vJHthY2NvdW50LmFkZHJlc3N9LyR7Y29uZmlybWF0aW9uc31gXG59XG5cbmNvbnN0IGdldEJhbGFuY2U6IGJhbGFuY2UuR2V0QmFsYW5jZSA9IGFzeW5jIChhY2NvdW50LCBjb25maWcpID0+IHtcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAuLi5jb25maWcuYXBpLFxuICAgIHVybDogZ2V0QmFsYW5jZVVSSShhY2NvdW50LCBjb25maWcuY29uZmlybWF0aW9ucyBhcyBudW1iZXIpLFxuICB9XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBSZXF1ZXN0ZXIucmVxdWVzdChvcHRpb25zKVxuICAvLyBFYWNoIEJUQyBoYXMgOCBkZWNpbWFsIHBsYWNlc1xuICBjb25zdCBiYWxhbmNlID0gZXRoZXJzLnV0aWxzLnBhcnNlVW5pdHMocmVzcG9uc2UuZGF0YS5kYXRhLmNvbmZpcm1lZF9iYWxhbmNlLCA4KS50b1N0cmluZygpXG5cbiAgcmV0dXJuIHtcbiAgICBwYXlsb2FkOiByZXNwb25zZS5kYXRhLFxuICAgIHJlc3VsdDogW3sgLi4uYWNjb3VudCwgYmFsYW5jZSB9XSxcbiAgfVxufVxuXG5jb25zdCBpc1N1cHBvcnRlZDogYmFsYW5jZS5Jc1N1cHBvcnRlZCA9IChjb2luLCBjaGFpbikgPT4gaXNDaGFpblR5cGUoY2hhaW4pICYmIGlzQ29pblR5cGUoY29pbilcblxuZXhwb3J0IGNvbnN0IG1ha2VFeGVjdXRlOiBFeGVjdXRlRmFjdG9yeTxDb25maWc+ID0gKGNvbmZpZz86IENvbmZpZykgPT5cbiAgYmFsYW5jZS5tYWtlKHsgLi4uY29uZmlnLCBnZXRCYWxhbmNlLCBpc1N1cHBvcnRlZCB9KVxuIl19