"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExecute = exports.inputParams = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("./config");
exports.inputParams = {
    name: true,
    type: true,
    do: false,
    cd: false,
};
const execute = async (input, _, config) => {
    const validator = new ea_bootstrap_1.Validator(input, exports.inputParams);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const { name, type, do: doBit, cd: cdBit } = validator.validated.data;
    const params = {
        name,
        type,
        ...(doBit && { do: doBit }),
        ...(cdBit && { cd: cdBit }),
    };
    const headers = {
        Accept: 'application/dns-json',
    };
    const result = await ea_bootstrap_1.Requester.request({
        url: config.api?.url,
        headers,
        params,
    });
    const data = { ...result.data };
    return ea_bootstrap_1.Requester.success(jobRunID, {
        status: 200,
        data: data,
    }, config.verbose);
};
const makeExecute = (config) => (input, context) => execute(input, context, config || config_1.makeConfig());
exports.makeExecute = makeExecute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDBEQUE4RDtBQUM5RCxxQ0FBcUM7QUFHeEIsUUFBQSxXQUFXLEdBQUc7SUFDekIsSUFBSSxFQUFFLElBQUk7SUFDVixJQUFJLEVBQUUsSUFBSTtJQUNWLEVBQUUsRUFBRSxLQUFLO0lBQ1QsRUFBRSxFQUFFLEtBQUs7Q0FDVixDQUFBO0FBRUQsTUFBTSxPQUFPLEdBQThCLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFO0lBQ3BFLE1BQU0sU0FBUyxHQUFHLElBQUksd0JBQVMsQ0FBQyxLQUFLLEVBQUUsbUJBQVcsQ0FBQyxDQUFBO0lBQ25ELElBQUksU0FBUyxDQUFDLEtBQUs7UUFBRSxNQUFNLFNBQVMsQ0FBQyxLQUFLLENBQUE7SUFFMUMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUE7SUFDdkMsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUE7SUFFckUsTUFBTSxNQUFNLEdBQUc7UUFDYixJQUFJO1FBQ0osSUFBSTtRQUNKLEdBQUcsQ0FBQyxLQUFLLElBQUksRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUM7UUFDM0IsR0FBRyxDQUFDLEtBQUssSUFBSSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQztLQUM1QixDQUFBO0lBQ0QsTUFBTSxPQUFPLEdBQUc7UUFDZCxNQUFNLEVBQUUsc0JBQXNCO0tBQy9CLENBQUE7SUFFRCxNQUFNLE1BQU0sR0FBRyxNQUFNLHdCQUFTLENBQUMsT0FBTyxDQUFtQjtRQUN2RCxHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHO1FBQ3BCLE9BQU87UUFDUCxNQUFNO0tBQ1AsQ0FBQyxDQUFBO0lBRUYsTUFBTSxJQUFJLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUUvQixPQUFPLHdCQUFTLENBQUMsT0FBTyxDQUN0QixRQUFRLEVBQ1I7UUFDRSxNQUFNLEVBQUUsR0FBRztRQUNYLElBQUksRUFBRSxJQUFJO0tBQ1gsRUFDRCxNQUFNLENBQUMsT0FBTyxDQUNmLENBQUE7QUFDSCxDQUFDLENBQUE7QUFFTSxNQUFNLFdBQVcsR0FBMkIsQ0FBQyxNQUFlLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQ3pGLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sSUFBSSxtQkFBVSxFQUFFLENBQUMsQ0FBQTtBQURwQyxRQUFBLFdBQVcsZUFDeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25maWcsIEV4ZWN1dGVGYWN0b3J5LCBFeGVjdXRlV2l0aENvbmZpZyB9IGZyb20gJ0BjaGFpbmxpbmsvdHlwZXMnXG5pbXBvcnQgeyBSZXF1ZXN0ZXIsIFZhbGlkYXRvciB9IGZyb20gJ0BjaGFpbmxpbmsvZWEtYm9vdHN0cmFwJ1xuaW1wb3J0IHsgbWFrZUNvbmZpZyB9IGZyb20gJy4vY29uZmlnJ1xuaW1wb3J0IHsgRE5TUXVlcnlSZXNwb25zZSB9IGZyb20gJy4vdHlwZXMnXG5cbmV4cG9ydCBjb25zdCBpbnB1dFBhcmFtcyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgdHlwZTogdHJ1ZSxcbiAgZG86IGZhbHNlLFxuICBjZDogZmFsc2UsXG59XG5cbmNvbnN0IGV4ZWN1dGU6IEV4ZWN1dGVXaXRoQ29uZmlnPENvbmZpZz4gPSBhc3luYyAoaW5wdXQsIF8sIGNvbmZpZykgPT4ge1xuICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgVmFsaWRhdG9yKGlucHV0LCBpbnB1dFBhcmFtcylcbiAgaWYgKHZhbGlkYXRvci5lcnJvcikgdGhyb3cgdmFsaWRhdG9yLmVycm9yXG5cbiAgY29uc3Qgam9iUnVuSUQgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmlkXG4gIGNvbnN0IHsgbmFtZSwgdHlwZSwgZG86IGRvQml0LCBjZDogY2RCaXQgfSA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YVxuXG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBuYW1lLFxuICAgIHR5cGUsXG4gICAgLi4uKGRvQml0ICYmIHsgZG86IGRvQml0IH0pLFxuICAgIC4uLihjZEJpdCAmJiB7IGNkOiBjZEJpdCB9KSxcbiAgfVxuICBjb25zdCBoZWFkZXJzID0ge1xuICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2Rucy1qc29uJyxcbiAgfVxuXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IFJlcXVlc3Rlci5yZXF1ZXN0PEROU1F1ZXJ5UmVzcG9uc2U+KHtcbiAgICB1cmw6IGNvbmZpZy5hcGk/LnVybCxcbiAgICBoZWFkZXJzLFxuICAgIHBhcmFtcyxcbiAgfSlcblxuICBjb25zdCBkYXRhID0geyAuLi5yZXN1bHQuZGF0YSB9XG5cbiAgcmV0dXJuIFJlcXVlc3Rlci5zdWNjZXNzKFxuICAgIGpvYlJ1bklELFxuICAgIHtcbiAgICAgIHN0YXR1czogMjAwLFxuICAgICAgZGF0YTogZGF0YSxcbiAgICB9LFxuICAgIGNvbmZpZy52ZXJib3NlLFxuICApXG59XG5cbmV4cG9ydCBjb25zdCBtYWtlRXhlY3V0ZTogRXhlY3V0ZUZhY3Rvcnk8Q29uZmlnPiA9IChjb25maWc/OiBDb25maWcpID0+IChpbnB1dCwgY29udGV4dCkgPT5cbiAgZXhlY3V0ZShpbnB1dCwgY29udGV4dCwgY29uZmlnIHx8IG1ha2VDb25maWcoKSlcbiJdfQ==