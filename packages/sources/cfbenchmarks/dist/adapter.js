"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeWSHandler = exports.makeExecute = exports.endpointSelector = exports.execute = void 0;
const tslib_1 = require("tslib");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("./config");
const endpoints = tslib_1.__importStar(require("./endpoint"));
const execute = async (request, context, config) => {
    return ea_bootstrap_1.Builder.buildSelector(request, context, config, endpoints);
};
exports.execute = execute;
const endpointSelector = (request) => ea_bootstrap_1.Builder.selectEndpoint(request, config_1.makeConfig(), endpoints);
exports.endpointSelector = endpointSelector;
const makeExecute = (config) => {
    return async (request, context) => exports.execute(request, context, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
const makeWSHandler = (config) => {
    const getId = (input) => {
        const validator = new ea_bootstrap_1.Validator(input, endpoints.values.inputParameters);
        if (validator.error)
            return;
        return validator.overrideSymbol(config_1.NAME, validator.validated.data.index);
    };
    const getSubscription = (type, id) => {
        if (!id)
            return;
        return { type, id, stream: 'value' };
    };
    return () => {
        const defaultConfig = config || config_1.makeConfig();
        return {
            connection: {
                url: defaultConfig.api.baseWsURL,
                protocol: {
                    headers: { [config_1.AUTHORIZATION_HEADER]: defaultConfig.api.headers[config_1.AUTHORIZATION_HEADER] },
                },
            },
            subscribe: (input) => getSubscription('subscribe', getId(input)),
            unsubscribe: (input) => getSubscription('unsubscribe', getId(input)),
            subsFromMessage: (message) => getSubscription('subscribe', `${message?.id}`),
            isError: (message) => 'success' in message && message.success === false,
            filter: (message) => {
                return message.type === 'value';
            },
            toResponse: (message) => {
                const result = ea_bootstrap_1.Requester.validateResultNumber(message, ['value']);
                return ea_bootstrap_1.Requester.success('1', { data: { result } });
            },
        };
    };
};
exports.makeWSHandler = makeWSHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSwwREFBdUU7QUFTdkUscUNBQWlFO0FBQ2pFLDhEQUF1QztBQUVoQyxNQUFNLE9BQU8sR0FBOEIsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7SUFDbkYsT0FBTyxzQkFBTyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQTtBQUNuRSxDQUFDLENBQUE7QUFGWSxRQUFBLE9BQU8sV0FFbkI7QUFFTSxNQUFNLGdCQUFnQixHQUFHLENBQUMsT0FBdUIsRUFBZSxFQUFFLENBQ3ZFLHNCQUFPLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxtQkFBVSxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUE7QUFEN0MsUUFBQSxnQkFBZ0Isb0JBQzZCO0FBRW5ELE1BQU0sV0FBVyxHQUEyQixDQUFDLE1BQU0sRUFBRSxFQUFFO0lBQzVELE9BQU8sS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLGVBQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sSUFBSSxtQkFBVSxFQUFFLENBQUMsQ0FBQTtBQUN0RixDQUFDLENBQUE7QUFGWSxRQUFBLFdBQVcsZUFFdkI7QUFFTSxNQUFNLGFBQWEsR0FBRyxDQUFDLE1BQWUsRUFBaUIsRUFBRTtJQUM5RCxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQXFCLEVBQUUsRUFBRTtRQUN0QyxNQUFNLFNBQVMsR0FBRyxJQUFJLHdCQUFTLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUE7UUFDeEUsSUFBSSxTQUFTLENBQUMsS0FBSztZQUFFLE9BQU07UUFDM0IsT0FBTyxTQUFTLENBQUMsY0FBYyxDQUFDLGFBQUksRUFBRSxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQVcsQ0FBQTtJQUNqRixDQUFDLENBQUE7SUFDRCxNQUFNLGVBQWUsR0FBRyxDQUFDLElBQWlDLEVBQUUsRUFBVyxFQUFFLEVBQUU7UUFDekUsSUFBSSxDQUFDLEVBQUU7WUFBRSxPQUFNO1FBQ2YsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFBO0lBQ3RDLENBQUMsQ0FBQTtJQUNELE9BQU8sR0FBRyxFQUFFO1FBQ1YsTUFBTSxhQUFhLEdBQUcsTUFBTSxJQUFJLG1CQUFVLEVBQUUsQ0FBQTtRQUM1QyxPQUFPO1lBQ0wsVUFBVSxFQUFFO2dCQUNWLEdBQUcsRUFBRSxhQUFhLENBQUMsR0FBRyxDQUFDLFNBQVM7Z0JBQ2hDLFFBQVEsRUFBRTtvQkFDUixPQUFPLEVBQUUsRUFBRSxDQUFDLDZCQUFvQixDQUFDLEVBQUUsYUFBYSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsNkJBQW9CLENBQUMsRUFBRTtpQkFDckY7YUFDRjtZQUNELFNBQVMsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEUsV0FBVyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwRSxlQUFlLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsR0FBRyxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDNUUsT0FBTyxFQUFFLENBQUMsT0FBWSxFQUFFLEVBQUUsQ0FBQyxTQUFTLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEtBQUssS0FBSztZQUM1RSxNQUFNLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDbEIsT0FBTyxPQUFPLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQTtZQUNqQyxDQUFDO1lBQ0QsVUFBVSxFQUFFLENBQUMsT0FBWSxFQUFFLEVBQUU7Z0JBQzNCLE1BQU0sTUFBTSxHQUFHLHdCQUFTLENBQUMsb0JBQW9CLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtnQkFDakUsT0FBTyx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUE7WUFDckQsQ0FBQztTQUNGLENBQUE7SUFDSCxDQUFDLENBQUE7QUFDSCxDQUFDLENBQUE7QUFoQ1ksUUFBQSxhQUFhLGlCQWdDekIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdWlsZGVyLCBSZXF1ZXN0ZXIsIFZhbGlkYXRvciB9IGZyb20gJ0BjaGFpbmxpbmsvZWEtYm9vdHN0cmFwJ1xuaW1wb3J0IHtcbiAgQ29uZmlnLFxuICBFeGVjdXRlV2l0aENvbmZpZyxcbiAgRXhlY3V0ZUZhY3RvcnksXG4gIEFkYXB0ZXJSZXF1ZXN0LFxuICBBUElFbmRwb2ludCxcbiAgTWFrZVdTSGFuZGxlcixcbn0gZnJvbSAnQGNoYWlubGluay90eXBlcydcbmltcG9ydCB7IEFVVEhPUklaQVRJT05fSEVBREVSLCBtYWtlQ29uZmlnLCBOQU1FIH0gZnJvbSAnLi9jb25maWcnXG5pbXBvcnQgKiBhcyBlbmRwb2ludHMgZnJvbSAnLi9lbmRwb2ludCdcblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGU6IEV4ZWN1dGVXaXRoQ29uZmlnPENvbmZpZz4gPSBhc3luYyAocmVxdWVzdCwgY29udGV4dCwgY29uZmlnKSA9PiB7XG4gIHJldHVybiBCdWlsZGVyLmJ1aWxkU2VsZWN0b3IocmVxdWVzdCwgY29udGV4dCwgY29uZmlnLCBlbmRwb2ludHMpXG59XG5cbmV4cG9ydCBjb25zdCBlbmRwb2ludFNlbGVjdG9yID0gKHJlcXVlc3Q6IEFkYXB0ZXJSZXF1ZXN0KTogQVBJRW5kcG9pbnQgPT5cbiAgQnVpbGRlci5zZWxlY3RFbmRwb2ludChyZXF1ZXN0LCBtYWtlQ29uZmlnKCksIGVuZHBvaW50cylcblxuZXhwb3J0IGNvbnN0IG1ha2VFeGVjdXRlOiBFeGVjdXRlRmFjdG9yeTxDb25maWc+ID0gKGNvbmZpZykgPT4ge1xuICByZXR1cm4gYXN5bmMgKHJlcXVlc3QsIGNvbnRleHQpID0+IGV4ZWN1dGUocmVxdWVzdCwgY29udGV4dCwgY29uZmlnIHx8IG1ha2VDb25maWcoKSlcbn1cblxuZXhwb3J0IGNvbnN0IG1ha2VXU0hhbmRsZXIgPSAoY29uZmlnPzogQ29uZmlnKTogTWFrZVdTSGFuZGxlciA9PiB7XG4gIGNvbnN0IGdldElkID0gKGlucHV0OiBBZGFwdGVyUmVxdWVzdCkgPT4ge1xuICAgIGNvbnN0IHZhbGlkYXRvciA9IG5ldyBWYWxpZGF0b3IoaW5wdXQsIGVuZHBvaW50cy52YWx1ZXMuaW5wdXRQYXJhbWV0ZXJzKVxuICAgIGlmICh2YWxpZGF0b3IuZXJyb3IpIHJldHVyblxuICAgIHJldHVybiB2YWxpZGF0b3Iub3ZlcnJpZGVTeW1ib2woTkFNRSwgdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLmluZGV4KSBhcyBzdHJpbmdcbiAgfVxuICBjb25zdCBnZXRTdWJzY3JpcHRpb24gPSAodHlwZTogJ3N1YnNjcmliZScgfCAndW5zdWJzY3JpYmUnLCBpZD86IHN0cmluZykgPT4ge1xuICAgIGlmICghaWQpIHJldHVyblxuICAgIHJldHVybiB7IHR5cGUsIGlkLCBzdHJlYW06ICd2YWx1ZScgfVxuICB9XG4gIHJldHVybiAoKSA9PiB7XG4gICAgY29uc3QgZGVmYXVsdENvbmZpZyA9IGNvbmZpZyB8fCBtYWtlQ29uZmlnKClcbiAgICByZXR1cm4ge1xuICAgICAgY29ubmVjdGlvbjoge1xuICAgICAgICB1cmw6IGRlZmF1bHRDb25maWcuYXBpLmJhc2VXc1VSTCxcbiAgICAgICAgcHJvdG9jb2w6IHtcbiAgICAgICAgICBoZWFkZXJzOiB7IFtBVVRIT1JJWkFUSU9OX0hFQURFUl06IGRlZmF1bHRDb25maWcuYXBpLmhlYWRlcnNbQVVUSE9SSVpBVElPTl9IRUFERVJdIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgc3Vic2NyaWJlOiAoaW5wdXQpID0+IGdldFN1YnNjcmlwdGlvbignc3Vic2NyaWJlJywgZ2V0SWQoaW5wdXQpKSxcbiAgICAgIHVuc3Vic2NyaWJlOiAoaW5wdXQpID0+IGdldFN1YnNjcmlwdGlvbigndW5zdWJzY3JpYmUnLCBnZXRJZChpbnB1dCkpLFxuICAgICAgc3Vic0Zyb21NZXNzYWdlOiAobWVzc2FnZSkgPT4gZ2V0U3Vic2NyaXB0aW9uKCdzdWJzY3JpYmUnLCBgJHttZXNzYWdlPy5pZH1gKSxcbiAgICAgIGlzRXJyb3I6IChtZXNzYWdlOiBhbnkpID0+ICdzdWNjZXNzJyBpbiBtZXNzYWdlICYmIG1lc3NhZ2Uuc3VjY2VzcyA9PT0gZmFsc2UsXG4gICAgICBmaWx0ZXI6IChtZXNzYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlLnR5cGUgPT09ICd2YWx1ZSdcbiAgICAgIH0sXG4gICAgICB0b1Jlc3BvbnNlOiAobWVzc2FnZTogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFJlcXVlc3Rlci52YWxpZGF0ZVJlc3VsdE51bWJlcihtZXNzYWdlLCBbJ3ZhbHVlJ10pXG4gICAgICAgIHJldHVybiBSZXF1ZXN0ZXIuc3VjY2VzcygnMScsIHsgZGF0YTogeyByZXN1bHQgfSB9KVxuICAgICAgfSxcbiAgICB9XG4gIH1cbn1cbiJdfQ==