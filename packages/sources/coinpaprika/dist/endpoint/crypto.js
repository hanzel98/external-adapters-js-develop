"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.endpointResultPaths = exports.batchablePropertyPath = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
const util_1 = require("../util");
exports.supportedEndpoints = ['crypto', 'price', 'marketcap', 'volume'];
exports.batchablePropertyPath = [{ name: 'base' }, { name: 'quote' }];
exports.endpointResultPaths = {
    crypto: 'price',
    marketcap: 'market_cap',
    price: 'price',
    volume: 'volume_24h',
};
exports.inputParameters = {
    base: ['base', 'from', 'coin'],
    quote: ['quote', 'to', 'market'],
    coinid: false,
    resultPath: false,
};
const handleBatchedRequest = (jobRunID, request, response, requestedData, resultPath) => {
    const responseData = response.data;
    const payload = [];
    requestedData.forEach(({ coinid, symbol }) => {
        const coin = util_1.getCoin(responseData, symbol, coinid);
        if (!coin) {
            throw new Error(`unable to find coin: ${coinid || symbol}`);
        }
        for (const quote in coin.quotes) {
            payload.push([
                {
                    ...request,
                    data: {
                        ...request.data,
                        base: coin.symbol.toUpperCase(),
                        quote: quote.toUpperCase(),
                    },
                },
                ea_bootstrap_1.Requester.validateResultNumber(coin, ['quotes', quote, resultPath]),
            ]);
        }
    });
    // We'll reset the response data to not output the entire CP coins list
    const result = ea_bootstrap_1.Requester.withResult({ ...response, data: {} }, undefined, payload);
    return ea_bootstrap_1.Requester.success(jobRunID, result, true, exports.batchablePropertyPath);
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const symbol = validator.overrideSymbol(config_1.NAME);
    const requestedQuotes = validator.validated.data.quote;
    const coinid = validator.validated.data.coinid;
    const url = 'v1/tickers';
    const resultPath = validator.validated.data.resultPath || exports.endpointResultPaths.crypto;
    let quotes;
    if (Array.isArray(requestedQuotes)) {
        quotes = requestedQuotes.map((quote) => quote.toUpperCase()).join(',');
    }
    else {
        quotes = requestedQuotes.toUpperCase();
    }
    const params = { quotes };
    const options = {
        ...config.api,
        url,
        params,
    };
    if (Array.isArray(symbol)) {
        const requestedData = [];
        for (let i = 0; i < symbol.length; i++) {
            if (symbol[i] !== validator.validated.data.base[i]) {
                requestedData.push({ coinid: symbol[i] });
            }
            else {
                requestedData.push({ symbol: symbol[i] });
            }
        }
        const response = await ea_bootstrap_1.Requester.request(options);
        return handleBatchedRequest(jobRunID, request, response, requestedData, resultPath);
    }
    // If coinid was provided or base was overridden, that symbol will be fetched
    const coin = coinid || (symbol !== validator.validated.data.base && symbol ? symbol : undefined);
    const response = await ea_bootstrap_1.Requester.request(options);
    const coinData = util_1.getCoin(response.data, symbol, coin);
    if (!coinData) {
        throw new Error(`unable to find coin: ${coin || symbol}`);
    }
    const result = ea_bootstrap_1.Requester.validateResultNumber(coinData, [
        'quotes',
        requestedQuotes.toUpperCase(),
        resultPath,
    ]);
    return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, result), config.verbose, exports.batchablePropertyPath);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,