"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.endpointResultPaths = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
const util_1 = require("../util");
exports.supportedEndpoints = [];
const buildPath = (path) => (request) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const quote = validator.validated.data.quote;
    return `quotes.${quote.toUpperCase()}.${path}`;
};
exports.endpointResultPaths = {
    crypto: buildPath('price'),
    price: buildPath('price'),
    marketcap: buildPath('market_cap'),
};
exports.inputParameters = {
    base: ['base', 'from', 'coin'],
    quote: ['quote', 'to', 'market'],
    coinid: false,
    resultPath: false,
};
const execute = async (request, context, config) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const symbol = validator.overrideSymbol(config_1.NAME);
    const quote = validator.validated.data.quote;
    const coinid = validator.validated.data.coinid;
    // If coinid was provided or base was overridden, that symbol will be fetched
    let coin = coinid || (symbol !== validator.validated.data.base && symbol);
    if (!coin) {
        const coinIds = await util_1.getCoinIds(context, jobRunID);
        coin = util_1.getSymbolToId(symbol, coinIds);
    }
    const url = `v1/tickers/${coin.toLowerCase()}`;
    const resultPath = validator.validated.data.resultPath;
    const params = {
        quotes: quote.toUpperCase(),
    };
    const options = {
        ...config.api,
        url,
        params,
    };
    const response = await ea_bootstrap_1.Requester.request(options);
    response.data.result = ea_bootstrap_1.Requester.validateResultNumber(response.data, resultPath);
    response.data.cost = 2;
    return ea_bootstrap_1.Requester.success(jobRunID, response, config.verbose);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J5cHRvLXNpbmdsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbmRwb2ludC9jcnlwdG8tc2luZ2xlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUE4RDtBQUU5RCxzQ0FBK0M7QUFDL0Msa0NBQW1EO0FBRXRDLFFBQUEsa0JBQWtCLEdBQUcsRUFBRSxDQUFBO0FBRXBDLE1BQU0sU0FBUyxHQUNiLENBQUMsSUFBWSxFQUFFLEVBQUUsQ0FDakIsQ0FBQyxPQUF1QixFQUFVLEVBQUU7SUFDbEMsTUFBTSxTQUFTLEdBQUcsSUFBSSx3QkFBUyxDQUFDLE9BQU8sRUFBRSx1QkFBZSxDQUFDLENBQUE7SUFDekQsSUFBSSxTQUFTLENBQUMsS0FBSztRQUFFLE1BQU0sU0FBUyxDQUFDLEtBQUssQ0FBQTtJQUMxQyxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDNUMsT0FBTyxVQUFVLEtBQUssQ0FBQyxXQUFXLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQTtBQUNoRCxDQUFDLENBQUE7QUFFVSxRQUFBLG1CQUFtQixHQUFHO0lBQ2pDLE1BQU0sRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQzFCLEtBQUssRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3pCLFNBQVMsRUFBRSxTQUFTLENBQUMsWUFBWSxDQUFDO0NBQ25DLENBQUE7QUFFWSxRQUFBLGVBQWUsR0FBb0I7SUFDOUMsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUM7SUFDOUIsS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUM7SUFDaEMsTUFBTSxFQUFFLEtBQUs7SUFDYixVQUFVLEVBQUUsS0FBSztDQUNsQixDQUFBO0FBRU0sTUFBTSxPQUFPLEdBQThCLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO0lBQ25GLE1BQU0sU0FBUyxHQUFHLElBQUksd0JBQVMsQ0FBQyxPQUFPLEVBQUUsdUJBQWUsQ0FBQyxDQUFBO0lBQ3pELElBQUksU0FBUyxDQUFDLEtBQUs7UUFBRSxNQUFNLFNBQVMsQ0FBQyxLQUFLLENBQUE7SUFFMUMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUE7SUFDdkMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLGNBQWMsQ0FBQyxhQUFXLENBQVcsQ0FBQTtJQUM5RCxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDNUMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBNEIsQ0FBQTtJQUVwRSw2RUFBNkU7SUFDN0UsSUFBSSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxLQUFLLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQTtJQUN6RSxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ1QsTUFBTSxPQUFPLEdBQUcsTUFBTSxpQkFBVSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQTtRQUNuRCxJQUFJLEdBQUcsb0JBQWEsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUE7S0FDdEM7SUFFRCxNQUFNLEdBQUcsR0FBRyxjQUFjLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFBO0lBQzlDLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQTtJQUV0RCxNQUFNLE1BQU0sR0FBRztRQUNiLE1BQU0sRUFBRSxLQUFLLENBQUMsV0FBVyxFQUFFO0tBQzVCLENBQUE7SUFFRCxNQUFNLE9BQU8sR0FBRztRQUNkLEdBQUcsTUFBTSxDQUFDLEdBQUc7UUFDYixHQUFHO1FBQ0gsTUFBTTtLQUNQLENBQUE7SUFFRCxNQUFNLFFBQVEsR0FBRyxNQUFNLHdCQUFTLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ2pELFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLHdCQUFTLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUNoRixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUE7SUFFdEIsT0FBTyx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUM5RCxDQUFDLENBQUE7QUFsQ1ksUUFBQSxPQUFPLFdBa0NuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3RlciwgVmFsaWRhdG9yIH0gZnJvbSAnQGNoYWlubGluay9lYS1ib290c3RyYXAnXG5pbXBvcnQgeyBFeGVjdXRlV2l0aENvbmZpZywgQ29uZmlnLCBBZGFwdGVyUmVxdWVzdCwgSW5wdXRQYXJhbWV0ZXJzIH0gZnJvbSAnQGNoYWlubGluay90eXBlcydcbmltcG9ydCB7IE5BTUUgYXMgQWRhcHRlck5hbWUgfSBmcm9tICcuLi9jb25maWcnXG5pbXBvcnQgeyBnZXRDb2luSWRzLCBnZXRTeW1ib2xUb0lkIH0gZnJvbSAnLi4vdXRpbCdcblxuZXhwb3J0IGNvbnN0IHN1cHBvcnRlZEVuZHBvaW50cyA9IFtdXG5cbmNvbnN0IGJ1aWxkUGF0aCA9XG4gIChwYXRoOiBzdHJpbmcpID0+XG4gIChyZXF1ZXN0OiBBZGFwdGVyUmVxdWVzdCk6IHN0cmluZyA9PiB7XG4gICAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihyZXF1ZXN0LCBpbnB1dFBhcmFtZXRlcnMpXG4gICAgaWYgKHZhbGlkYXRvci5lcnJvcikgdGhyb3cgdmFsaWRhdG9yLmVycm9yXG4gICAgY29uc3QgcXVvdGUgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmRhdGEucXVvdGVcbiAgICByZXR1cm4gYHF1b3Rlcy4ke3F1b3RlLnRvVXBwZXJDYXNlKCl9LiR7cGF0aH1gXG4gIH1cblxuZXhwb3J0IGNvbnN0IGVuZHBvaW50UmVzdWx0UGF0aHMgPSB7XG4gIGNyeXB0bzogYnVpbGRQYXRoKCdwcmljZScpLFxuICBwcmljZTogYnVpbGRQYXRoKCdwcmljZScpLFxuICBtYXJrZXRjYXA6IGJ1aWxkUGF0aCgnbWFya2V0X2NhcCcpLFxufVxuXG5leHBvcnQgY29uc3QgaW5wdXRQYXJhbWV0ZXJzOiBJbnB1dFBhcmFtZXRlcnMgPSB7XG4gIGJhc2U6IFsnYmFzZScsICdmcm9tJywgJ2NvaW4nXSxcbiAgcXVvdGU6IFsncXVvdGUnLCAndG8nLCAnbWFya2V0J10sXG4gIGNvaW5pZDogZmFsc2UsXG4gIHJlc3VsdFBhdGg6IGZhbHNlLFxufVxuXG5leHBvcnQgY29uc3QgZXhlY3V0ZTogRXhlY3V0ZVdpdGhDb25maWc8Q29uZmlnPiA9IGFzeW5jIChyZXF1ZXN0LCBjb250ZXh0LCBjb25maWcpID0+IHtcbiAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihyZXF1ZXN0LCBpbnB1dFBhcmFtZXRlcnMpXG4gIGlmICh2YWxpZGF0b3IuZXJyb3IpIHRocm93IHZhbGlkYXRvci5lcnJvclxuXG4gIGNvbnN0IGpvYlJ1bklEID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5pZFxuICBjb25zdCBzeW1ib2wgPSB2YWxpZGF0b3Iub3ZlcnJpZGVTeW1ib2woQWRhcHRlck5hbWUpIGFzIHN0cmluZ1xuICBjb25zdCBxdW90ZSA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5xdW90ZVxuICBjb25zdCBjb2luaWQgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmRhdGEuY29pbmlkIGFzIHN0cmluZyB8IHVuZGVmaW5lZFxuXG4gIC8vIElmIGNvaW5pZCB3YXMgcHJvdmlkZWQgb3IgYmFzZSB3YXMgb3ZlcnJpZGRlbiwgdGhhdCBzeW1ib2wgd2lsbCBiZSBmZXRjaGVkXG4gIGxldCBjb2luID0gY29pbmlkIHx8IChzeW1ib2wgIT09IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5iYXNlICYmIHN5bWJvbClcbiAgaWYgKCFjb2luKSB7XG4gICAgY29uc3QgY29pbklkcyA9IGF3YWl0IGdldENvaW5JZHMoY29udGV4dCwgam9iUnVuSUQpXG4gICAgY29pbiA9IGdldFN5bWJvbFRvSWQoc3ltYm9sLCBjb2luSWRzKVxuICB9XG5cbiAgY29uc3QgdXJsID0gYHYxL3RpY2tlcnMvJHtjb2luLnRvTG93ZXJDYXNlKCl9YFxuICBjb25zdCByZXN1bHRQYXRoID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLnJlc3VsdFBhdGhcblxuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgcXVvdGVzOiBxdW90ZS50b1VwcGVyQ2FzZSgpLFxuICB9XG5cbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAuLi5jb25maWcuYXBpLFxuICAgIHVybCxcbiAgICBwYXJhbXMsXG4gIH1cblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IFJlcXVlc3Rlci5yZXF1ZXN0KG9wdGlvbnMpXG4gIHJlc3BvbnNlLmRhdGEucmVzdWx0ID0gUmVxdWVzdGVyLnZhbGlkYXRlUmVzdWx0TnVtYmVyKHJlc3BvbnNlLmRhdGEsIHJlc3VsdFBhdGgpXG4gIHJlc3BvbnNlLmRhdGEuY29zdCA9IDJcblxuICByZXR1cm4gUmVxdWVzdGVyLnN1Y2Nlc3Moam9iUnVuSUQsIHJlc3BvbnNlLCBjb25maWcudmVyYm9zZSlcbn1cbiJdfQ==