"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSymbolToId = exports.getCoinIds = exports.getCoin = void 0;
const adapter_1 = require("./adapter");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const getCoin = (data, symbol, coinId) => {
    data.sort((a, b) => a.rank - b.rank);
    if (coinId) {
        return data.find(({ id }) => id.toLowerCase() === coinId.toLowerCase());
    }
    else if (symbol) {
        return data.find(({ symbol: coinSymbol, rank }) => coinSymbol.toLowerCase() === symbol.toLowerCase() && rank !== 0);
    }
    return undefined;
};
exports.getCoin = getCoin;
function getCoinIds(context, id) {
    const execute = adapter_1.makeExecute();
    const options = {
        data: {
            endpoint: 'coins',
            maxAge: 60 * 60 * 1000, // 1 hour
        },
        method: 'post',
        id,
    };
    return new Promise((resolve, reject) => {
        const middleware = ea_bootstrap_1.makeMiddleware(execute);
        ea_bootstrap_1.withMiddleware(execute, context, middleware)
            .then((executeWithMiddleware) => {
            executeWithMiddleware(options, context).then((value) => resolve(value.data));
        })
            .catch((error) => reject(error));
    });
}
exports.getCoinIds = getCoinIds;
const getSymbolToId = (symbol, coinList) => {
    const isId = coinList.find(({ id }) => id.toLowerCase() === symbol.toLowerCase());
    if (isId && isId.id)
        return isId.id.toLowerCase();
    const coin = coinList.find(({ symbol: coinSymbol, rank }) => coinSymbol.toLowerCase() === symbol.toLowerCase() && rank !== 0);
    if (coin && coin.id)
        return coin.id.toLowerCase();
    throw new Error('Coin id not found');
};
exports.getSymbolToId = getSymbolToId;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHVDQUF1QztBQUN2QywwREFBd0U7QUFLakUsTUFBTSxPQUFPLEdBQUcsQ0FDckIsSUFBc0IsRUFDdEIsTUFBZSxFQUNmLE1BQWUsRUFDYSxFQUFFO0lBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNwQyxJQUFJLE1BQU0sRUFBRTtRQUNWLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsS0FBSyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQTtLQUN4RTtTQUFNLElBQUksTUFBTSxFQUFFO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FDZCxDQUFDLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQy9CLFVBQVUsQ0FBQyxXQUFXLEVBQUUsS0FBSyxNQUFNLENBQUMsV0FBVyxFQUFFLElBQUksSUFBSSxLQUFLLENBQUMsQ0FDbEUsQ0FBQTtLQUNGO0lBQ0QsT0FBTyxTQUFTLENBQUE7QUFDbEIsQ0FBQyxDQUFBO0FBZlksUUFBQSxPQUFPLFdBZW5CO0FBRUQsU0FBZ0IsVUFBVSxDQUFDLE9BQXVCLEVBQUUsRUFBVTtJQUM1RCxNQUFNLE9BQU8sR0FBRyxxQkFBVyxFQUFFLENBQUE7SUFDN0IsTUFBTSxPQUFPLEdBQUc7UUFDZCxJQUFJLEVBQUU7WUFDSixRQUFRLEVBQUUsT0FBTztZQUNqQixNQUFNLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLEVBQUUsU0FBUztTQUNsQztRQUNELE1BQU0sRUFBRSxNQUFNO1FBQ2QsRUFBRTtLQUNILENBQUE7SUFDRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ3JDLE1BQU0sVUFBVSxHQUFHLDZCQUFjLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDMUMsNkJBQWMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQzthQUN6QyxJQUFJLENBQUMsQ0FBQyxxQkFBcUIsRUFBRSxFQUFFO1lBQzlCLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUM5RSxDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBQ3BDLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQWxCRCxnQ0FrQkM7QUFFTSxNQUFNLGFBQWEsR0FBRyxDQUFDLE1BQWMsRUFBRSxRQUF5QixFQUFVLEVBQUU7SUFDakYsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsS0FBSyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQTtJQUNqRixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsRUFBRTtRQUFFLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUVqRCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUN4QixDQUFDLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQy9CLFVBQVUsQ0FBQyxXQUFXLEVBQUUsS0FBSyxNQUFNLENBQUMsV0FBVyxFQUFFLElBQUksSUFBSSxLQUFLLENBQUMsQ0FDbEUsQ0FBQTtJQUNELElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFO1FBQUUsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFBO0lBRWpELE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtBQUN0QyxDQUFDLENBQUE7QUFYWSxRQUFBLGFBQWEsaUJBV3pCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWFrZUV4ZWN1dGUgfSBmcm9tICcuL2FkYXB0ZXInXG5pbXBvcnQgeyBtYWtlTWlkZGxld2FyZSwgd2l0aE1pZGRsZXdhcmUgfSBmcm9tICdAY2hhaW5saW5rL2VhLWJvb3RzdHJhcCdcbmltcG9ydCB7IFJlc3BvbnNlU2NoZW1hIH0gZnJvbSAnLi9lbmRwb2ludC9jcnlwdG8nXG5pbXBvcnQgeyBDb2luc1Jlc3BvbnNlIH0gZnJvbSAnLi9lbmRwb2ludC9jb2lucydcbmltcG9ydCB7IEFkYXB0ZXJDb250ZXh0IH0gZnJvbSAnQGNoYWlubGluay90eXBlcydcblxuZXhwb3J0IGNvbnN0IGdldENvaW4gPSAoXG4gIGRhdGE6IFJlc3BvbnNlU2NoZW1hW10sXG4gIHN5bWJvbD86IHN0cmluZyxcbiAgY29pbklkPzogc3RyaW5nLFxuKTogUmVzcG9uc2VTY2hlbWEgfCB1bmRlZmluZWQgPT4ge1xuICBkYXRhLnNvcnQoKGEsIGIpID0+IGEucmFuayAtIGIucmFuaylcbiAgaWYgKGNvaW5JZCkge1xuICAgIHJldHVybiBkYXRhLmZpbmQoKHsgaWQgfSkgPT4gaWQudG9Mb3dlckNhc2UoKSA9PT0gY29pbklkLnRvTG93ZXJDYXNlKCkpXG4gIH0gZWxzZSBpZiAoc3ltYm9sKSB7XG4gICAgcmV0dXJuIGRhdGEuZmluZChcbiAgICAgICh7IHN5bWJvbDogY29pblN5bWJvbCwgcmFuayB9KSA9PlxuICAgICAgICBjb2luU3ltYm9sLnRvTG93ZXJDYXNlKCkgPT09IHN5bWJvbC50b0xvd2VyQ2FzZSgpICYmIHJhbmsgIT09IDAsXG4gICAgKVxuICB9XG4gIHJldHVybiB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvaW5JZHMoY29udGV4dDogQWRhcHRlckNvbnRleHQsIGlkOiBzdHJpbmcpOiBQcm9taXNlPENvaW5zUmVzcG9uc2VbXT4ge1xuICBjb25zdCBleGVjdXRlID0gbWFrZUV4ZWN1dGUoKVxuICBjb25zdCBvcHRpb25zID0ge1xuICAgIGRhdGE6IHtcbiAgICAgIGVuZHBvaW50OiAnY29pbnMnLFxuICAgICAgbWF4QWdlOiA2MCAqIDYwICogMTAwMCwgLy8gMSBob3VyXG4gICAgfSxcbiAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICBpZCxcbiAgfVxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IG1pZGRsZXdhcmUgPSBtYWtlTWlkZGxld2FyZShleGVjdXRlKVxuICAgIHdpdGhNaWRkbGV3YXJlKGV4ZWN1dGUsIGNvbnRleHQsIG1pZGRsZXdhcmUpXG4gICAgICAudGhlbigoZXhlY3V0ZVdpdGhNaWRkbGV3YXJlKSA9PiB7XG4gICAgICAgIGV4ZWN1dGVXaXRoTWlkZGxld2FyZShvcHRpb25zLCBjb250ZXh0KS50aGVuKCh2YWx1ZSkgPT4gcmVzb2x2ZSh2YWx1ZS5kYXRhKSlcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiByZWplY3QoZXJyb3IpKVxuICB9KVxufVxuXG5leHBvcnQgY29uc3QgZ2V0U3ltYm9sVG9JZCA9IChzeW1ib2w6IHN0cmluZywgY29pbkxpc3Q6IENvaW5zUmVzcG9uc2VbXSk6IHN0cmluZyA9PiB7XG4gIGNvbnN0IGlzSWQgPSBjb2luTGlzdC5maW5kKCh7IGlkIH0pID0+IGlkLnRvTG93ZXJDYXNlKCkgPT09IHN5bWJvbC50b0xvd2VyQ2FzZSgpKVxuICBpZiAoaXNJZCAmJiBpc0lkLmlkKSByZXR1cm4gaXNJZC5pZC50b0xvd2VyQ2FzZSgpXG5cbiAgY29uc3QgY29pbiA9IGNvaW5MaXN0LmZpbmQoXG4gICAgKHsgc3ltYm9sOiBjb2luU3ltYm9sLCByYW5rIH0pID0+XG4gICAgICBjb2luU3ltYm9sLnRvTG93ZXJDYXNlKCkgPT09IHN5bWJvbC50b0xvd2VyQ2FzZSgpICYmIHJhbmsgIT09IDAsXG4gIClcbiAgaWYgKGNvaW4gJiYgY29pbi5pZCkgcmV0dXJuIGNvaW4uaWQudG9Mb3dlckNhc2UoKVxuXG4gIHRocm93IG5ldyBFcnJvcignQ29pbiBpZCBub3QgZm91bmQnKVxufVxuIl19