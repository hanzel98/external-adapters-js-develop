"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.endpointResultPaths = exports.batchablePropertyPath = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
exports.supportedEndpoints = ['crypto', 'price', 'marketcap', 'volume'];
exports.batchablePropertyPath = [{ name: 'base' }];
exports.endpointResultPaths = {
    crypto: 'price',
    price: 'price',
    marketcap: 'market_cap',
    volume: ['1d', 'volume'],
};
const customError = (data) => data.length === 0;
exports.inputParameters = {
    base: ['base', 'from', 'coin', 'ids'],
    quote: ['quote', 'to', 'market', 'convert'],
    resultPath: false,
};
const convertId = {
    FNX: 'FNX2',
    AMP: 'AMP2',
    WING: 'WING2',
    FTT: 'FTXTOKEN',
    KNC: 'KNC3',
};
const handleBatchedRequest = (jobRunID, request, response, validator, resultPath) => {
    const payload = [];
    for (const i in response.data) {
        const entry = response.data[i];
        payload.push([
            {
                ...request,
                data: {
                    ...request.data,
                    base: validator
                        .overrideReverseLookup(config_1.NAME, 'overrides', entry.symbol)
                        .toUpperCase(),
                },
            },
            ea_bootstrap_1.Requester.validateResultNumber(response.data[i], [resultPath]),
        ]);
    }
    return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, undefined, payload), true, exports.batchablePropertyPath);
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const symbol = validator.overrideSymbol(config_1.NAME);
    const symbols = Array.isArray(symbol) ? symbol : [symbol];
    const convert = validator.validated.data.quote.toUpperCase();
    const jobRunID = validator.validated.id;
    const resultPath = validator.validated.data.resultPath;
    const url = `/currencies/ticker`;
    // Correct common tickers that are misidentified
    const ids = symbols
        .map((symbol) => convertId[symbol.toUpperCase()] || symbol.toUpperCase())
        .join(',');
    const params = {
        ids,
        convert,
        key: config.apiKey,
    };
    const reqConfig = {
        ...config.api,
        url,
        params,
    };
    const response = await ea_bootstrap_1.Requester.request(reqConfig, customError);
    if (Array.isArray(symbol))
        return handleBatchedRequest(jobRunID, request, response, validator, resultPath);
    const result = ea_bootstrap_1.Requester.validateResultNumber(response.data[0], resultPath);
    return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, result), config.verbose, exports.batchablePropertyPath);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,