"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.endpointResultPaths = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
exports.supportedEndpoints = ['estimatedarrivaltime'];
exports.endpointResultPaths = {
    estimatedarrivaltime: 'FlightInfoExResult.flights.0.estimatedarrivaltime',
};
exports.inputParameters = {
    departure: true,
    flight: true,
    resultPath: false,
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const resultPath = validator.validated.data.resultPath;
    const departure = validator.validated.data.departure;
    const flight = validator.validated.data.flight;
    const url = 'FlightInfoEx';
    const ident = `${flight}@${departure}`;
    const params = {
        ident,
    };
    const auth = {
        username: config.api.username,
        password: config.apiKey,
    };
    const options = { ...config.api, auth, params, url };
    const response = await ea_bootstrap_1.Requester.request(options);
    const result = ea_bootstrap_1.Requester.validateResultNumber(response.data, resultPath);
    return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, result), config.verbose);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxpZ2h0aW5mb2V4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VuZHBvaW50L2ZsaWdodGluZm9leC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwREFBOEQ7QUFHakQsUUFBQSxrQkFBa0IsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUE7QUFFN0MsUUFBQSxtQkFBbUIsR0FBRztJQUNqQyxvQkFBb0IsRUFBRSxtREFBbUQ7Q0FDMUUsQ0FBQTtBQWdDWSxRQUFBLGVBQWUsR0FBb0I7SUFDOUMsU0FBUyxFQUFFLElBQUk7SUFDZixNQUFNLEVBQUUsSUFBSTtJQUNaLFVBQVUsRUFBRSxLQUFLO0NBQ2xCLENBQUE7QUFFTSxNQUFNLE9BQU8sR0FBOEIsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUU7SUFDN0UsTUFBTSxTQUFTLEdBQUcsSUFBSSx3QkFBUyxDQUFDLE9BQU8sRUFBRSx1QkFBZSxDQUFDLENBQUE7SUFDekQsSUFBSSxTQUFTLENBQUMsS0FBSztRQUFFLE1BQU0sU0FBUyxDQUFDLEtBQUssQ0FBQTtJQUUxQyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQTtJQUN2QyxNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUE7SUFDdEQsTUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFBO0lBQ3BELE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQTtJQUM5QyxNQUFNLEdBQUcsR0FBRyxjQUFjLENBQUE7SUFDMUIsTUFBTSxLQUFLLEdBQUcsR0FBRyxNQUFNLElBQUksU0FBUyxFQUFFLENBQUE7SUFFdEMsTUFBTSxNQUFNLEdBQUc7UUFDYixLQUFLO0tBQ04sQ0FBQTtJQUVELE1BQU0sSUFBSSxHQUFHO1FBQ1gsUUFBUSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUTtRQUM3QixRQUFRLEVBQUUsTUFBTSxDQUFDLE1BQU07S0FDeEIsQ0FBQTtJQUVELE1BQU0sT0FBTyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUE7SUFFcEQsTUFBTSxRQUFRLEdBQUcsTUFBTSx3QkFBUyxDQUFDLE9BQU8sQ0FBaUIsT0FBTyxDQUFDLENBQUE7SUFDakUsTUFBTSxNQUFNLEdBQUcsd0JBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFBO0lBRXhFLE9BQU8sd0JBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLHdCQUFTLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUE7QUFDNUYsQ0FBQyxDQUFBO0FBMUJZLFFBQUEsT0FBTyxXQTBCbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0ZXIsIFZhbGlkYXRvciB9IGZyb20gJ0BjaGFpbmxpbmsvZWEtYm9vdHN0cmFwJ1xuaW1wb3J0IHsgQ29uZmlnLCBFeGVjdXRlV2l0aENvbmZpZywgSW5wdXRQYXJhbWV0ZXJzIH0gZnJvbSAnQGNoYWlubGluay90eXBlcydcblxuZXhwb3J0IGNvbnN0IHN1cHBvcnRlZEVuZHBvaW50cyA9IFsnZXN0aW1hdGVkYXJyaXZhbHRpbWUnXVxuXG5leHBvcnQgY29uc3QgZW5kcG9pbnRSZXN1bHRQYXRocyA9IHtcbiAgZXN0aW1hdGVkYXJyaXZhbHRpbWU6ICdGbGlnaHRJbmZvRXhSZXN1bHQuZmxpZ2h0cy4wLmVzdGltYXRlZGFycml2YWx0aW1lJyxcbn1cblxuaW50ZXJmYWNlIEZsaWdodHMge1xuICBmYUZsaWdodElEOiBzdHJpbmdcbiAgaWRlbnQ6IHN0cmluZ1xuICBhaXJjcmFmdHR5cGU6IHN0cmluZ1xuICBmaWxlZF9ldGU6IHN0cmluZ1xuICBmaWxlZF90aW1lOiBudW1iZXJcbiAgZmlsZWRfZGVwYXJ0dXJldGltZTogbnVtYmVyXG4gIGZpbGVkX2FpcnNwZWVkX2t0czogbnVtYmVyXG4gIGZpbGVkX2FpcnNwZWVkX21hY2g6IHN0cmluZ1xuICBmaWxlZF9hbHRpdHVkZTogbnVtYmVyXG4gIHJvdXRlOiBzdHJpbmdcbiAgYWN0dWFsZGVwYXJ0dXJldGltZTogbnVtYmVyXG4gIGVzdGltYXRlZGFycml2YWx0aW1lOiBudW1iZXJcbiAgYWN0dWFsYXJyaXZhbHRpbWU6IG51bWJlclxuICBkaXZlcnRlZDogc3RyaW5nXG4gIG9yaWdpbjogc3RyaW5nXG4gIGRlc3RpbmF0aW9uOiBzdHJpbmdcbiAgb3JpZ2luTmFtZTogc3RyaW5nXG4gIG9yaWdpbkNpdHk6IHN0cmluZ1xuICBkZXN0aW5hdGlvbk5hbWU6IHN0cmluZ1xuICBkZXN0aW5hdGlvbkNpdHk6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlU2NoZW1hIHtcbiAgRmxpZ2h0SW5mb0V4UmVzdWx0OiB7XG4gICAgbmV4dF9vZmZzZXQ6IG51bWJlclxuICAgIGZsaWdodHM6IEZsaWdodHNbXVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBpbnB1dFBhcmFtZXRlcnM6IElucHV0UGFyYW1ldGVycyA9IHtcbiAgZGVwYXJ0dXJlOiB0cnVlLFxuICBmbGlnaHQ6IHRydWUsXG4gIHJlc3VsdFBhdGg6IGZhbHNlLFxufVxuXG5leHBvcnQgY29uc3QgZXhlY3V0ZTogRXhlY3V0ZVdpdGhDb25maWc8Q29uZmlnPiA9IGFzeW5jIChyZXF1ZXN0LCBfLCBjb25maWcpID0+IHtcbiAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihyZXF1ZXN0LCBpbnB1dFBhcmFtZXRlcnMpXG4gIGlmICh2YWxpZGF0b3IuZXJyb3IpIHRocm93IHZhbGlkYXRvci5lcnJvclxuXG4gIGNvbnN0IGpvYlJ1bklEID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5pZFxuICBjb25zdCByZXN1bHRQYXRoID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLnJlc3VsdFBhdGhcbiAgY29uc3QgZGVwYXJ0dXJlID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLmRlcGFydHVyZVxuICBjb25zdCBmbGlnaHQgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmRhdGEuZmxpZ2h0XG4gIGNvbnN0IHVybCA9ICdGbGlnaHRJbmZvRXgnXG4gIGNvbnN0IGlkZW50ID0gYCR7ZmxpZ2h0fUAke2RlcGFydHVyZX1gXG5cbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIGlkZW50LFxuICB9XG5cbiAgY29uc3QgYXV0aCA9IHtcbiAgICB1c2VybmFtZTogY29uZmlnLmFwaS51c2VybmFtZSxcbiAgICBwYXNzd29yZDogY29uZmlnLmFwaUtleSxcbiAgfVxuXG4gIGNvbnN0IG9wdGlvbnMgPSB7IC4uLmNvbmZpZy5hcGksIGF1dGgsIHBhcmFtcywgdXJsIH1cblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IFJlcXVlc3Rlci5yZXF1ZXN0PFJlc3BvbnNlU2NoZW1hPihvcHRpb25zKVxuICBjb25zdCByZXN1bHQgPSBSZXF1ZXN0ZXIudmFsaWRhdGVSZXN1bHROdW1iZXIocmVzcG9uc2UuZGF0YSwgcmVzdWx0UGF0aClcblxuICByZXR1cm4gUmVxdWVzdGVyLnN1Y2Nlc3Moam9iUnVuSUQsIFJlcXVlc3Rlci53aXRoUmVzdWx0KHJlc3BvbnNlLCByZXN1bHQpLCBjb25maWcudmVyYm9zZSlcbn1cbiJdfQ==