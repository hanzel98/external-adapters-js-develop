"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExecute = exports.execute = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const ea_bootstrap_2 = require("@chainlink/ea-bootstrap");
const config_1 = require("./config");
const customError = (data) => {
    return data.msg !== 'Successfully';
};
const commonKeys = {
    AUD: { id: '13', endpoint: 'forex/latest' },
    CHF: { id: '466', endpoint: 'forex/latest' },
    EUR: { id: '1', endpoint: 'forex/latest' },
    GBP: { id: '39', endpoint: 'forex/latest' },
    JPY: { id: '1075', endpoint: 'forex/latest' },
    XAU: { id: '1984', endpoint: 'forex/latest' },
    XAG: { id: '1975', endpoint: 'forex/latest' },
    N225: { id: '268', endpoint: 'stock/indices_latest' },
    FTSE: { id: '529', endpoint: 'stock/indices_latest' },
};
const customParams = {
    base: ['base', 'asset', 'from'],
    endpoint: false,
};
// TODO: Run tests with valid API Key, current API Key is expired.
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, customParams);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    let symbol = validator.validated.data.base.toUpperCase();
    let endpoint = validator.validated.data.endpoint;
    if (commonKeys[symbol]) {
        endpoint = commonKeys[symbol].endpoint;
        symbol = commonKeys[symbol].id;
    }
    const access_key = ea_bootstrap_2.util.getRandomRequiredEnv('API_KEY'); // eslint-disable-line camelcase
    const params = {
        access_key,
        id: symbol,
    };
    const options = {
        ...config.api,
        params,
        url: endpoint,
    };
    const response = await ea_bootstrap_1.Requester.request(options, customError);
    response.data.result = ea_bootstrap_1.Requester.validateResultNumber(response.data, ['response', 0, 'c']);
    return ea_bootstrap_1.Requester.success(jobRunID, response);
};
exports.execute = execute;
const makeExecute = (config) => {
    return async (request, context) => exports.execute(request, context, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDBEQUE4RDtBQUM5RCwwREFBOEM7QUFDOUMscUNBQXFDO0FBRXJDLE1BQU0sV0FBVyxHQUFHLENBQUMsSUFBUyxFQUFFLEVBQUU7SUFDaEMsT0FBTyxJQUFJLENBQUMsR0FBRyxLQUFLLGNBQWMsQ0FBQTtBQUNwQyxDQUFDLENBQUE7QUFFRCxNQUFNLFVBQVUsR0FBMkM7SUFDekQsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFO0lBQzNDLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRTtJQUM1QyxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUU7SUFDMUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFO0lBQzNDLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRTtJQUM3QyxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUU7SUFDN0MsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFO0lBQzdDLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLHNCQUFzQixFQUFFO0lBQ3JELElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLHNCQUFzQixFQUFFO0NBQ3RELENBQUE7QUFFRCxNQUFNLFlBQVksR0FBRztJQUNuQixJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQztJQUMvQixRQUFRLEVBQUUsS0FBSztDQUNoQixDQUFBO0FBRUQsa0VBQWtFO0FBQzNELE1BQU0sT0FBTyxHQUE4QixLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRTtJQUM3RSxNQUFNLFNBQVMsR0FBRyxJQUFJLHdCQUFTLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFBO0lBQ3RELElBQUksU0FBUyxDQUFDLEtBQUs7UUFBRSxNQUFNLFNBQVMsQ0FBQyxLQUFLLENBQUE7SUFFMUMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUE7SUFDdkMsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFBO0lBQ3hELElBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQTtJQUNoRCxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUN0QixRQUFRLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQTtRQUN0QyxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQTtLQUMvQjtJQUNELE1BQU0sVUFBVSxHQUFHLG1CQUFJLENBQUMsb0JBQW9CLENBQUMsU0FBUyxDQUFDLENBQUEsQ0FBQyxnQ0FBZ0M7SUFFeEYsTUFBTSxNQUFNLEdBQUc7UUFDYixVQUFVO1FBQ1YsRUFBRSxFQUFFLE1BQU07S0FDWCxDQUFBO0lBRUQsTUFBTSxPQUFPLEdBQUc7UUFDZCxHQUFHLE1BQU0sQ0FBQyxHQUFHO1FBQ2IsTUFBTTtRQUNOLEdBQUcsRUFBRSxRQUFRO0tBQ2QsQ0FBQTtJQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sd0JBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFBO0lBQzlELFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLHdCQUFTLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUMxRixPQUFPLHdCQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQTtBQUM5QyxDQUFDLENBQUE7QUEzQlksUUFBQSxPQUFPLFdBMkJuQjtBQUVNLE1BQU0sV0FBVyxHQUEyQixDQUFDLE1BQU0sRUFBRSxFQUFFO0lBQzVELE9BQU8sS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLGVBQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sSUFBSSxtQkFBVSxFQUFFLENBQUMsQ0FBQTtBQUN0RixDQUFDLENBQUE7QUFGWSxRQUFBLFdBQVcsZUFFdkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeGVjdXRlV2l0aENvbmZpZywgRXhlY3V0ZUZhY3RvcnksIENvbmZpZyB9IGZyb20gJ0BjaGFpbmxpbmsvdHlwZXMnXG5pbXBvcnQgeyBSZXF1ZXN0ZXIsIFZhbGlkYXRvciB9IGZyb20gJ0BjaGFpbmxpbmsvZWEtYm9vdHN0cmFwJ1xuaW1wb3J0IHsgdXRpbCB9IGZyb20gJ0BjaGFpbmxpbmsvZWEtYm9vdHN0cmFwJ1xuaW1wb3J0IHsgbWFrZUNvbmZpZyB9IGZyb20gJy4vY29uZmlnJ1xuXG5jb25zdCBjdXN0b21FcnJvciA9IChkYXRhOiBhbnkpID0+IHtcbiAgcmV0dXJuIGRhdGEubXNnICE9PSAnU3VjY2Vzc2Z1bGx5J1xufVxuXG5jb25zdCBjb21tb25LZXlzOiBSZWNvcmQ8c3RyaW5nLCBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PiA9IHtcbiAgQVVEOiB7IGlkOiAnMTMnLCBlbmRwb2ludDogJ2ZvcmV4L2xhdGVzdCcgfSxcbiAgQ0hGOiB7IGlkOiAnNDY2JywgZW5kcG9pbnQ6ICdmb3JleC9sYXRlc3QnIH0sXG4gIEVVUjogeyBpZDogJzEnLCBlbmRwb2ludDogJ2ZvcmV4L2xhdGVzdCcgfSxcbiAgR0JQOiB7IGlkOiAnMzknLCBlbmRwb2ludDogJ2ZvcmV4L2xhdGVzdCcgfSxcbiAgSlBZOiB7IGlkOiAnMTA3NScsIGVuZHBvaW50OiAnZm9yZXgvbGF0ZXN0JyB9LFxuICBYQVU6IHsgaWQ6ICcxOTg0JywgZW5kcG9pbnQ6ICdmb3JleC9sYXRlc3QnIH0sXG4gIFhBRzogeyBpZDogJzE5NzUnLCBlbmRwb2ludDogJ2ZvcmV4L2xhdGVzdCcgfSxcbiAgTjIyNTogeyBpZDogJzI2OCcsIGVuZHBvaW50OiAnc3RvY2svaW5kaWNlc19sYXRlc3QnIH0sXG4gIEZUU0U6IHsgaWQ6ICc1MjknLCBlbmRwb2ludDogJ3N0b2NrL2luZGljZXNfbGF0ZXN0JyB9LFxufVxuXG5jb25zdCBjdXN0b21QYXJhbXMgPSB7XG4gIGJhc2U6IFsnYmFzZScsICdhc3NldCcsICdmcm9tJ10sXG4gIGVuZHBvaW50OiBmYWxzZSxcbn1cblxuLy8gVE9ETzogUnVuIHRlc3RzIHdpdGggdmFsaWQgQVBJIEtleSwgY3VycmVudCBBUEkgS2V5IGlzIGV4cGlyZWQuXG5leHBvcnQgY29uc3QgZXhlY3V0ZTogRXhlY3V0ZVdpdGhDb25maWc8Q29uZmlnPiA9IGFzeW5jIChyZXF1ZXN0LCBfLCBjb25maWcpID0+IHtcbiAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihyZXF1ZXN0LCBjdXN0b21QYXJhbXMpXG4gIGlmICh2YWxpZGF0b3IuZXJyb3IpIHRocm93IHZhbGlkYXRvci5lcnJvclxuXG4gIGNvbnN0IGpvYlJ1bklEID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5pZFxuICBsZXQgc3ltYm9sID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLmJhc2UudG9VcHBlckNhc2UoKVxuICBsZXQgZW5kcG9pbnQgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmRhdGEuZW5kcG9pbnRcbiAgaWYgKGNvbW1vbktleXNbc3ltYm9sXSkge1xuICAgIGVuZHBvaW50ID0gY29tbW9uS2V5c1tzeW1ib2xdLmVuZHBvaW50XG4gICAgc3ltYm9sID0gY29tbW9uS2V5c1tzeW1ib2xdLmlkXG4gIH1cbiAgY29uc3QgYWNjZXNzX2tleSA9IHV0aWwuZ2V0UmFuZG9tUmVxdWlyZWRFbnYoJ0FQSV9LRVknKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuXG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBhY2Nlc3Nfa2V5LFxuICAgIGlkOiBzeW1ib2wsXG4gIH1cblxuICBjb25zdCBvcHRpb25zID0ge1xuICAgIC4uLmNvbmZpZy5hcGksXG4gICAgcGFyYW1zLFxuICAgIHVybDogZW5kcG9pbnQsXG4gIH1cblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IFJlcXVlc3Rlci5yZXF1ZXN0KG9wdGlvbnMsIGN1c3RvbUVycm9yKVxuICByZXNwb25zZS5kYXRhLnJlc3VsdCA9IFJlcXVlc3Rlci52YWxpZGF0ZVJlc3VsdE51bWJlcihyZXNwb25zZS5kYXRhLCBbJ3Jlc3BvbnNlJywgMCwgJ2MnXSlcbiAgcmV0dXJuIFJlcXVlc3Rlci5zdWNjZXNzKGpvYlJ1bklELCByZXNwb25zZSlcbn1cblxuZXhwb3J0IGNvbnN0IG1ha2VFeGVjdXRlOiBFeGVjdXRlRmFjdG9yeTxDb25maWc+ID0gKGNvbmZpZykgPT4ge1xuICByZXR1cm4gYXN5bmMgKHJlcXVlc3QsIGNvbnRleHQpID0+IGV4ZWN1dGUocmVxdWVzdCwgY29udGV4dCwgY29uZmlnIHx8IG1ha2VDb25maWcoKSlcbn1cbiJdfQ==