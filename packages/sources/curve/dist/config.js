"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeConfig = exports.DEFAULT_BLOCKCHAIN_NETWORK = exports.DEFAULT_EXCHANGE_PROVIDER_ID = exports.DEFAULT_ADDRESS_PROVIDER = exports.DEFAULT_ENDPOINT = exports.ENV_BLOCKCHAIN_NETWORK = exports.ENV_EXCHANGE_PROVIDER_ID = exports.ENV_ADDRESS_PROVIDER = exports.ENV_RPC_URL = exports.NAME = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const ethers_1 = require("ethers");
exports.NAME = 'CURVE';
exports.ENV_RPC_URL = 'RPC_URL';
exports.ENV_ADDRESS_PROVIDER = 'ADDRESS_PROVIDER';
exports.ENV_EXCHANGE_PROVIDER_ID = 'EXCHANGE_PROVIDER_ID';
exports.ENV_BLOCKCHAIN_NETWORK = 'BLOCKCHAIN_NETWORK';
exports.DEFAULT_ENDPOINT = 'crypto';
exports.DEFAULT_ADDRESS_PROVIDER = '0x0000000022D53366457F9d5E68Ec105046FC4383';
exports.DEFAULT_EXCHANGE_PROVIDER_ID = 2;
exports.DEFAULT_BLOCKCHAIN_NETWORK = 'ethereum';
const makeConfig = (prefix) => {
    return {
        ...ea_bootstrap_1.Requester.getDefaultConfig(prefix),
        defaultEndpoint: exports.DEFAULT_ENDPOINT,
        provider: new ethers_1.ethers.providers.JsonRpcProvider(ea_bootstrap_1.util.getRequiredEnv(exports.ENV_RPC_URL, prefix)),
        addressProviderAddress: ea_bootstrap_1.util.getEnv(exports.ENV_ADDRESS_PROVIDER, prefix) || exports.DEFAULT_ADDRESS_PROVIDER,
        exchangeProviderId: Number(ea_bootstrap_1.util.getEnv(exports.ENV_EXCHANGE_PROVIDER_ID, prefix)) || exports.DEFAULT_EXCHANGE_PROVIDER_ID,
        network: ea_bootstrap_1.util.getEnv(exports.ENV_BLOCKCHAIN_NETWORK, prefix) || exports.DEFAULT_BLOCKCHAIN_NETWORK,
    };
};
exports.makeConfig = makeConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwREFBeUQ7QUFFekQsbUNBQStCO0FBRWxCLFFBQUEsSUFBSSxHQUFHLE9BQU8sQ0FBQTtBQUVkLFFBQUEsV0FBVyxHQUFHLFNBQVMsQ0FBQTtBQUN2QixRQUFBLG9CQUFvQixHQUFHLGtCQUFrQixDQUFBO0FBQ3pDLFFBQUEsd0JBQXdCLEdBQUcsc0JBQXNCLENBQUE7QUFDakQsUUFBQSxzQkFBc0IsR0FBRyxvQkFBb0IsQ0FBQTtBQUU3QyxRQUFBLGdCQUFnQixHQUFHLFFBQVEsQ0FBQTtBQUMzQixRQUFBLHdCQUF3QixHQUFHLDRDQUE0QyxDQUFBO0FBQ3ZFLFFBQUEsNEJBQTRCLEdBQUcsQ0FBQyxDQUFBO0FBQ2hDLFFBQUEsMEJBQTBCLEdBQUcsVUFBVSxDQUFBO0FBUzdDLE1BQU0sVUFBVSxHQUEwQixDQUFDLE1BQU0sRUFBRSxFQUFFO0lBQzFELE9BQU87UUFDTCxHQUFHLHdCQUFTLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDO1FBQ3JDLGVBQWUsRUFBRSx3QkFBZ0I7UUFDakMsUUFBUSxFQUFFLElBQUksZUFBTSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsbUJBQUksQ0FBQyxjQUFjLENBQUMsbUJBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN4RixzQkFBc0IsRUFBRSxtQkFBSSxDQUFDLE1BQU0sQ0FBQyw0QkFBb0IsRUFBRSxNQUFNLENBQUMsSUFBSSxnQ0FBd0I7UUFDN0Ysa0JBQWtCLEVBQ2hCLE1BQU0sQ0FBQyxtQkFBSSxDQUFDLE1BQU0sQ0FBQyxnQ0FBd0IsRUFBRSxNQUFNLENBQUMsQ0FBQyxJQUFJLG9DQUE0QjtRQUN2RixPQUFPLEVBQUUsbUJBQUksQ0FBQyxNQUFNLENBQUMsOEJBQXNCLEVBQUUsTUFBTSxDQUFDLElBQUksa0NBQTBCO0tBQ25GLENBQUE7QUFDSCxDQUFDLENBQUE7QUFWWSxRQUFBLFVBQVUsY0FVdEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0ZXIsIHV0aWwgfSBmcm9tICdAY2hhaW5saW5rL2VhLWJvb3RzdHJhcCdcbmltcG9ydCB7IENvbmZpZyBhcyBCYXNlQ29uZmlnLCBDb25maWdGYWN0b3J5IH0gZnJvbSAnQGNoYWlubGluay90eXBlcydcbmltcG9ydCB7IGV0aGVycyB9IGZyb20gJ2V0aGVycydcblxuZXhwb3J0IGNvbnN0IE5BTUUgPSAnQ1VSVkUnXG5cbmV4cG9ydCBjb25zdCBFTlZfUlBDX1VSTCA9ICdSUENfVVJMJ1xuZXhwb3J0IGNvbnN0IEVOVl9BRERSRVNTX1BST1ZJREVSID0gJ0FERFJFU1NfUFJPVklERVInXG5leHBvcnQgY29uc3QgRU5WX0VYQ0hBTkdFX1BST1ZJREVSX0lEID0gJ0VYQ0hBTkdFX1BST1ZJREVSX0lEJ1xuZXhwb3J0IGNvbnN0IEVOVl9CTE9DS0NIQUlOX05FVFdPUksgPSAnQkxPQ0tDSEFJTl9ORVRXT1JLJ1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9FTkRQT0lOVCA9ICdjcnlwdG8nXG5leHBvcnQgY29uc3QgREVGQVVMVF9BRERSRVNTX1BST1ZJREVSID0gJzB4MDAwMDAwMDAyMkQ1MzM2NjQ1N0Y5ZDVFNjhFYzEwNTA0NkZDNDM4MydcbmV4cG9ydCBjb25zdCBERUZBVUxUX0VYQ0hBTkdFX1BST1ZJREVSX0lEID0gMlxuZXhwb3J0IGNvbnN0IERFRkFVTFRfQkxPQ0tDSEFJTl9ORVRXT1JLID0gJ2V0aGVyZXVtJ1xuXG5leHBvcnQgdHlwZSBDb25maWcgPSBCYXNlQ29uZmlnICYge1xuICBwcm92aWRlcjogZXRoZXJzLnByb3ZpZGVycy5Qcm92aWRlclxuICBhZGRyZXNzUHJvdmlkZXJBZGRyZXNzOiBzdHJpbmdcbiAgZXhjaGFuZ2VQcm92aWRlcklkOiBudW1iZXJcbiAgbmV0d29yazogc3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCBtYWtlQ29uZmlnOiBDb25maWdGYWN0b3J5PENvbmZpZz4gPSAocHJlZml4KSA9PiB7XG4gIHJldHVybiB7XG4gICAgLi4uUmVxdWVzdGVyLmdldERlZmF1bHRDb25maWcocHJlZml4KSxcbiAgICBkZWZhdWx0RW5kcG9pbnQ6IERFRkFVTFRfRU5EUE9JTlQsXG4gICAgcHJvdmlkZXI6IG5ldyBldGhlcnMucHJvdmlkZXJzLkpzb25ScGNQcm92aWRlcih1dGlsLmdldFJlcXVpcmVkRW52KEVOVl9SUENfVVJMLCBwcmVmaXgpKSxcbiAgICBhZGRyZXNzUHJvdmlkZXJBZGRyZXNzOiB1dGlsLmdldEVudihFTlZfQUREUkVTU19QUk9WSURFUiwgcHJlZml4KSB8fCBERUZBVUxUX0FERFJFU1NfUFJPVklERVIsXG4gICAgZXhjaGFuZ2VQcm92aWRlcklkOlxuICAgICAgTnVtYmVyKHV0aWwuZ2V0RW52KEVOVl9FWENIQU5HRV9QUk9WSURFUl9JRCwgcHJlZml4KSkgfHwgREVGQVVMVF9FWENIQU5HRV9QUk9WSURFUl9JRCxcbiAgICBuZXR3b3JrOiB1dGlsLmdldEVudihFTlZfQkxPQ0tDSEFJTl9ORVRXT1JLLCBwcmVmaXgpIHx8IERFRkFVTFRfQkxPQ0tDSEFJTl9ORVRXT1JLLFxuICB9XG59XG4iXX0=