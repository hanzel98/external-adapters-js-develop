"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.endpointResultPaths = exports.supportedEndpoints = void 0;
const tslib_1 = require("tslib");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
const ethers_1 = require("ethers");
const address_provider_json_1 = tslib_1.__importDefault(require("../abis/address_provider.json"));
const registry_exchanges_json_1 = tslib_1.__importDefault(require("../abis/registry_exchanges.json"));
const ERC20_json_1 = tslib_1.__importDefault(require("../abis/ERC20.json"));
const decimal_js_1 = require("decimal.js");
exports.supportedEndpoints = ['crypto'];
exports.endpointResultPaths = {
    crypto: 'rate',
};
exports.inputParameters = {
    from: ['base', 'from', 'coin'],
    fromAddress: false,
    fromDecimals: false,
    to: ['quote', 'to', 'market'],
    toAddress: false,
    toDecimals: false,
    amount: false,
    resultPath: false,
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const { address: from, decimals: fromDecimals } = await getTokenDetails(validator, 'from', config);
    const { address: to, decimals: toDecimals } = await getTokenDetails(validator, 'to', config);
    const inputAmount = validator.validated.data.amount || 1;
    const amount = ethers_1.BigNumber.from(inputAmount).mul(ethers_1.BigNumber.from(10).pow(fromDecimals));
    const resultPath = validator.validated.data.resultPath;
    const [pool, output] = await getBestRate(from, to, amount, config);
    const outputAmount = new decimal_js_1.Decimal(output.toString()).div(new decimal_js_1.Decimal(10).pow(toDecimals));
    const rate = outputAmount.div(inputAmount);
    const data = {
        pool,
        input: amount.toString(),
        inputToken: from,
        inputDecimals: fromDecimals,
        output: output.toString(),
        outputToken: to,
        outputDecimals: toDecimals,
        rate: rate.toNumber(),
    };
    const response = {
        status: 200,
        statusText: 'OK',
        headers: {},
        config: {},
        data: data,
    };
    const result = ea_bootstrap_1.Requester.validateResultNumber(response.data, [resultPath]);
    return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, result), config.verbose);
};
exports.execute = execute;
/**
 * getTokenDetails will find the address and number of decimal for a token.
 *
 * The order of operations is as follows:
 *  - address:
 *     1. Check if the address was provided in the request.
 *     2. If not, check the symbol in the request to see if we have pre-set the address for this symbol/network.
 *     3. If not, we assume the symbol param was actually the address.
 *  - decimals:
 *     1. Check if the number of decimals was provided in the request.
 *     2. Query the contract at the address found above to see how many decimals it's set to.
 * @param validator The validation class to use
 * @param direction Used to get the params in the request
 * - `{direction}` is the symbol of the token (to find pre-set token details)
 * - `{direction}Address` is the token address as set in the request
 * - `{direction}Decimals` is the number of decimals for the token as set in the request
 * @param config Configuration to extract token decimals from
 */
const getTokenDetails = async (validator, direction, config) => {
    const symbol = validator.overrideSymbol(config_1.NAME, validator.validated.data[direction]);
    const address = validator.validated.data[`${direction}Address`] ||
        validator.overrideToken(symbol, config.network) ||
        symbol;
    const decimals = validator.validated.data[`${direction}Decimals`] || (await getDecimals(address, config));
    return { address, decimals };
};
const getDecimals = async (address, config) => new ethers_1.ethers.Contract(address, ERC20_json_1.default, config.provider).decimals();
const getBestRate = async (from, to, amount, config) => {
    const provider = new ethers_1.ethers.Contract(config.addressProviderAddress, address_provider_json_1.default, config.provider);
    const exchange = await provider.get_address(config.exchangeProviderId);
    const swaps = new ethers_1.ethers.Contract(exchange, registry_exchanges_json_1.default, config.provider);
    return swaps.get_best_rate(from, to, amount);
};
//# sourceMappingURL=data:application/json;base64,