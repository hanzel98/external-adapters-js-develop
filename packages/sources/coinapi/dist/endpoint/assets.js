"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.endpointResultPaths = exports.batchablePropertyPath = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
exports.supportedEndpoints = ['assets'];
exports.batchablePropertyPath = [{ name: 'base' }];
exports.endpointResultPaths = {
    assets: 'price_usd',
};
exports.inputParameters = {
    base: ['base', 'from', 'coin'],
    resultPath: false,
};
const handleBatchedRequest = (jobRunID, request, response, validator, resultPath) => {
    const payload = [];
    for (const asset of response.data) {
        payload.push([
            {
                ...request,
                data: {
                    ...request.data,
                    base: validator
                        .overrideReverseLookup(config_1.NAME, 'overrides', asset.asset_id)
                        .toUpperCase(),
                },
            },
            ea_bootstrap_1.Requester.validateResultNumber(asset, [resultPath]),
        ]);
    }
    return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, undefined, payload), true, exports.batchablePropertyPath);
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const resultPath = validator.validated.data.resultPath;
    const from = validator.validated.data.base;
    const symbol = validator.overrideSymbol(config_1.NAME, from);
    const url = `assets`;
    const params = {
        filter_asset_id: Array.isArray(symbol) ? symbol.join(',') : symbol,
    };
    const options = {
        ...config.api,
        url,
        params: { ...config.api.params, ...params },
    };
    const response = await ea_bootstrap_1.Requester.request(options);
    if (Array.isArray(symbol))
        return handleBatchedRequest(jobRunID, request, response, validator, resultPath);
    const result = ea_bootstrap_1.Requester.validateResultNumber(response.data[0], [resultPath]);
    return ea_bootstrap_1.Requester.success(jobRunID, ea_bootstrap_1.Requester.withResult(response, result), config.verbose, exports.batchablePropertyPath);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VuZHBvaW50L2Fzc2V0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwREFBOEQ7QUFROUQsc0NBQStDO0FBRWxDLFFBQUEsa0JBQWtCLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUMvQixRQUFBLHFCQUFxQixHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQTtBQUUxQyxRQUFBLG1CQUFtQixHQUFHO0lBQ2pDLE1BQU0sRUFBRSxXQUFXO0NBQ3BCLENBQUE7QUFzQlksUUFBQSxlQUFlLEdBQW9CO0lBQzlDLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDO0lBQzlCLFVBQVUsRUFBRSxLQUFLO0NBQ2xCLENBQUE7QUFFRCxNQUFNLG9CQUFvQixHQUFHLENBQzNCLFFBQWdCLEVBQ2hCLE9BQXVCLEVBQ3ZCLFFBQXlDLEVBQ3pDLFNBQW9CLEVBQ3BCLFVBQWtCLEVBQ2xCLEVBQUU7SUFDRixNQUFNLE9BQU8sR0FBK0IsRUFBRSxDQUFBO0lBRTlDLEtBQUssTUFBTSxLQUFLLElBQUksUUFBUSxDQUFDLElBQUksRUFBRTtRQUNqQyxPQUFPLENBQUMsSUFBSSxDQUFDO1lBQ1g7Z0JBQ0UsR0FBRyxPQUFPO2dCQUNWLElBQUksRUFBRTtvQkFDSixHQUFHLE9BQU8sQ0FBQyxJQUFJO29CQUNmLElBQUksRUFBRSxTQUFTO3lCQUNaLHFCQUFxQixDQUFDLGFBQVcsRUFBRSxXQUFXLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQzt5QkFDL0QsV0FBVyxFQUFFO2lCQUNqQjthQUNGO1lBQ0Qsd0JBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUNwRCxDQUFDLENBQUE7S0FDSDtJQUNELE9BQU8sd0JBQVMsQ0FBQyxPQUFPLENBQ3RCLFFBQVEsRUFDUix3QkFBUyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxFQUNsRCxJQUFJLEVBQ0osNkJBQXFCLENBQ3RCLENBQUE7QUFDSCxDQUFDLENBQUE7QUFFTSxNQUFNLE9BQU8sR0FBOEIsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUU7SUFDN0UsTUFBTSxTQUFTLEdBQUcsSUFBSSx3QkFBUyxDQUFDLE9BQU8sRUFBRSx1QkFBZSxDQUFDLENBQUE7SUFDekQsSUFBSSxTQUFTLENBQUMsS0FBSztRQUFFLE1BQU0sU0FBUyxDQUFDLEtBQUssQ0FBQTtJQUMxQyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQTtJQUN2QyxNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUE7SUFDdEQsTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFBO0lBQzFDLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxjQUFjLENBQUMsYUFBVyxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQzFELE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQTtJQUNwQixNQUFNLE1BQU0sR0FBRztRQUNiLGVBQWUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNO0tBQ25FLENBQUE7SUFFRCxNQUFNLE9BQU8sR0FBRztRQUNkLEdBQUcsTUFBTSxDQUFDLEdBQUc7UUFDYixHQUFHO1FBQ0gsTUFBTSxFQUFFLEVBQUUsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxHQUFHLE1BQU0sRUFBRTtLQUM1QyxDQUFBO0lBRUQsTUFBTSxRQUFRLEdBQUcsTUFBTSx3QkFBUyxDQUFDLE9BQU8sQ0FBbUIsT0FBTyxDQUFDLENBQUE7SUFFbkUsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUN2QixPQUFPLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUVqRixNQUFNLE1BQU0sR0FBRyx3QkFBUyxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFBO0lBQzdFLE9BQU8sd0JBQVMsQ0FBQyxPQUFPLENBQ3RCLFFBQVEsRUFDUix3QkFBUyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQ3RDLE1BQU0sQ0FBQyxPQUFPLEVBQ2QsNkJBQXFCLENBQ3RCLENBQUE7QUFDSCxDQUFDLENBQUE7QUE5QlksUUFBQSxPQUFPLFdBOEJuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3RlciwgVmFsaWRhdG9yIH0gZnJvbSAnQGNoYWlubGluay9lYS1ib290c3RyYXAnXG5pbXBvcnQge1xuICBFeGVjdXRlV2l0aENvbmZpZyxcbiAgQ29uZmlnLFxuICBBeGlvc1Jlc3BvbnNlLFxuICBBZGFwdGVyUmVxdWVzdCxcbiAgSW5wdXRQYXJhbWV0ZXJzLFxufSBmcm9tICdAY2hhaW5saW5rL3R5cGVzJ1xuaW1wb3J0IHsgTkFNRSBhcyBBZGFwdGVyTmFtZSB9IGZyb20gJy4uL2NvbmZpZydcblxuZXhwb3J0IGNvbnN0IHN1cHBvcnRlZEVuZHBvaW50cyA9IFsnYXNzZXRzJ11cbmV4cG9ydCBjb25zdCBiYXRjaGFibGVQcm9wZXJ0eVBhdGggPSBbeyBuYW1lOiAnYmFzZScgfV1cblxuZXhwb3J0IGNvbnN0IGVuZHBvaW50UmVzdWx0UGF0aHMgPSB7XG4gIGFzc2V0czogJ3ByaWNlX3VzZCcsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VTY2hlbWEge1xuICBhc3NldF9pZDogc3RyaW5nXG4gIG5hbWU6IHN0cmluZ1xuICB0eXBlX2lzX2NyeXB0bzogbnVtYmVyXG4gIGRhdGFfc3RhcnQ6IHN0cmluZ1xuICBkYXRhX2VuZDogc3RyaW5nXG4gIGRhdGFfcXVvdGVfc3RhcnQ6IHN0cmluZ1xuICBkYXRhX3F1b3RlX2VuZDogc3RyaW5nXG4gIGRhdGFfb3JkZXJib29rX3N0YXJ0OiBzdHJpbmdcbiAgZGF0YV9vcmRlcmJvb2tfZW5kOiBzdHJpbmdcbiAgZGF0YV90cmFkZV9zdGFydDogc3RyaW5nXG4gIGRhdGFfdHJhZGVfZW5kOiBzdHJpbmdcbiAgZGF0YV9zeW1ib2xzX2NvdW50OiBudW1iZXJcbiAgdm9sdW1lXzFocnNfdXNkOiBudW1iZXJcbiAgdm9sdW1lXzFkYXlfdXNkOiBudW1iZXJcbiAgdm9sdW1lXzFtdGhfdXNkOiBudW1iZXJcbiAgcHJpY2VfdXNkOiBudW1iZXJcbiAgaWRfaWNvbjogc3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCBpbnB1dFBhcmFtZXRlcnM6IElucHV0UGFyYW1ldGVycyA9IHtcbiAgYmFzZTogWydiYXNlJywgJ2Zyb20nLCAnY29pbiddLFxuICByZXN1bHRQYXRoOiBmYWxzZSxcbn1cblxuY29uc3QgaGFuZGxlQmF0Y2hlZFJlcXVlc3QgPSAoXG4gIGpvYlJ1bklEOiBzdHJpbmcsXG4gIHJlcXVlc3Q6IEFkYXB0ZXJSZXF1ZXN0LFxuICByZXNwb25zZTogQXhpb3NSZXNwb25zZTxSZXNwb25zZVNjaGVtYVtdPixcbiAgdmFsaWRhdG9yOiBWYWxpZGF0b3IsXG4gIHJlc3VsdFBhdGg6IHN0cmluZyxcbikgPT4ge1xuICBjb25zdCBwYXlsb2FkOiBbQWRhcHRlclJlcXVlc3QsIG51bWJlcl1bXSA9IFtdXG5cbiAgZm9yIChjb25zdCBhc3NldCBvZiByZXNwb25zZS5kYXRhKSB7XG4gICAgcGF5bG9hZC5wdXNoKFtcbiAgICAgIHtcbiAgICAgICAgLi4ucmVxdWVzdCxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIC4uLnJlcXVlc3QuZGF0YSxcbiAgICAgICAgICBiYXNlOiB2YWxpZGF0b3JcbiAgICAgICAgICAgIC5vdmVycmlkZVJldmVyc2VMb29rdXAoQWRhcHRlck5hbWUsICdvdmVycmlkZXMnLCBhc3NldC5hc3NldF9pZClcbiAgICAgICAgICAgIC50b1VwcGVyQ2FzZSgpLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIFJlcXVlc3Rlci52YWxpZGF0ZVJlc3VsdE51bWJlcihhc3NldCwgW3Jlc3VsdFBhdGhdKSxcbiAgICBdKVxuICB9XG4gIHJldHVybiBSZXF1ZXN0ZXIuc3VjY2VzcyhcbiAgICBqb2JSdW5JRCxcbiAgICBSZXF1ZXN0ZXIud2l0aFJlc3VsdChyZXNwb25zZSwgdW5kZWZpbmVkLCBwYXlsb2FkKSxcbiAgICB0cnVlLFxuICAgIGJhdGNoYWJsZVByb3BlcnR5UGF0aCxcbiAgKVxufVxuXG5leHBvcnQgY29uc3QgZXhlY3V0ZTogRXhlY3V0ZVdpdGhDb25maWc8Q29uZmlnPiA9IGFzeW5jIChyZXF1ZXN0LCBfLCBjb25maWcpID0+IHtcbiAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihyZXF1ZXN0LCBpbnB1dFBhcmFtZXRlcnMpXG4gIGlmICh2YWxpZGF0b3IuZXJyb3IpIHRocm93IHZhbGlkYXRvci5lcnJvclxuICBjb25zdCBqb2JSdW5JRCA9IHZhbGlkYXRvci52YWxpZGF0ZWQuaWRcbiAgY29uc3QgcmVzdWx0UGF0aCA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5yZXN1bHRQYXRoXG4gIGNvbnN0IGZyb20gPSB2YWxpZGF0b3IudmFsaWRhdGVkLmRhdGEuYmFzZVxuICBjb25zdCBzeW1ib2wgPSB2YWxpZGF0b3Iub3ZlcnJpZGVTeW1ib2woQWRhcHRlck5hbWUsIGZyb20pXG4gIGNvbnN0IHVybCA9IGBhc3NldHNgXG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBmaWx0ZXJfYXNzZXRfaWQ6IEFycmF5LmlzQXJyYXkoc3ltYm9sKSA/IHN5bWJvbC5qb2luKCcsJykgOiBzeW1ib2wsXG4gIH1cblxuICBjb25zdCBvcHRpb25zID0ge1xuICAgIC4uLmNvbmZpZy5hcGksXG4gICAgdXJsLFxuICAgIHBhcmFtczogeyAuLi5jb25maWcuYXBpLnBhcmFtcywgLi4ucGFyYW1zIH0sXG4gIH1cblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IFJlcXVlc3Rlci5yZXF1ZXN0PFJlc3BvbnNlU2NoZW1hW10+KG9wdGlvbnMpXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoc3ltYm9sKSlcbiAgICByZXR1cm4gaGFuZGxlQmF0Y2hlZFJlcXVlc3Qoam9iUnVuSUQsIHJlcXVlc3QsIHJlc3BvbnNlLCB2YWxpZGF0b3IsIHJlc3VsdFBhdGgpXG5cbiAgY29uc3QgcmVzdWx0ID0gUmVxdWVzdGVyLnZhbGlkYXRlUmVzdWx0TnVtYmVyKHJlc3BvbnNlLmRhdGFbMF0sIFtyZXN1bHRQYXRoXSlcbiAgcmV0dXJuIFJlcXVlc3Rlci5zdWNjZXNzKFxuICAgIGpvYlJ1bklELFxuICAgIFJlcXVlc3Rlci53aXRoUmVzdWx0KHJlc3BvbnNlLCByZXN1bHQpLFxuICAgIGNvbmZpZy52ZXJib3NlLFxuICAgIGJhdGNoYWJsZVByb3BlcnR5UGF0aCxcbiAgKVxufVxuIl19