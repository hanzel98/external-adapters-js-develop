"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = void 0;
const tslib_1 = require("tslib");
const object_path_1 = tslib_1.__importDefault(require("object-path"));
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const ea_bootstrap_2 = require("@chainlink/ea-bootstrap");
const decimal_js_1 = require("decimal.js");
const inputParams = {
    reducer: true,
    initialValue: false,
    dataPath: false,
    valuePath: false,
};
const MAX_DECIMALS = 18;
const DEFAULT_DATA_PATH = 'result';
// Export function to integrate with Chainlink node
const execute = async (request) => {
    const validator = new ea_bootstrap_1.Validator(request, inputParams);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const { data } = validator.validated;
    const dataPath = data.dataPath || DEFAULT_DATA_PATH;
    let inputData = object_path_1.default.get(request.data, dataPath);
    // Check if input data is valid
    if (!inputData || !Array.isArray(inputData) || inputData.length === 0) {
        throw Error(`Input must be a non-empty array.`);
    }
    const path = data.valuePath || '';
    // Check if every input object has a path specified
    if (path && !inputData.every((val) => object_path_1.default.has(val, path))) {
        throw Error(`Path '${path}' not present in every item.`);
    }
    // Get value at specified path
    const _get = (val) => object_path_1.default.get(val, path);
    // Filter undesired values
    inputData = inputData.filter((val) => !!_get(val));
    // Check if all items are numbers
    const _isNumber = (val) => !isNaN(_get(val));
    if (!inputData.every(_isNumber)) {
        throw Error(`Not every '${path}' item is a number.`);
    }
    let result;
    switch (data.reducer) {
        case 'sum': {
            result = inputData.reduce((acc, val) => {
                return acc.plus(new decimal_js_1.Decimal(_get(val)));
            }, new decimal_js_1.Decimal(data.initialValue) || new decimal_js_1.Decimal(0));
            break;
        }
        case 'product': {
            result = inputData.reduce((acc, val) => acc.mul(new decimal_js_1.Decimal(_get(val))), new decimal_js_1.Decimal(data.initialValue) || new decimal_js_1.Decimal(1));
            break;
        }
        case 'average': {
            result = inputData.reduce((acc, val, _, { length }) => acc.plus(new decimal_js_1.Decimal(_get(val)).div(new decimal_js_1.Decimal(length))), new decimal_js_1.Decimal(data.initialValue) || new decimal_js_1.Decimal(0));
            break;
        }
        case 'median': {
            const sortedData = inputData.sort((a, b) => _get(a) - _get(b));
            const mid = Math.ceil(inputData.length / 2);
            result =
                inputData.length % 2 === 0
                    ? new decimal_js_1.Decimal(sortedData[mid]).plus(new decimal_js_1.Decimal(sortedData[mid - 1])).div(new decimal_js_1.Decimal(2))
                    : new decimal_js_1.Decimal(sortedData[mid - 1]);
            break;
        }
        case 'min': {
            result = inputData.reduce((acc, val) => decimal_js_1.Decimal.min(acc, new decimal_js_1.Decimal(_get(val))), new decimal_js_1.Decimal(data.initialValue) || new decimal_js_1.Decimal(Number.MAX_VALUE));
            break;
        }
        case 'max': {
            result = inputData.reduce((acc, val) => decimal_js_1.Decimal.max(acc, new decimal_js_1.Decimal(_get(val))), new decimal_js_1.Decimal(data.initialValue) || new decimal_js_1.Decimal(Number.MIN_VALUE));
            break;
        }
        default: {
            throw Error(`Reducer ${data.reducer} not supported.`);
        }
    }
    // Avoid printing scientific notation on output with `result.toString()`
    const resultStr = ea_bootstrap_2.util.toFixedMax(result, MAX_DECIMALS);
    return ea_bootstrap_1.Requester.success(jobRunID, {
        data: { result: resultStr },
        status: 200,
    });
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,