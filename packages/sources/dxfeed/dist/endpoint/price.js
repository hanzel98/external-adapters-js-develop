"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.batchablePropertyPath = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
exports.supportedEndpoints = ['price', 'crypto', 'stock', 'forex'];
exports.batchablePropertyPath = [{ name: 'base', limit: 120 }];
const customError = (data) => data.Response === 'Error';
exports.inputParameters = {
    base: ['base', 'from', 'coin', 'market'],
};
const quoteEventSymbols = {
    'USO/USD:AFX': true,
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const base = validator.overrideSymbol(config.name || config_1.NAME);
    const symbol = Array.isArray(base)
        ? base.map((symbol) => symbol.toUpperCase()).join(',')
        : base.toUpperCase();
    const events = quoteEventSymbols[symbol] ? 'Quote' : 'Trade';
    const url = 'events.json';
    const params = {
        events,
        symbols: symbol,
    };
    const options = {
        ...config.api,
        url,
        params,
    };
    const response = await ea_bootstrap_1.Requester.request(options, customError);
    if (Array.isArray(base)) {
        return handleBatchedRequest(jobRunID, request, response, events);
    }
    // NOTE: may need to force entries quoteEventSymbols to not use batching
    const quotePath = ['Quote', symbol, 'bidPrice'];
    const tradePath = ['Trade', symbol, 'price'];
    response.data.result = ea_bootstrap_1.Requester.validateResultNumber(response.data, events === 'Quote' ? quotePath : tradePath);
    return ea_bootstrap_1.Requester.success(jobRunID, response, config.verbose, exports.batchablePropertyPath);
};
exports.execute = execute;
const handleBatchedRequest = (jobRunID, request, response, events) => {
    const payload = [];
    for (const base in response.data[events]) {
        const isArray = Array.isArray(response.data[events][base]);
        payload.push([
            {
                ...request,
                data: {
                    ...request.data,
                    base: response.data[events][base],
                },
            },
            ea_bootstrap_1.Requester.validateResultNumber(response.data, isArray ? [events, base, 0, 'price'] : [events, base, 'price']),
        ]);
    }
    response.data.results = payload;
    return ea_bootstrap_1.Requester.success(jobRunID, response, true, exports.batchablePropertyPath);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZW5kcG9pbnQvcHJpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQThEO0FBUTlELHNDQUErQztBQUVsQyxRQUFBLGtCQUFrQixHQUFHLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUE7QUFDMUQsUUFBQSxxQkFBcUIsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQTtBQUVuRSxNQUFNLFdBQVcsR0FBRyxDQUFDLElBQVMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUE7QUFFL0MsUUFBQSxlQUFlLEdBQW9CO0lBQzlDLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQztDQUN6QyxDQUFBO0FBRUQsTUFBTSxpQkFBaUIsR0FBK0I7SUFDcEQsYUFBYSxFQUFFLElBQUk7Q0FDcEIsQ0FBQTtBQUVNLE1BQU0sT0FBTyxHQUE4QixLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRTtJQUM3RSxNQUFNLFNBQVMsR0FBRyxJQUFJLHdCQUFTLENBQUMsT0FBTyxFQUFFLHVCQUFlLENBQUMsQ0FBQTtJQUN6RCxJQUFJLFNBQVMsQ0FBQyxLQUFLO1FBQUUsTUFBTSxTQUFTLENBQUMsS0FBSyxDQUFBO0lBRTFDLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFBO0lBQ3ZDLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxhQUFXLENBQUMsQ0FBQTtJQUNqRSxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztRQUNoQyxDQUFDLENBQUMs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IGZyb20gJ0BjaGFpbmxpbmsvZWEtYm9vdHN0cmFwJ1xuaW1wb3J0IHtcbiAgRXhlY3V0ZVdpdGhDb25maWcsXG4gIENvbmZpZyxcbiAgSW5wdXRQYXJhbWV0ZXJzLFxuICBBeGlvc1Jlc3BvbnNlLFxuICBBZGFwdGVyUmVxdWVzdCxcbn0gZnJvbSAnQGNoYWlubGluay90eXBlcydcbmltcG9ydCB7IE5BTUUgYXMgQWRhcHRlck5hbWUgfSBmcm9tICcuLi9jb25maWcnXG5cbmV4cG9ydCBjb25zdCBzdXBwb3J0ZWRFbmRwb2ludHMgPSBbJ3ByaWNlJywgJ2NyeXB0bycsICdzdG9jaycsICdmb3JleCddXG5leHBvcnQgY29uc3QgYmF0Y2hhYmxlUHJvcGVydHlQYXRoID0gW3sgbmFtZTogJ2Jhc2UnLCBsaW1pdDogMTIwIH1dXG5cbmNvbnN0IGN1c3RvbUVycm9yID0gKGRhdGE6IGFueSkgPT4gZGF0YS5SZXNwb25zZSA9PT0gJ0Vycm9yJ1xuXG5leHBvcnQgY29uc3QgaW5wdXRQYXJhbWV0ZXJzOiBJbnB1dFBhcmFtZXRlcnMgPSB7XG4gIGJhc2U6IFsnYmFzZScsICdmcm9tJywgJ2NvaW4nLCAnbWFya2V0J10sXG59XG5cbmNvbnN0IHF1b3RlRXZlbnRTeW1ib2xzOiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSA9IHtcbiAgJ1VTTy9VU0Q6QUZYJzogdHJ1ZSxcbn1cblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGU6IEV4ZWN1dGVXaXRoQ29uZmlnPENvbmZpZz4gPSBhc3luYyAocmVxdWVzdCwgXywgY29uZmlnKSA9PiB7XG4gIGNvbnN0IHZhbGlkYXRvciA9IG5ldyBWYWxpZGF0b3IocmVxdWVzdCwgaW5wdXRQYXJhbWV0ZXJzKVxuICBpZiAodmFsaWRhdG9yLmVycm9yKSB0aHJvdyB2YWxpZGF0b3IuZXJyb3JcblxuICBjb25zdCBqb2JSdW5JRCA9IHZhbGlkYXRvci52YWxpZGF0ZWQuaWRcbiAgY29uc3QgYmFzZSA9IHZhbGlkYXRvci5vdmVycmlkZVN5bWJvbChjb25maWcubmFtZSB8fCBBZGFwdGVyTmFtZSlcbiAgY29uc3Qgc3ltYm9sID0gQXJyYXkuaXNBcnJheShiYXNlKVxuICAgID8gYmFzZS5tYXAoKHN5bWJvbCkgPT4gc3ltYm9sLnRvVXBwZXJDYXNlKCkpLmpvaW4oJywnKVxuICAgIDogYmFzZS50b1VwcGVyQ2FzZSgpXG5cbiAgY29uc3QgZXZlbnRzID0gcXVvdGVFdmVudFN5bWJvbHNbc3ltYm9sXSA/ICdRdW90ZScgOiAnVHJhZGUnXG4gIGNvbnN0IHVybCA9ICdldmVudHMuanNvbidcblxuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgZXZlbnRzLFxuICAgIHN5bWJvbHM6IHN5bWJvbCxcbiAgfVxuXG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgLi4uY29uZmlnLmFwaSxcbiAgICB1cmwsXG4gICAgcGFyYW1zLFxuICB9XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgUmVxdWVzdGVyLnJlcXVlc3Qob3B0aW9ucywgY3VzdG9tRXJyb3IpXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYmFzZSkpIHtcbiAgICByZXR1cm4gaGFuZGxlQmF0Y2hlZFJlcXVlc3Qoam9iUnVuSUQsIHJlcXVlc3QsIHJlc3BvbnNlLCBldmVudHMpXG4gIH1cblxuICAvLyBOT1RFOiBtYXkgbmVlZCB0byBmb3JjZSBlbnRyaWVzIHF1b3RlRXZlbnRTeW1ib2xzIHRvIG5vdCB1c2UgYmF0Y2hpbmdcblxuICBjb25zdCBxdW90ZVBhdGggPSBbJ1F1b3RlJywgc3ltYm9sLCAnYmlkUHJpY2UnXVxuICBjb25zdCB0cmFkZVBhdGggPSBbJ1RyYWRlJywgc3ltYm9sLCAncHJpY2UnXVxuICByZXNwb25zZS5kYXRhLnJlc3VsdCA9IFJlcXVlc3Rlci52YWxpZGF0ZVJlc3VsdE51bWJlcihcbiAgICByZXNwb25zZS5kYXRhLFxuICAgIGV2ZW50cyA9PT0gJ1F1b3RlJyA/IHF1b3RlUGF0aCA6IHRyYWRlUGF0aCxcbiAgKVxuICByZXR1cm4gUmVxdWVzdGVyLnN1Y2Nlc3Moam9iUnVuSUQsIHJlc3BvbnNlLCBjb25maWcudmVyYm9zZSwgYmF0Y2hhYmxlUHJvcGVydHlQYXRoKVxufVxuXG5jb25zdCBoYW5kbGVCYXRjaGVkUmVxdWVzdCA9IChcbiAgam9iUnVuSUQ6IHN0cmluZyxcbiAgcmVxdWVzdDogQWRhcHRlclJlcXVlc3QsXG4gIHJlc3BvbnNlOiBBeGlvc1Jlc3BvbnNlLFxuICBldmVudHM6IHN0cmluZyxcbikgPT4ge1xuICBjb25zdCBwYXlsb2FkOiBbQWRhcHRlclJlcXVlc3QsIG51bWJlcl1bXSA9IFtdXG4gIGZvciAoY29uc3QgYmFzZSBpbiByZXNwb25zZS5kYXRhW2V2ZW50c10pIHtcbiAgICBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheShyZXNwb25zZS5kYXRhW2V2ZW50c11bYmFzZV0pXG4gICAgcGF5bG9hZC5wdXNoKFtcbiAgICAgIHtcbiAgICAgICAgLi4ucmVxdWVzdCxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIC4uLnJlcXVlc3QuZGF0YSxcbiAgICAgICAgICBiYXNlOiByZXNwb25zZS5kYXRhW2V2ZW50c11bYmFzZV0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgUmVxdWVzdGVyLnZhbGlkYXRlUmVzdWx0TnVtYmVyKFxuICAgICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgICBpc0FycmF5ID8gW2V2ZW50cywgYmFzZSwgMCwgJ3ByaWNlJ10gOiBbZXZlbnRzLCBiYXNlLCAncHJpY2UnXSxcbiAgICAgICksXG4gICAgXSlcbiAgfVxuICByZXNwb25zZS5kYXRhLnJlc3VsdHMgPSBwYXlsb2FkXG4gIHJldHVybiBSZXF1ZXN0ZXIuc3VjY2Vzcyhqb2JSdW5JRCwgcmVzcG9uc2UsIHRydWUsIGJhdGNoYWJsZVByb3BlcnR5UGF0aClcbn1cbiJdfQ==