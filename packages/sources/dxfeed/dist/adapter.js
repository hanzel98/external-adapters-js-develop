"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeWSHandler = exports.makeExecute = exports.endpointSelector = exports.execute = void 0;
const tslib_1 = require("tslib");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("./config");
const endpoints = tslib_1.__importStar(require("./endpoint"));
const execute = async (request, context, config) => {
    return ea_bootstrap_1.Builder.buildSelector(request, context, config, endpoints);
};
exports.execute = execute;
const endpointSelector = (request) => ea_bootstrap_1.Builder.selectEndpoint(request, config_1.makeConfig(), endpoints);
exports.endpointSelector = endpointSelector;
const makeExecute = (config) => {
    return async (request, context) => exports.execute(request, context, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
const makeWSHandler = (config) => {
    const getSubscription = (request, ticker) => {
        if (!ticker)
            return;
        return [
            {
                channel: SERVICE_SUB,
                data: {
                    [`${request === 'subscribe' ? 'add' : 'remove'}`]: {
                        Quote: [ticker],
                    },
                },
            },
        ];
    };
    const META_HANDSHAKE = '/meta/handshake';
    const META_CONNECT = '/meta/connect';
    const SERVICE_SUB = '/service/sub';
    const SERVICE_DATA = '/service/data';
    return () => {
        const defaultConfig = config || config_1.makeConfig();
        const isDataMessage = (message) => Array.isArray(message) && message[0].channel === SERVICE_DATA;
        const isDataSubscriptionMsg = (subscriptionMessage) => Array.isArray(subscriptionMessage) && subscriptionMessage[0].channel === SERVICE_SUB;
        const handshakeMsg = [
            {
                id: '1',
                version: '1.0',
                minimumVersion: '1.0',
                channel: '/meta/handshake',
                supportedConnectionTypes: ['websocket', 'long-polling', 'callback-polling'],
                advice: {
                    timeout: 60000,
                    interval: 0,
                },
            },
        ];
        const firstHeartbeatMsg = [
            {
                id: '2',
                channel: META_CONNECT,
                connectionType: 'websocket',
                advice: {
                    timeout: 0,
                },
            },
        ];
        const heartbeatMsg = [
            {
                id: '3',
                channel: META_CONNECT,
                connectionType: 'websocket',
            },
        ];
        return {
            connection: {
                url: defaultConfig.api.baseWsURL,
            },
            subscribe: (input) => {
                const validator = new ea_bootstrap_1.Validator(input, endpoints.price.inputParameters);
                if (validator.errored)
                    throw validator.errored;
                const ticker = validator.validated.data.base;
                return getSubscription('subscribe', ticker);
            },
            unsubscribe: (input) => {
                const validator = new ea_bootstrap_1.Validator(input, endpoints.price.inputParameters);
                if (validator.errored)
                    throw validator.errored;
                const ticker = validator.validated.data.base;
                return getSubscription('unsubscribe', ticker);
            },
            subsFromMessage: (message) => {
                switch (message[0].channel) {
                    case META_HANDSHAKE:
                        return handshakeMsg;
                    case META_CONNECT:
                        return heartbeatMsg;
                    case SERVICE_DATA:
                        return getSubscription('subscribe', message[0].data[1][0]);
                    default:
                        return null;
                }
            },
            isError: (message) => message[0].successful === false,
            filter: (message) => {
                return isDataMessage(message);
            },
            toResponse: (message) => {
                const data = message[0].data[1];
                const result = data[6];
                return ea_bootstrap_1.Requester.success('1', { data: { ...message[0], result } }, defaultConfig.verbose);
            },
            saveOnConnectToConnection: (message) => {
                return {
                    requestId: parseInt(message[0].id),
                    clientId: message[0].clientId,
                };
            },
            modifySubscriptionPayload: (original, _, connectionParams, id) => {
                original[0].clientId = connectionParams.clientId;
                original[0].id = id.toString();
                return original;
            },
            shouldModifyPayload: (payload) => payload[0].channel === META_CONNECT || payload[0].channel === SERVICE_SUB,
            shouldSaveToConnection: (message) => {
                return !!message[0].clientId;
            },
            shouldReplyToServerHeartbeat: (message) => {
                const dxFeedMsg = message;
                return Object.keys(dxFeedMsg[0]).length === 3 && dxFeedMsg[0].channel === META_CONNECT;
            },
            heartbeatReplyMessage: (message, _, connectionParams) => [
                {
                    id: parseInt(message[0].id) + 1,
                    channel: META_CONNECT,
                    connectionType: 'websocket',
                    clientId: connectionParams.clientId,
                },
            ],
            heartbeatIntervalInMS: 30000,
            shouldSaveToStore: (subscriptionMessage) => isDataSubscriptionMsg(subscriptionMessage),
            isOnConnectChainMessage: (message) => message[0].channel === META_HANDSHAKE || message[0].channel === META_CONNECT,
            isDataMessage: (message) => isDataSubscriptionMsg(message),
            onConnectChain: [
                {
                    payload: handshakeMsg,
                },
                {
                    payload: firstHeartbeatMsg,
                    filter: (message) => message[0].id == '2',
                },
                {
                    payload: heartbeatMsg,
                    filter: (message) => message[0].id === '3' ||
                        (Object.keys(message[0]).length === 3 && message[0].channel === META_CONNECT),
                    shouldNeverUnsubscribe: true,
                },
            ],
        };
    };
};
exports.makeWSHandler = makeWSHandler;
//# sourceMappingURL=data:application/json;base64,