"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExecute = exports.execute = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("./config");
const customError = (data) => data.result === 'error';
const customParams = {
    base: ['base', 'from', 'coin'],
    quote: ['quote', 'to', 'market'],
    includes: false,
    interval: false,
    sort: false,
    millisecondsAgo: false,
};
const symbolUrl = (from, to) => to.toLowerCase() === 'eth'
    ? directUrl(from, to)
    : `/spot_exchange_rate/${from.toLowerCase()}/${to.toLowerCase()}`;
const directUrl = (from, to) => `/spot_direct_exchange_rate/${from.toLowerCase()}/${to.toLowerCase()}`;
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, customParams);
    if (validator.error)
        throw validator.error;
    ea_bootstrap_1.Requester.logConfig(config);
    const jobRunID = validator.validated.id;
    // provide a reasonable interval to fetch only recent results
    function calculateStartTime(millisecondsAgo) {
        const date = new Date();
        date.setTime(date.getTime() - millisecondsAgo);
        return date;
    }
    const { url, inverse } = getOptions(validator);
    const interval = validator.validated.data.interval || config_1.DEFAULT_INTERVAL;
    const start_time = calculateStartTime(validator.validated.data.millisecondsAgo || config_1.DEFAULT_MILLISECONDS);
    const sort = validator.validated.data.sort || config_1.DEFAULT_SORT;
    const params = { interval, sort, start_time };
    const requestConfig = {
        ...config.api,
        url,
        params,
        timeout: 10000,
    };
    const response = await ea_bootstrap_1.Requester.request(requestConfig, customError);
    response.data.result = ea_bootstrap_1.Requester.validateResultNumber(
    // sometimes, the most recent(fraction of a second) data contain null price
    response.data.data.filter((x) => x.price !== null), [0, 'price'], { inverse });
    return ea_bootstrap_1.Requester.success(jobRunID, response, config.verbose);
};
exports.execute = execute;
const makeExecute = (config) => {
    return async (request, context) => exports.execute(request, context, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
const getOptions = (validator) => {
    const base = validator.overrideSymbol(config_1.NAME);
    const quote = validator.validated.data.quote;
    const includes = validator.validated.includes || [];
    const includeOptions = getIncludesOptions(validator, base, quote, includes);
    return (includeOptions ?? {
        url: symbolUrl(base, quote),
    });
};
const getIncludesOptions = (validator, from, to, includes) => {
    const include = getIncludes(validator, from, to, includes);
    if (!include)
        return undefined;
    return {
        url: directUrl(include.from, include.to),
        inverse: include.inverse,
    };
};
const getIncludes = (validator, from, to, includes) => {
    if (includes.length === 0)
        return undefined;
    const presetIncludes = validator.overrideIncludes(config_1.NAME, from, to);
    if (presetIncludes && typeof includes[0] === 'string')
        return presetIncludes;
    else if (typeof includes[0] === 'string') {
        return {
            from,
            to: includes[0],
            inverse: false,
        };
    }
    return presetIncludes;
};
//# sourceMappingURL=data:application/json;base64,