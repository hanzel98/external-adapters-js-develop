"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.NAME = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
// Should also be supported for "EOD"
exports.NAME = 'historical';
const customError = (data) => data.Response === 'Error';
const customParams = {
    base: ['base', 'from', 'coin', 'market', 'symbol'],
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, customParams);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const symbol = validator.overrideSymbol(config_1.NAME).toUpperCase();
    const url = 'historical';
    const params = {
        tickers: symbol,
        accessKey: config.apiKey,
    };
    const options = {
        ...config.api,
        params,
        url,
    };
    const response = await ea_bootstrap_1.Requester.request(options, customError);
    response.data.result = ea_bootstrap_1.Requester.validateResultNumber(response.data.result_data, [
        symbol,
        0,
        'close',
    ]);
    response.data.cost = 10;
    return ea_bootstrap_1.Requester.success(jobRunID, response, config.verbose);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlzdG9yaWNhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbmRwb2ludC9oaXN0b3JpY2FsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUE4RDtBQUU5RCxzQ0FBK0M7QUFFL0MscUNBQXFDO0FBQ3hCLFFBQUEsSUFBSSxHQUFHLFlBQVksQ0FBQTtBQXlCaEMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxJQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFBO0FBRTVELE1BQU0sWUFBWSxHQUFHO0lBQ25CLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUM7Q0FDbkQsQ0FBQTtBQUVNLE1BQU0sT0FBTyxHQUE4QixLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRTtJQUM3RSxNQUFNLFNBQVMsR0FBRyxJQUFJLHdCQUFTLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFBO0lBQ3RELElBQUksU0FBUyxDQUFDLEtBQUs7UUFBRSxNQUFNLFNBQVMsQ0FBQyxLQUFLLENBQUE7SUFFMUMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUE7SUFDdkMsTUFBTSxNQUFNLEdBQUksU0FBUyxDQUFDLGNBQWMsQ0FBQyxhQUFXLENBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUU5RSxNQUFNLEdBQUcsR0FBRyxZQUFZLENBQUE7SUFDeEIsTUFBTSxNQUFNLEdBQUc7UUFDYixPQUFPLEVBQUUsTUFBTTtRQUNmLFNBQVMsRUFBRSxNQUFNLENBQUMsTUFBTTtLQUN6QixDQUFBO0lBRUQsTUFBTSxPQUFPLEdBQUc7UUFDZCxHQUFHLE1BQU0sQ0FBQyxHQUFHO1FBQ2IsTUFBTTtRQUNOLEdBQUc7S0FDSixDQUFBO0lBRUQsTUFBTSxRQUFRLEdBQUcsTUFBTSx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUE7SUFDOUQsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsd0JBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtRQUMvRSxNQUFNO1FBQ04sQ0FBQztRQUNELE9BQU87S0FDUixDQUFDLENBQUE7SUFDRixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUE7SUFFdkIsT0FBTyx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUM5RCxDQUFDLENBQUE7QUE1QlksUUFBQSxPQUFPLFdBNEJuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3RlciwgVmFsaWRhdG9yIH0gZnJvbSAnQGNoYWlubGluay9lYS1ib290c3RyYXAnXG5pbXBvcnQgeyBFeGVjdXRlV2l0aENvbmZpZywgQ29uZmlnIH0gZnJvbSAnQGNoYWlubGluay90eXBlcydcbmltcG9ydCB7IE5BTUUgYXMgQWRhcHRlck5hbWUgfSBmcm9tICcuLi9jb25maWcnXG5cbi8vIFNob3VsZCBhbHNvIGJlIHN1cHBvcnRlZCBmb3IgXCJFT0RcIlxuZXhwb3J0IGNvbnN0IE5BTUUgPSAnaGlzdG9yaWNhbCdcblxuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZVNjaGVtYSB7XG4gIG1ldGFfZGF0YToge1xuICAgIGFwaV9uYW1lOiBzdHJpbmdcbiAgICBudW1fdG90YWxfZGF0YV9wb2ludHM6IG51bWJlclxuICAgIGNyZWRpdF9jb3N0OiBudW1iZXJcbiAgICBzdGFydF9kYXRlOiBzdHJpbmdcbiAgICBlbmRfZGF0ZTogc3RyaW5nXG4gIH1cbiAgcmVzdWx0X2RhdGE6IHtcbiAgICBbdGlja2VyOiBzdHJpbmddOiBbXG4gICAgICB7XG4gICAgICAgIGRhdGU6IHN0cmluZ1xuICAgICAgICB2b2x1bWU6IG51bWJlclxuICAgICAgICBoaWdoOiBudW1iZXJcbiAgICAgICAgbG93OiBudW1iZXJcbiAgICAgICAgYWRqX2Nsb3NlOiBudW1iZXJcbiAgICAgICAgY2xvc2U6IG51bWJlclxuICAgICAgICBvcGVuOiBudW1iZXJcbiAgICAgIH0sXG4gICAgXVxuICB9XG59XG5cbmNvbnN0IGN1c3RvbUVycm9yID0gKGRhdGE6IGFueSkgPT4gZGF0YS5SZXNwb25zZSA9PT0gJ0Vycm9yJ1xuXG5jb25zdCBjdXN0b21QYXJhbXMgPSB7XG4gIGJhc2U6IFsnYmFzZScsICdmcm9tJywgJ2NvaW4nLCAnbWFya2V0JywgJ3N5bWJvbCddLFxufVxuXG5leHBvcnQgY29uc3QgZXhlY3V0ZTogRXhlY3V0ZVdpdGhDb25maWc8Q29uZmlnPiA9IGFzeW5jIChyZXF1ZXN0LCBfLCBjb25maWcpID0+IHtcbiAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihyZXF1ZXN0LCBjdXN0b21QYXJhbXMpXG4gIGlmICh2YWxpZGF0b3IuZXJyb3IpIHRocm93IHZhbGlkYXRvci5lcnJvclxuXG4gIGNvbnN0IGpvYlJ1bklEID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5pZFxuICBjb25zdCBzeW1ib2wgPSAodmFsaWRhdG9yLm92ZXJyaWRlU3ltYm9sKEFkYXB0ZXJOYW1lKSBhcyBzdHJpbmcpLnRvVXBwZXJDYXNlKClcblxuICBjb25zdCB1cmwgPSAnaGlzdG9yaWNhbCdcbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIHRpY2tlcnM6IHN5bWJvbCxcbiAgICBhY2Nlc3NLZXk6IGNvbmZpZy5hcGlLZXksXG4gIH1cblxuICBjb25zdCBvcHRpb25zID0ge1xuICAgIC4uLmNvbmZpZy5hcGksXG4gICAgcGFyYW1zLFxuICAgIHVybCxcbiAgfVxuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgUmVxdWVzdGVyLnJlcXVlc3Qob3B0aW9ucywgY3VzdG9tRXJyb3IpXG4gIHJlc3BvbnNlLmRhdGEucmVzdWx0ID0gUmVxdWVzdGVyLnZhbGlkYXRlUmVzdWx0TnVtYmVyKHJlc3BvbnNlLmRhdGEucmVzdWx0X2RhdGEsIFtcbiAgICBzeW1ib2wsXG4gICAgMCxcbiAgICAnY2xvc2UnLFxuICBdKVxuICByZXNwb25zZS5kYXRhLmNvc3QgPSAxMFxuXG4gIHJldHVybiBSZXF1ZXN0ZXIuc3VjY2Vzcyhqb2JSdW5JRCwgcmVzcG9uc2UsIGNvbmZpZy52ZXJib3NlKVxufVxuIl19