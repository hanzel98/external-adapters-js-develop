"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.NAME = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
exports.NAME = 'price';
const customError = (data) => data.length < 1;
const customParams = {
    base: ['base', 'from', 'coin'],
    quote: ['quote', 'to', 'market'],
    endpoint: false,
};
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, customParams);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const endpoint = validator.validated.data.endpoint || config_1.DEFAULT_DATA_ENDPOINT;
    const url = `/api/${endpoint}`;
    const base = validator.validated.data.base.toUpperCase();
    const quote = validator.validated.data.quote.toUpperCase();
    const symbol = `${base}_${quote}`;
    const params = {
        symbol,
    };
    const options = {
        ...config.api,
        url,
        params,
    };
    const response = await ea_bootstrap_1.Requester.request(options, customError);
    // Replace array by the first object in array
    // to avoid unexpected behavior when returning arrays.
    response.data = response.data[0];
    const lastUpdate = response.data.closeTime;
    const curTime = new Date();
    // If data is older than 10 minutes, discard it
    if (lastUpdate < curTime.setMinutes(curTime.getMinutes() - 10))
        throw new ea_bootstrap_1.AdapterError({
            jobRunID,
            message: `Data is too old`,
            statusCode: 500,
        });
    response.data.result = ea_bootstrap_1.Requester.validateResultNumber(response.data, ['lastPrice']);
    return ea_bootstrap_1.Requester.success(jobRunID, response, config.verbose);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZW5kcG9pbnQvcHJpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQTRFO0FBRTVFLHNDQUFpRDtBQUVwQyxRQUFBLElBQUksR0FBRyxPQUFPLENBQUE7QUFFM0IsTUFBTSxXQUFXLEdBQUcsQ0FBQyxJQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFBO0FBRWxELE1BQU0sWUFBWSxHQUFHO0lBQ25CLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDO0lBQzlCLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDO0lBQ2hDLFFBQVEsRUFBRSxLQUFLO0NBQ2hCLENBQUE7QUFFTSxNQUFNLE9BQU8sR0FBOEIsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUU7SUFDN0UsTUFBTSxTQUFTLEdBQUcsSUFBSSx3QkFBUyxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQTtJQUN0RCxJQUFJLFNBQVMsQ0FBQyxLQUFLO1FBQUUsTUFBTSxTQUFTLENBQUMsS0FBSyxDQUFBO0lBRTFDLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFBO0lBQ3ZDLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSw4QkFBcUIsQ0FBQTtJQUMzRSxNQUFNLEdBQUcsR0FBRyxRQUFRLFFBQVEsRUFBRSxDQUFBO0lBQzlCLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUN4RCxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUE7SUFDMUQsTUFBTSxNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksS0FBSyxFQUFFLENBQUE7SUFFakMsTUFBTSxNQUFNLEdBQUc7UUFDYixNQUFNO0tBQ1AsQ0FBQTtJQUVELE1BQU0sT0FBTyxHQUFHO1FBQ2QsR0FBRyxNQUFNLENBQUMsR0FBRztRQUNiLEdBQUc7UUFDSCxNQUFNO0tBQ1AsQ0FBQTtJQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sd0JBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFBO0lBRTlELDZDQUE2QztJQUM3QyxzREFBc0Q7SUFDdEQsUUFBUSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRWhDLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFBO0lBQzFDLE1BQU0sT0FBTyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUE7SUFDMUIsK0NBQStDO0lBQy9DLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUM1RCxNQUFNLElBQUksMkJBQVksQ0FBQztZQUNyQixRQUFRO1lBQ1IsT0FBTyxFQUFFLGlCQUFpQjtZQUMxQixVQUFVLEVBQUUsR0FBRztTQUNoQixDQUFDLENBQUE7SUFFSixRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyx3QkFBUyxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFBO0lBRW5GLE9BQU8sd0JBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUE7QUFDOUQsQ0FBQyxDQUFBO0FBeENZLFFBQUEsT0FBTyxXQXdDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0ZXIsIFZhbGlkYXRvciwgQWRhcHRlckVycm9yIH0gZnJvbSAnQGNoYWlubGluay9lYS1ib290c3RyYXAnXG5pbXBvcnQgeyBFeGVjdXRlV2l0aENvbmZpZywgQ29uZmlnIH0gZnJvbSAnQGNoYWlubGluay90eXBlcydcbmltcG9ydCB7IERFRkFVTFRfREFUQV9FTkRQT0lOVCB9IGZyb20gJy4uL2NvbmZpZydcblxuZXhwb3J0IGNvbnN0IE5BTUUgPSAncHJpY2UnXG5cbmNvbnN0IGN1c3RvbUVycm9yID0gKGRhdGE6IGFueSkgPT4gZGF0YS5sZW5ndGggPCAxXG5cbmNvbnN0IGN1c3RvbVBhcmFtcyA9IHtcbiAgYmFzZTogWydiYXNlJywgJ2Zyb20nLCAnY29pbiddLFxuICBxdW90ZTogWydxdW90ZScsICd0bycsICdtYXJrZXQnXSxcbiAgZW5kcG9pbnQ6IGZhbHNlLFxufVxuXG5leHBvcnQgY29uc3QgZXhlY3V0ZTogRXhlY3V0ZVdpdGhDb25maWc8Q29uZmlnPiA9IGFzeW5jIChyZXF1ZXN0LCBfLCBjb25maWcpID0+IHtcbiAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihyZXF1ZXN0LCBjdXN0b21QYXJhbXMpXG4gIGlmICh2YWxpZGF0b3IuZXJyb3IpIHRocm93IHZhbGlkYXRvci5lcnJvclxuXG4gIGNvbnN0IGpvYlJ1bklEID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5pZFxuICBjb25zdCBlbmRwb2ludCA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5lbmRwb2ludCB8fCBERUZBVUxUX0RBVEFfRU5EUE9JTlRcbiAgY29uc3QgdXJsID0gYC9hcGkvJHtlbmRwb2ludH1gXG4gIGNvbnN0IGJhc2UgPSB2YWxpZGF0b3IudmFsaWRhdGVkLmRhdGEuYmFzZS50b1VwcGVyQ2FzZSgpXG4gIGNvbnN0IHF1b3RlID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLnF1b3RlLnRvVXBwZXJDYXNlKClcbiAgY29uc3Qgc3ltYm9sID0gYCR7YmFzZX1fJHtxdW90ZX1gXG5cbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIHN5bWJvbCxcbiAgfVxuXG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgLi4uY29uZmlnLmFwaSxcbiAgICB1cmwsXG4gICAgcGFyYW1zLFxuICB9XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBSZXF1ZXN0ZXIucmVxdWVzdChvcHRpb25zLCBjdXN0b21FcnJvcilcblxuICAvLyBSZXBsYWNlIGFycmF5IGJ5IHRoZSBmaXJzdCBvYmplY3QgaW4gYXJyYXlcbiAgLy8gdG8gYXZvaWQgdW5leHBlY3RlZCBiZWhhdmlvciB3aGVuIHJldHVybmluZyBhcnJheXMuXG4gIHJlc3BvbnNlLmRhdGEgPSByZXNwb25zZS5kYXRhWzBdXG5cbiAgY29uc3QgbGFzdFVwZGF0ZSA9IHJlc3BvbnNlLmRhdGEuY2xvc2VUaW1lXG4gIGNvbnN0IGN1clRpbWUgPSBuZXcgRGF0ZSgpXG4gIC8vIElmIGRhdGEgaXMgb2xkZXIgdGhhbiAxMCBtaW51dGVzLCBkaXNjYXJkIGl0XG4gIGlmIChsYXN0VXBkYXRlIDwgY3VyVGltZS5zZXRNaW51dGVzKGN1clRpbWUuZ2V0TWludXRlcygpIC0gMTApKVxuICAgIHRocm93IG5ldyBBZGFwdGVyRXJyb3Ioe1xuICAgICAgam9iUnVuSUQsXG4gICAgICBtZXNzYWdlOiBgRGF0YSBpcyB0b28gb2xkYCxcbiAgICAgIHN0YXR1c0NvZGU6IDUwMCxcbiAgICB9KVxuXG4gIHJlc3BvbnNlLmRhdGEucmVzdWx0ID0gUmVxdWVzdGVyLnZhbGlkYXRlUmVzdWx0TnVtYmVyKHJlc3BvbnNlLmRhdGEsIFsnbGFzdFByaWNlJ10pXG5cbiAgcmV0dXJuIFJlcXVlc3Rlci5zdWNjZXNzKGpvYlJ1bklELCByZXNwb25zZSwgY29uZmlnLnZlcmJvc2UpXG59XG4iXX0=