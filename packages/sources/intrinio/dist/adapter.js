"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeWSHandler = exports.makeExecute = exports.execute = exports.customParams = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const util_1 = require("./util");
const config_1 = require("./config");
exports.customParams = {
    base: ['base', 'from', 'asset'],
};
const execute = async (input, config) => {
    const validator = new ea_bootstrap_1.Validator(input, exports.customParams);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const symbol = validator.validated.data.base.toUpperCase();
    const url = `securities/${symbol}/prices/realtime`;
    const params = {
        api_key: config.apiKey,
    };
    const request = {
        ...config.api,
        url,
        params,
    };
    const response = await ea_bootstrap_1.Requester.request(request);
    response.data.result = ea_bootstrap_1.Requester.validateResultNumber(response.data, ['last_price']);
    return ea_bootstrap_1.Requester.success(jobRunID, response);
};
exports.execute = execute;
const makeExecute = (config) => {
    return async (request) => exports.execute(request, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
const makeWSHandler = (config) => {
    // https://github.com/intrinio/intrinio-realtime-node-sdk
    const getBase = (input) => {
        const validator = new ea_bootstrap_1.Validator(input, exports.customParams, {}, false);
        if (validator.error) {
            return '';
        }
        return validator.overrideSymbol(config_1.NAME).toUpperCase();
    };
    return async () => {
        const defaultConfig = config || config_1.makeConfig();
        const ws = new util_1.IntrinioRealtime({
            api_key: defaultConfig.apiKey,
            provider: 'iex',
        });
        return {
            connection: {
                getUrl: ws._makeSocketUrl.bind(ws),
            },
            subscribe: (input) => ws._makeJoinMessage(getBase(input)),
            unsubscribe: (input) => ws._makeLeaveMessage(getBase(input)),
            subsFromMessage: (message) => ws._makeJoinMessage(message.payload.ticker),
            isError: (message) => Number(message.TYPE) > 400 && Number(message.TYPE) < 900,
            filter: (message) => message.event == 'quote' && message.payload?.type == 'last',
            toResponse: (wsResponse) => ea_bootstrap_1.Requester.success(undefined, { data: { result: wsResponse?.payload?.price } }),
            heartbeatIntervalInMS: 3000,
            heartbeatMessage: () => ws._makeHeartbeatMessage(),
        };
    };
};
exports.makeWSHandler = makeWSHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUE4RDtBQUU5RCxpQ0FBeUM7QUFDekMscUNBQTJDO0FBRTlCLFFBQUEsWUFBWSxHQUFHO0lBQzFCLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDO0NBQ2hDLENBQUE7QUFFTSxNQUFNLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBcUIsRUFBRSxNQUFjLEVBQUUsRUFBRTtJQUNyRSxNQUFNLFNBQVMsR0FBRyxJQUFJLHdCQUFTLENBQUMsS0FBSyxFQUFFLG9CQUFZLENBQUMsQ0FBQTtJQUNwRCxJQUFJLFNBQVMsQ0FBQyxLQUFLO1FBQUUsTUFBTSxTQUFTLENBQUMsS0FBSyxDQUFBO0lBRTFDLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFBO0lBQ3ZDLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUUxRCxNQUFNLEdBQUcsR0FBRyxjQUFjLE1BQU0sa0JBQWtCLENBQUE7SUFDbEQsTUFBTSxNQUFNLEdBQUc7UUFDYixPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU07S0FDdkIsQ0FBQTtJQUVELE1BQU0sT0FBTyxHQUFHO1FBQ2QsR0FBRyxNQUFNLENBQUMsR0FBRztRQUNiLEdBQUc7UUFDSCxNQUFNO0tBQ1AsQ0FBQTtJQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sd0JBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDakQsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsd0JBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQTtJQUVwRixPQUFPLHdCQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQTtBQUM5QyxDQUFDLENBQUE7QUF0QlksUUFBQSxPQUFPLFdBc0JuQjtBQUVNLE1BQU0sV0FBVyxHQUFHLENBQUMsTUFBZSxFQUFFLEVBQUU7SUFDN0MsT0FBTyxLQUFLLEVBQUUsT0FBdUIsRUFBRSxFQUFFLENBQUMsZUFBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLElBQUksbUJBQVUsRUFBRSxDQUFDLENBQUE7QUFDcEYsQ0FBQyxDQUFBO0FBRlksUUFBQSxXQUFXLGVBRXZCO0FBRU0sTUFBTSxhQUFhLEdBQUcsQ0FBQyxNQUFlLEVBQWlCLEVBQUU7SUFDOUQseURBQXlEO0lBRXpELE1BQU0sT0FBTyxHQUFHLENBQUMsS0FBcUIsRUFBVSxFQUFFO1FBQ2hELE1BQU0sU0FBUyxHQUFHLElBQUksd0JBQVMsQ0FBQyxLQUFLLEVBQUUsb0JBQVksRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDL0QsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFO1lBQ25CLE9BQU8sRUFBRSxDQUFBO1NBQ1Y7UUFDRCxPQUFRLFNBQVMsQ0FBQyxjQUFjLENBQUMsYUFBSSxDQUFZLENBQUMsV0FBVyxFQUFFLENBQUE7SUFDakUsQ0FBQyxDQUFBO0lBRUQsT0FBTyxLQUFLLElBQUksRUFBRTtRQUNoQixNQUFNLGFBQWEsR0FBRyxNQUFNLElBQUksbUJBQVUsRUFBRSxDQUFBO1FBQzVDLE1BQU0sRUFBRSxHQUFHLElBQUksdUJBQWdCLENBQUM7WUFDOUIsT0FBTyxFQUFFLGFBQWEsQ0FBQyxNQUFNO1lBQzdCLFFBQVEsRUFBRSxLQUFLO1NBQ2hCLENBQUMsQ0FBQTtRQUNGLE9BQU87WUFDTCxVQUFVLEVBQUU7Z0JBQ1YsTUFBTSxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQzthQUNuQztZQUNELFNBQVMsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN6RCxXQUFXLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUQsZUFBZSxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDekUsT0FBTyxFQUFFLENBQUMsT0FBWSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUc7WUFDbkYsTUFBTSxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFLElBQUksSUFBSSxNQUFNO1lBQ2hGLFVBQVUsRUFBRSxDQUFDLFVBQWUsRUFBbUIsRUFBRSxDQUMvQyx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDO1lBQ2hGLHFCQUFxQixFQUFFLElBQUk7WUFDM0IsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLHFCQUFxQixFQUFFO1NBQ25ELENBQUE7SUFDSCxDQUFDLENBQUE7QUFDSCxDQUFDLENBQUE7QUFoQ1ksUUFBQSxhQUFhLGlCQWdDekIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0ZXIsIFZhbGlkYXRvciB9IGZyb20gJ0BjaGFpbmxpbmsvZWEtYm9vdHN0cmFwJ1xuaW1wb3J0IHsgQWRhcHRlclJlcXVlc3QsIEFkYXB0ZXJSZXNwb25zZSwgQ29uZmlnLCBNYWtlV1NIYW5kbGVyIH0gZnJvbSAnQGNoYWlubGluay90eXBlcydcbmltcG9ydCB7IEludHJpbmlvUmVhbHRpbWUgfSBmcm9tICcuL3V0aWwnXG5pbXBvcnQgeyBtYWtlQ29uZmlnLCBOQU1FIH0gZnJvbSAnLi9jb25maWcnXG5cbmV4cG9ydCBjb25zdCBjdXN0b21QYXJhbXMgPSB7XG4gIGJhc2U6IFsnYmFzZScsICdmcm9tJywgJ2Fzc2V0J10sXG59XG5cbmV4cG9ydCBjb25zdCBleGVjdXRlID0gYXN5bmMgKGlucHV0OiBBZGFwdGVyUmVxdWVzdCwgY29uZmlnOiBDb25maWcpID0+IHtcbiAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihpbnB1dCwgY3VzdG9tUGFyYW1zKVxuICBpZiAodmFsaWRhdG9yLmVycm9yKSB0aHJvdyB2YWxpZGF0b3IuZXJyb3JcblxuICBjb25zdCBqb2JSdW5JRCA9IHZhbGlkYXRvci52YWxpZGF0ZWQuaWRcbiAgY29uc3Qgc3ltYm9sID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLmJhc2UudG9VcHBlckNhc2UoKVxuXG4gIGNvbnN0IHVybCA9IGBzZWN1cml0aWVzLyR7c3ltYm9sfS9wcmljZXMvcmVhbHRpbWVgXG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBhcGlfa2V5OiBjb25maWcuYXBpS2V5LFxuICB9XG5cbiAgY29uc3QgcmVxdWVzdCA9IHtcbiAgICAuLi5jb25maWcuYXBpLFxuICAgIHVybCxcbiAgICBwYXJhbXMsXG4gIH1cblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IFJlcXVlc3Rlci5yZXF1ZXN0KHJlcXVlc3QpXG4gIHJlc3BvbnNlLmRhdGEucmVzdWx0ID0gUmVxdWVzdGVyLnZhbGlkYXRlUmVzdWx0TnVtYmVyKHJlc3BvbnNlLmRhdGEsIFsnbGFzdF9wcmljZSddKVxuXG4gIHJldHVybiBSZXF1ZXN0ZXIuc3VjY2Vzcyhqb2JSdW5JRCwgcmVzcG9uc2UpXG59XG5cbmV4cG9ydCBjb25zdCBtYWtlRXhlY3V0ZSA9IChjb25maWc/OiBDb25maWcpID0+IHtcbiAgcmV0dXJuIGFzeW5jIChyZXF1ZXN0OiBBZGFwdGVyUmVxdWVzdCkgPT4gZXhlY3V0ZShyZXF1ZXN0LCBjb25maWcgfHwgbWFrZUNvbmZpZygpKVxufVxuXG5leHBvcnQgY29uc3QgbWFrZVdTSGFuZGxlciA9IChjb25maWc/OiBDb25maWcpOiBNYWtlV1NIYW5kbGVyID0+IHtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ludHJpbmlvL2ludHJpbmlvLXJlYWx0aW1lLW5vZGUtc2RrXG5cbiAgY29uc3QgZ2V0QmFzZSA9IChpbnB1dDogQWRhcHRlclJlcXVlc3QpOiBzdHJpbmcgPT4ge1xuICAgIGNvbnN0IHZhbGlkYXRvciA9IG5ldyBWYWxpZGF0b3IoaW5wdXQsIGN1c3RvbVBhcmFtcywge30sIGZhbHNlKVxuICAgIGlmICh2YWxpZGF0b3IuZXJyb3IpIHtcbiAgICAgIHJldHVybiAnJ1xuICAgIH1cbiAgICByZXR1cm4gKHZhbGlkYXRvci5vdmVycmlkZVN5bWJvbChOQU1FKSBhcyBzdHJpbmcpLnRvVXBwZXJDYXNlKClcbiAgfVxuXG4gIHJldHVybiBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZGVmYXVsdENvbmZpZyA9IGNvbmZpZyB8fCBtYWtlQ29uZmlnKClcbiAgICBjb25zdCB3cyA9IG5ldyBJbnRyaW5pb1JlYWx0aW1lKHtcbiAgICAgIGFwaV9rZXk6IGRlZmF1bHRDb25maWcuYXBpS2V5LFxuICAgICAgcHJvdmlkZXI6ICdpZXgnLFxuICAgIH0pXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbm5lY3Rpb246IHtcbiAgICAgICAgZ2V0VXJsOiB3cy5fbWFrZVNvY2tldFVybC5iaW5kKHdzKSxcbiAgICAgIH0sXG4gICAgICBzdWJzY3JpYmU6IChpbnB1dCkgPT4gd3MuX21ha2VKb2luTWVzc2FnZShnZXRCYXNlKGlucHV0KSksXG4gICAgICB1bnN1YnNjcmliZTogKGlucHV0KSA9PiB3cy5fbWFrZUxlYXZlTWVzc2FnZShnZXRCYXNlKGlucHV0KSksXG4gICAgICBzdWJzRnJvbU1lc3NhZ2U6IChtZXNzYWdlKSA9PiB3cy5fbWFrZUpvaW5NZXNzYWdlKG1lc3NhZ2UucGF5bG9hZC50aWNrZXIpLFxuICAgICAgaXNFcnJvcjogKG1lc3NhZ2U6IGFueSkgPT4gTnVtYmVyKG1lc3NhZ2UuVFlQRSkgPiA0MDAgJiYgTnVtYmVyKG1lc3NhZ2UuVFlQRSkgPCA5MDAsXG4gICAgICBmaWx0ZXI6IChtZXNzYWdlKSA9PiBtZXNzYWdlLmV2ZW50ID09ICdxdW90ZScgJiYgbWVzc2FnZS5wYXlsb2FkPy50eXBlID09ICdsYXN0JyxcbiAgICAgIHRvUmVzcG9uc2U6ICh3c1Jlc3BvbnNlOiBhbnkpOiBBZGFwdGVyUmVzcG9uc2UgPT5cbiAgICAgICAgUmVxdWVzdGVyLnN1Y2Nlc3ModW5kZWZpbmVkLCB7IGRhdGE6IHsgcmVzdWx0OiB3c1Jlc3BvbnNlPy5wYXlsb2FkPy5wcmljZSB9IH0pLFxuICAgICAgaGVhcnRiZWF0SW50ZXJ2YWxJbk1TOiAzMDAwLCAvLyBTYW1lIGFzIHRoZSBvbmUgZnJvbSB0aGUgSW50cmluaW8gV1MgU0RLXG4gICAgICBoZWFydGJlYXRNZXNzYWdlOiAoKSA9PiB3cy5fbWFrZUhlYXJ0YmVhdE1lc3NhZ2UoKSxcbiAgICB9XG4gIH1cbn1cbiJdfQ==