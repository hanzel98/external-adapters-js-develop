"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeWSHandler = exports.makeExecute = exports.endpointSelector = exports.execute = void 0;
const tslib_1 = require("tslib");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("./config");
const endpoints = tslib_1.__importStar(require("./endpoint"));
const execute = async (request, context, config) => {
    return ea_bootstrap_1.Builder.buildSelector(request, context, config, endpoints);
};
exports.execute = execute;
const endpointSelector = (request) => ea_bootstrap_1.Builder.selectEndpoint(request, config_1.makeConfig(), endpoints);
exports.endpointSelector = endpointSelector;
const makeExecute = (config) => {
    return async (request, context) => exports.execute(request, context, config || config_1.makeConfig());
};
exports.makeExecute = makeExecute;
const customParams = {
    base: ['base', 'from', 'coin', 'ticker'],
};
const makeWSHandler = (config) => {
    const getSubscription = (ticker, subscribe = true) => {
        const defaultConfig = config || config_1.makeConfig();
        if (!ticker)
            return;
        return {
            eventName: subscribe ? 'subscribe' : 'unsubscribe',
            authorization: defaultConfig?.apiKey,
            eventData: {
                thresholdLevel: 5,
                tickers: [ticker],
            },
        };
    };
    const getTicker = (input) => {
        const validator = new ea_bootstrap_1.Validator(input, customParams, {}, false);
        if (validator.error)
            return;
        const base = validator.validated.data.base.toLowerCase();
        return base;
    };
    return () => {
        const defaultConfig = config || config_1.makeConfig();
        return {
            connection: {
                url: defaultConfig.api.baseWsURL || config_1.DEFAULT_WS_API_ENDPOINT,
            },
            shouldNotServeInputUsingWS: (input) => endpoints.iex.supportedEndpoints.indexOf(input.data.endpoint) === -1,
            subscribe: (input) => getSubscription(getTicker(input)),
            unsubscribe: (input) => getSubscription(getTicker(input), false),
            isError: (message) => message.messageType === 'E',
            filter: (message) => message.messageType === 'A',
            subsFromMessage: (message) => message.data && getSubscription(message.data[1]),
            toResponse: (message) => {
                const result = ea_bootstrap_1.Requester.validateResultNumber(message.data, [5]);
                return ea_bootstrap_1.Requester.success('1', { data: { result } }, true);
            },
        };
    };
};
exports.makeWSHandler = makeWSHandler;
//# sourceMappingURL=data:application/json;base64,