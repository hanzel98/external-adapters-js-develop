"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.endpointResultPaths = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../../config");
exports.supportedEndpoints = ['prices', 'crypto', 'volume'];
exports.endpointResultPaths = {
    prices: 'fxClose',
    crypto: 'fxClose',
    volume: 'volumeNotional',
};
exports.inputParameters = {
    base: ['base', 'from', 'coin'],
    quote: ['quote', 'to', 'market'],
    resultPath: false,
};
// When an invalid symbol is given the response body is empty
const customError = (data) => !data.length;
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const base = validator.overrideSymbol(config_1.NAME);
    const quote = validator.validated.data.quote.toLowerCase();
    const resultPath = validator.validated.data.resultPath;
    const url = '/tiingo/crypto/prices';
    const options = {
        ...config.api,
        params: {
            token: config.apiKey,
            baseCurrency: base,
            convertCurrency: quote,
            consolidateBaseCurrency: true,
            resampleFreq: '24hour',
        },
        url,
    };
    const response = await ea_bootstrap_1.Requester.request(options, customError);
    response.data.result = ea_bootstrap_1.Requester.validateResultNumber(response.data, [
        0,
        'priceData',
        0,
        resultPath,
    ]);
    return ea_bootstrap_1.Requester.success(jobRunID, response, config.verbose);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpY2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2VuZHBvaW50L2NyeXB0by9wcmljZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQThEO0FBRTlELHlDQUFrRDtBQUVyQyxRQUFBLGtCQUFrQixHQUFHLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQTtBQUVuRCxRQUFBLG1CQUFtQixHQUFHO0lBQ2pDLE1BQU0sRUFBRSxTQUFTO0lBQ2pCLE1BQU0sRUFBRSxTQUFTO0lBQ2pCLE1BQU0sRUFBRSxnQkFBZ0I7Q0FDekIsQ0FBQTtBQXdCWSxRQUFBLGVBQWUsR0FBb0I7SUFDOUMsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUM7SUFDOUIsS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUM7SUFDaEMsVUFBVSxFQUFFLEtBQUs7Q0FDbEIsQ0FBQTtBQUVELDZEQUE2RDtBQUM3RCxNQUFNLFdBQVcsR0FBRyxDQUFDLElBQXNCLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQTtBQUVyRCxNQUFNLE9BQU8sR0FBOEIsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUU7SUFDN0UsTUFBTSxTQUFTLEdBQUcsSUFBSSx3QkFBUyxDQUFDLE9BQU8sRUFBRSx1QkFBZSxDQUFDLENBQUE7SUFDekQsSUFBSSxTQUFTLENBQUMsS0FBSztRQUFFLE1BQU0sU0FBUyxDQUFDLEtBQUssQ0FBQTtJQUUxQyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQTtJQUN2QyxNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsY0FBYyxDQUFDLGFBQVcsQ0FBQyxDQUFBO0lBQ2xELE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUMxRCxNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUE7SUFDdEQsTUFBTSxHQUFHLEdBQUcsdUJBQXVCLENBQUE7SUFFbkMsTUFBTSxPQUFPLEdBQUc7UUFDZCxHQUFHLE1BQU0sQ0FBQyxHQUFHO1FBQ2IsTUFBTSxFQUFFO1lBQ04sS0FBSyxFQUFFLE1BQU0sQ0FBQyxNQUFNO1lBQ3BCLFlBQVksRUFBRSxJQUFJO1lBQ2xCLGVBQWUsRUFBRSxLQUFLO1lBQ3RCLHVCQUF1QixFQUFFLElBQUk7WUFDN0IsWUFBWSxFQUFFLFFBQVE7U0FDdkI7UUFDRCxHQUFHO0tBQ0osQ0FBQTtJQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sd0JBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFBO0lBQzlELFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLHdCQUFTLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLElBQXdCLEVBQUU7UUFDdkYsQ0FBQztRQUNELFdBQVc7UUFDWCxDQUFDO1FBQ0QsVUFBVTtLQUNYLENBQUMsQ0FBQTtJQUVGLE9BQU8sd0JBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUE7QUFDOUQsQ0FBQyxDQUFBO0FBL0JZLFFBQUEsT0FBTyxXQStCbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0ZXIsIFZhbGlkYXRvciB9IGZyb20gJ0BjaGFpbmxpbmsvZWEtYm9vdHN0cmFwJ1xuaW1wb3J0IHsgRXhlY3V0ZVdpdGhDb25maWcsIENvbmZpZywgSW5wdXRQYXJhbWV0ZXJzIH0gZnJvbSAnQGNoYWlubGluay90eXBlcydcbmltcG9ydCB7IE5BTUUgYXMgQWRhcHRlck5hbWUgfSBmcm9tICcuLi8uLi9jb25maWcnXG5cbmV4cG9ydCBjb25zdCBzdXBwb3J0ZWRFbmRwb2ludHMgPSBbJ3ByaWNlcycsICdjcnlwdG8nLCAndm9sdW1lJ11cblxuZXhwb3J0IGNvbnN0IGVuZHBvaW50UmVzdWx0UGF0aHMgPSB7XG4gIHByaWNlczogJ2Z4Q2xvc2UnLFxuICBjcnlwdG86ICdmeENsb3NlJyxcbiAgdm9sdW1lOiAndm9sdW1lTm90aW9uYWwnLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlU2NoZW1hIHtcbiAgdGlja2VyOiBzdHJpbmdcbiAgYmFzZUN1cnJlbmN5OiBzdHJpbmdcbiAgcXVvdGVDdXJyZW5jeTogc3RyaW5nXG4gIHByaWNlRGF0YToge1xuICAgIGRhdGU6IHN0cmluZ1xuICAgIG9wZW46IG51bWJlclxuICAgIGhpZ2g6IG51bWJlclxuICAgIGxvdzogbnVtYmVyXG4gICAgY2xvc2U6IG51bWJlclxuICAgIHZvbHVtZTogbnVtYmVyXG4gICAgdm9sdW1lTm90aW9uYWw6IG51bWJlclxuICAgIGZ4T3BlbjogbnVtYmVyXG4gICAgZnhIaWdoOiBudW1iZXJcbiAgICBmeExvdzogbnVtYmVyXG4gICAgZnhDbG9zZTogbnVtYmVyXG4gICAgZnhWb2x1bWVOb3Rpb25hbDogbnVtYmVyXG4gICAgZnhSYXRlOiBudW1iZXJcbiAgICB0cmFkZXNEb25lOiBudW1iZXJcbiAgfVtdXG59XG5cbmV4cG9ydCBjb25zdCBpbnB1dFBhcmFtZXRlcnM6IElucHV0UGFyYW1ldGVycyA9IHtcbiAgYmFzZTogWydiYXNlJywgJ2Zyb20nLCAnY29pbiddLFxuICBxdW90ZTogWydxdW90ZScsICd0bycsICdtYXJrZXQnXSxcbiAgcmVzdWx0UGF0aDogZmFsc2UsXG59XG5cbi8vIFdoZW4gYW4gaW52YWxpZCBzeW1ib2wgaXMgZ2l2ZW4gdGhlIHJlc3BvbnNlIGJvZHkgaXMgZW1wdHlcbmNvbnN0IGN1c3RvbUVycm9yID0gKGRhdGE6IFJlc3BvbnNlU2NoZW1hW10pID0+ICFkYXRhLmxlbmd0aFxuXG5leHBvcnQgY29uc3QgZXhlY3V0ZTogRXhlY3V0ZVdpdGhDb25maWc8Q29uZmlnPiA9IGFzeW5jIChyZXF1ZXN0LCBfLCBjb25maWcpID0+IHtcbiAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcihyZXF1ZXN0LCBpbnB1dFBhcmFtZXRlcnMpXG4gIGlmICh2YWxpZGF0b3IuZXJyb3IpIHRocm93IHZhbGlkYXRvci5lcnJvclxuXG4gIGNvbnN0IGpvYlJ1bklEID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5pZFxuICBjb25zdCBiYXNlID0gdmFsaWRhdG9yLm92ZXJyaWRlU3ltYm9sKEFkYXB0ZXJOYW1lKVxuICBjb25zdCBxdW90ZSA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5xdW90ZS50b0xvd2VyQ2FzZSgpXG4gIGNvbnN0IHJlc3VsdFBhdGggPSB2YWxpZGF0b3IudmFsaWRhdGVkLmRhdGEucmVzdWx0UGF0aFxuICBjb25zdCB1cmwgPSAnL3RpaW5nby9jcnlwdG8vcHJpY2VzJ1xuXG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgLi4uY29uZmlnLmFwaSxcbiAgICBwYXJhbXM6IHtcbiAgICAgIHRva2VuOiBjb25maWcuYXBpS2V5LFxuICAgICAgYmFzZUN1cnJlbmN5OiBiYXNlLFxuICAgICAgY29udmVydEN1cnJlbmN5OiBxdW90ZSxcbiAgICAgIGNvbnNvbGlkYXRlQmFzZUN1cnJlbmN5OiB0cnVlLFxuICAgICAgcmVzYW1wbGVGcmVxOiAnMjRob3VyJyxcbiAgICB9LFxuICAgIHVybCxcbiAgfVxuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgUmVxdWVzdGVyLnJlcXVlc3Qob3B0aW9ucywgY3VzdG9tRXJyb3IpXG4gIHJlc3BvbnNlLmRhdGEucmVzdWx0ID0gUmVxdWVzdGVyLnZhbGlkYXRlUmVzdWx0TnVtYmVyKHJlc3BvbnNlLmRhdGEgYXMgUmVzcG9uc2VTY2hlbWFbXSwgW1xuICAgIDAsXG4gICAgJ3ByaWNlRGF0YScsXG4gICAgMCxcbiAgICByZXN1bHRQYXRoLFxuICBdKVxuXG4gIHJldHVybiBSZXF1ZXN0ZXIuc3VjY2Vzcyhqb2JSdW5JRCwgcmVzcG9uc2UsIGNvbmZpZy52ZXJib3NlKVxufVxuIl19