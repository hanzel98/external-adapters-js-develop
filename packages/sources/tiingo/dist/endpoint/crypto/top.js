"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.inputParameters = exports.endpointResultPaths = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../../config");
exports.supportedEndpoints = ['top'];
exports.endpointResultPaths = {
    top: 'lastPrice',
};
exports.inputParameters = {
    base: ['base', 'from', 'coin'],
    quote: ['quote', 'to', 'market'],
    resultPath: false,
};
// When an invalid symbol is given the response body is empty
const customError = (data) => !data.length;
const execute = async (request, _, config) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    const jobRunID = validator.validated.id;
    const base = validator.overrideSymbol(config_1.NAME);
    const quote = validator.validated.data.quote.toLowerCase();
    const resultPath = validator.validated.data.resultPath;
    const url = '/tiingo/crypto/top';
    const options = {
        ...config.api,
        params: {
            token: config.apiKey,
            tickers: base + quote,
        },
        url,
    };
    const response = await ea_bootstrap_1.Requester.request(options, customError);
    response.data.result = ea_bootstrap_1.Requester.validateResultNumber(response.data, [
        0,
        'topOfBookData',
        0,
        resultPath,
    ]);
    return ea_bootstrap_1.Requester.success(jobRunID, response, config.verbose);
};
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9wLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2VuZHBvaW50L2NyeXB0by90b3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQThEO0FBRTlELHlDQUFrRDtBQUVyQyxRQUFBLGtCQUFrQixHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7QUFFNUIsUUFBQSxtQkFBbUIsR0FBd0I7SUFDdEQsR0FBRyxFQUFFLFdBQVc7Q0FDakIsQ0FBQTtBQXNCWSxRQUFBLGVBQWUsR0FBb0I7SUFDOUMsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUM7SUFDOUIsS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUM7SUFDaEMsVUFBVSxFQUFFLEtBQUs7Q0FDbEIsQ0FBQTtBQUVELDZEQUE2RDtBQUM3RCxNQUFNLFdBQVcsR0FBRyxDQUFDLElBQXNCLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQTtBQUVyRCxNQUFNLE9BQU8sR0FBOEIsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUU7SUFDN0UsTUFBTSxTQUFTLEdBQUcsSUFBSSx3QkFBUyxDQUFDLE9BQU8sRUFBRSx1QkFBZSxDQUFDLENBQUE7SUFDekQsSUFBSSxTQUFTLENBQUMsS0FBSztRQUFFLE1BQU0sU0FBUyxDQUFDLEtBQUssQ0FBQTtJQUUxQyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQTtJQUN2QyxNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsY0FBYyxDQUFDLGFBQVcsQ0FBVyxDQUFBO0lBQzVELE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUMxRCxNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUE7SUFFdEQsTUFBTSxHQUFHLEdBQUcsb0JBQW9CLENBQUE7SUFFaEMsTUFBTSxPQUFPLEdBQUc7UUFDZCxHQUFHLE1BQU0sQ0FBQyxHQUFHO1FBQ2IsTUFBTSxFQUFFO1lBQ04sS0FBSyxFQUFFLE1BQU0sQ0FBQyxNQUFNO1lBQ3BCLE9BQU8sRUFBRSxJQUFJLEdBQUcsS0FBSztTQUN0QjtRQUNELEdBQUc7S0FDSixDQUFBO0lBRUQsTUFBTSxRQUFRLEdBQUcsTUFBTSx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUE7SUFDOUQsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsd0JBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsSUFBd0IsRUFBRTtRQUN2RixDQUFDO1FBQ0QsZUFBZTtRQUNmLENBQUM7UUFDRCxVQUFVO0tBQ1gsQ0FBQyxDQUFBO0lBRUYsT0FBTyx3QkFBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUM5RCxDQUFDLENBQUE7QUE3QlksUUFBQSxPQUFPLFdBNkJuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3RlciwgVmFsaWRhdG9yIH0gZnJvbSAnQGNoYWlubGluay9lYS1ib290c3RyYXAnXG5pbXBvcnQgeyBFeGVjdXRlV2l0aENvbmZpZywgQ29uZmlnLCBJbnB1dFBhcmFtZXRlcnMsIEVuZHBvaW50UmVzdWx0UGF0aHMgfSBmcm9tICdAY2hhaW5saW5rL3R5cGVzJ1xuaW1wb3J0IHsgTkFNRSBhcyBBZGFwdGVyTmFtZSB9IGZyb20gJy4uLy4uL2NvbmZpZydcblxuZXhwb3J0IGNvbnN0IHN1cHBvcnRlZEVuZHBvaW50cyA9IFsndG9wJ11cblxuZXhwb3J0IGNvbnN0IGVuZHBvaW50UmVzdWx0UGF0aHM6IEVuZHBvaW50UmVzdWx0UGF0aHMgPSB7XG4gIHRvcDogJ2xhc3RQcmljZScsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VTY2hlbWEge1xuICB0aWNrZXI6IHN0cmluZ1xuICBiYXNlQ3VycmVuY3k6IHN0cmluZ1xuICBxdW90ZUN1cnJlbmN5OiBzdHJpbmdcbiAgdG9wT2ZCb29rRGF0YToge1xuICAgIGFza1NpemU6IG51bWJlclxuICAgIGJpZFNpemU6IG51bWJlclxuICAgIGxhc3RTYWxlVGltZXN0YW1wOiBzdHJpbmdcbiAgICBsYXN0UHJpY2U6IG51bWJlclxuICAgIGFza1ByaWNlOiBudW1iZXJcbiAgICBxdW90ZVRpbWVzdGFtcDogc3RyaW5nXG4gICAgYmlkRXhjaGFuZ2U6IHN0cmluZ1xuICAgIGxhc3RTaXplTm90aW9uYWw6IG51bWJlclxuICAgIGxhc3RFeGNoYW5nZTogc3RyaW5nXG4gICAgYXNrRXhjaGFuZ2U6IHN0cmluZ1xuICAgIGJpZFByaWNlOiBudW1iZXJcbiAgICBsYXN0U2l6ZTogbnVtYmVyXG4gIH1bXVxufVxuXG5leHBvcnQgY29uc3QgaW5wdXRQYXJhbWV0ZXJzOiBJbnB1dFBhcmFtZXRlcnMgPSB7XG4gIGJhc2U6IFsnYmFzZScsICdmcm9tJywgJ2NvaW4nXSxcbiAgcXVvdGU6IFsncXVvdGUnLCAndG8nLCAnbWFya2V0J10sXG4gIHJlc3VsdFBhdGg6IGZhbHNlLFxufVxuXG4vLyBXaGVuIGFuIGludmFsaWQgc3ltYm9sIGlzIGdpdmVuIHRoZSByZXNwb25zZSBib2R5IGlzIGVtcHR5XG5jb25zdCBjdXN0b21FcnJvciA9IChkYXRhOiBSZXNwb25zZVNjaGVtYVtdKSA9PiAhZGF0YS5sZW5ndGhcblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGU6IEV4ZWN1dGVXaXRoQ29uZmlnPENvbmZpZz4gPSBhc3luYyAocmVxdWVzdCwgXywgY29uZmlnKSA9PiB7XG4gIGNvbnN0IHZhbGlkYXRvciA9IG5ldyBWYWxpZGF0b3IocmVxdWVzdCwgaW5wdXRQYXJhbWV0ZXJzKVxuICBpZiAodmFsaWRhdG9yLmVycm9yKSB0aHJvdyB2YWxpZGF0b3IuZXJyb3JcblxuICBjb25zdCBqb2JSdW5JRCA9IHZhbGlkYXRvci52YWxpZGF0ZWQuaWRcbiAgY29uc3QgYmFzZSA9IHZhbGlkYXRvci5vdmVycmlkZVN5bWJvbChBZGFwdGVyTmFtZSkgYXMgc3RyaW5nXG4gIGNvbnN0IHF1b3RlID0gdmFsaWRhdG9yLnZhbGlkYXRlZC5kYXRhLnF1b3RlLnRvTG93ZXJDYXNlKClcbiAgY29uc3QgcmVzdWx0UGF0aCA9IHZhbGlkYXRvci52YWxpZGF0ZWQuZGF0YS5yZXN1bHRQYXRoXG5cbiAgY29uc3QgdXJsID0gJy90aWluZ28vY3J5cHRvL3RvcCdcblxuICBjb25zdCBvcHRpb25zID0ge1xuICAgIC4uLmNvbmZpZy5hcGksXG4gICAgcGFyYW1zOiB7XG4gICAgICB0b2tlbjogY29uZmlnLmFwaUtleSxcbiAgICAgIHRpY2tlcnM6IGJhc2UgKyBxdW90ZSxcbiAgICB9LFxuICAgIHVybCxcbiAgfVxuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgUmVxdWVzdGVyLnJlcXVlc3Qob3B0aW9ucywgY3VzdG9tRXJyb3IpXG4gIHJlc3BvbnNlLmRhdGEucmVzdWx0ID0gUmVxdWVzdGVyLnZhbGlkYXRlUmVzdWx0TnVtYmVyKHJlc3BvbnNlLmRhdGEgYXMgUmVzcG9uc2VTY2hlbWFbXSwgW1xuICAgIDAsXG4gICAgJ3RvcE9mQm9va0RhdGEnLFxuICAgIDAsXG4gICAgcmVzdWx0UGF0aCxcbiAgXSlcblxuICByZXR1cm4gUmVxdWVzdGVyLnN1Y2Nlc3Moam9iUnVuSUQsIHJlc3BvbnNlLCBjb25maWcudmVyYm9zZSlcbn1cbiJdfQ==