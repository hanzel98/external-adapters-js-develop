"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExecute = exports.inputParameters = exports.supportedEndpoints = void 0;
const ea_factories_1 = require("@chainlink/ea-factories");
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
exports.supportedEndpoints = ['balance'];
exports.inputParameters = ea_factories_1.balance.inputParameters;
const getBalanceURI = (address, chain, coin) => {
    if (chain === 'testnet')
        chain = ea_bootstrap_1.Requester.toVendorName(coin, config_1.TESTNET_BLOCKCHAINS_BY_PLATFORM) || chain;
    return `/v2/blockchain-data/${coin}/${chain}/addresses/${address}`;
};
const getBalance = async (account, config) => {
    if (!account.coin) {
        throw new Error(`Account ${account.address} is missing blockchain parameter`);
    }
    const coin = config_1.BLOCKCHAIN_NAME_BY_TICKER[account.coin.toLowerCase()];
    const options = {
        ...config.api,
        url: getBalanceURI(account.address, account.chain, coin),
    };
    const response = await ea_bootstrap_1.Requester.request(options);
    const balance = response.data.data.item.confirmedBalance.amount;
    return {
        payload: response.data,
        result: [{ ...account, balance }],
    };
};
const isSupported = (coin, chain) => config_1.isChainType(chain) && config_1.isCoinType(coin);
const makeExecute = (config) => ea_factories_1.balance.make({ ...config, getBalance, isSupported });
exports.makeExecute = makeExecute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFsYW5jZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbmRwb2ludC9iYWxhbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUFpRDtBQUNqRCwwREFBbUQ7QUFFbkQsc0NBTWtCO0FBRUwsUUFBQSxrQkFBa0IsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBRWhDLFFBQUEsZUFBZSxHQUFHLHNCQUFPLENBQUMsZUFBZSxDQUFBO0FBRXRELE1BQU0sYUFBYSxHQUFHLENBQUMsT0FBZSxFQUFFLEtBQWEsRUFBRSxJQUFZLEVBQUUsRUFBRTtJQUNyRSxJQUFJLEtBQUssS0FBSyxTQUFTO1FBQ3JCLEtBQUssR0FBRyx3QkFBUyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsd0NBQStCLENBQUMsSUFBSSxLQUFLLENBQUE7SUFDaEYsT0FBTyx1QkFBdUIsSUFBSSxJQUFJLEtBQUssY0FBYyxPQUFPLEVBQUUsQ0FBQTtBQUNwRSxDQUFDLENBQUE7QUFFRCxNQUFNLFVBQVUsR0FBdUIsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtJQUMvRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtRQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLFdBQVcsT0FBTyxDQUFDLE9BQU8sa0NBQWtDLENBQUMsQ0FBQTtLQUM5RTtJQUNELE1BQU0sSUFBSSxHQUFHLGtDQUF5QixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUF1QixDQUFDLENBQUE7SUFDdkYsTUFBTSxPQUFPLEdBQUc7UUFDZCxHQUFHLE1BQU0sQ0FBQyxHQUFHO1FBQ2IsR0FBRyxFQUFFLGFBQWEsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxLQUFlLEVBQUUsSUFBYyxDQUFDO0tBQzdFLENBQUE7SUFDRCxNQUFNLFFBQVEsR0FBRyxNQUFNLHdCQUFTLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ2pELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUE7SUFFL0QsT0FBTztRQUNMLE9BQU8sRUFBRSxRQUFRLENBQUMsSUFBSTtRQUN0QixNQUFNLEVBQUUsQ0FBQyxFQUFFLEdBQUcsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDO0tBQ2xDLENBQUE7QUFDSCxDQUFDLENBQUE7QUFFRCxNQUFNLFdBQVcsR0FBd0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxvQkFBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLG1CQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7QUFFekYsTUFBTSxXQUFXLEdBQTJCLENBQUMsTUFBZSxFQUFFLEVBQUUsQ0FDckUsc0JBQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLE1BQU0sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQTtBQUR6QyxRQUFBLFdBQVcsZUFDOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBiYWxhbmNlIH0gZnJvbSAnQGNoYWlubGluay9lYS1mYWN0b3JpZXMnXG5pbXBvcnQgeyBSZXF1ZXN0ZXIgfSBmcm9tICdAY2hhaW5saW5rL2VhLWJvb3RzdHJhcCdcbmltcG9ydCB7IENvbmZpZywgRXhlY3V0ZUZhY3RvcnkgfSBmcm9tICdAY2hhaW5saW5rL3R5cGVzJ1xuaW1wb3J0IHtcbiAgaXNDb2luVHlwZSxcbiAgaXNDaGFpblR5cGUsXG4gIFRFU1RORVRfQkxPQ0tDSEFJTlNfQllfUExBVEZPUk0sXG4gIEJMT0NLQ0hBSU5fTkFNRV9CWV9USUNLRVIsXG4gIEJsb2NrY2hhaW5UaWNrZXJzLFxufSBmcm9tICcuLi9jb25maWcnXG5cbmV4cG9ydCBjb25zdCBzdXBwb3J0ZWRFbmRwb2ludHMgPSBbJ2JhbGFuY2UnXVxuXG5leHBvcnQgY29uc3QgaW5wdXRQYXJhbWV0ZXJzID0gYmFsYW5jZS5pbnB1dFBhcmFtZXRlcnNcblxuY29uc3QgZ2V0QmFsYW5jZVVSSSA9IChhZGRyZXNzOiBzdHJpbmcsIGNoYWluOiBzdHJpbmcsIGNvaW46IHN0cmluZykgPT4ge1xuICBpZiAoY2hhaW4gPT09ICd0ZXN0bmV0JylcbiAgICBjaGFpbiA9IFJlcXVlc3Rlci50b1ZlbmRvck5hbWUoY29pbiwgVEVTVE5FVF9CTE9DS0NIQUlOU19CWV9QTEFURk9STSkgfHwgY2hhaW5cbiAgcmV0dXJuIGAvdjIvYmxvY2tjaGFpbi1kYXRhLyR7Y29pbn0vJHtjaGFpbn0vYWRkcmVzc2VzLyR7YWRkcmVzc31gXG59XG5cbmNvbnN0IGdldEJhbGFuY2U6IGJhbGFuY2UuR2V0QmFsYW5jZSA9IGFzeW5jIChhY2NvdW50LCBjb25maWcpID0+IHtcbiAgaWYgKCFhY2NvdW50LmNvaW4pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEFjY291bnQgJHthY2NvdW50LmFkZHJlc3N9IGlzIG1pc3NpbmcgYmxvY2tjaGFpbiBwYXJhbWV0ZXJgKVxuICB9XG4gIGNvbnN0IGNvaW4gPSBCTE9DS0NIQUlOX05BTUVfQllfVElDS0VSW2FjY291bnQuY29pbi50b0xvd2VyQ2FzZSgpIGFzIEJsb2NrY2hhaW5UaWNrZXJzXVxuICBjb25zdCBvcHRpb25zID0ge1xuICAgIC4uLmNvbmZpZy5hcGksXG4gICAgdXJsOiBnZXRCYWxhbmNlVVJJKGFjY291bnQuYWRkcmVzcywgYWNjb3VudC5jaGFpbiBhcyBzdHJpbmcsIGNvaW4gYXMgc3RyaW5nKSxcbiAgfVxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IFJlcXVlc3Rlci5yZXF1ZXN0KG9wdGlvbnMpXG4gIGNvbnN0IGJhbGFuY2UgPSByZXNwb25zZS5kYXRhLmRhdGEuaXRlbS5jb25maXJtZWRCYWxhbmNlLmFtb3VudFxuXG4gIHJldHVybiB7XG4gICAgcGF5bG9hZDogcmVzcG9uc2UuZGF0YSxcbiAgICByZXN1bHQ6IFt7IC4uLmFjY291bnQsIGJhbGFuY2UgfV0sXG4gIH1cbn1cblxuY29uc3QgaXNTdXBwb3J0ZWQ6IGJhbGFuY2UuSXNTdXBwb3J0ZWQgPSAoY29pbiwgY2hhaW4pID0+IGlzQ2hhaW5UeXBlKGNoYWluKSAmJiBpc0NvaW5UeXBlKGNvaW4pXG5cbmV4cG9ydCBjb25zdCBtYWtlRXhlY3V0ZTogRXhlY3V0ZUZhY3Rvcnk8Q29uZmlnPiA9IChjb25maWc/OiBDb25maWcpID0+XG4gIGJhbGFuY2UubWFrZSh7IC4uLmNvbmZpZywgZ2V0QmFsYW5jZSwgaXNTdXBwb3J0ZWQgfSlcbiJdfQ==