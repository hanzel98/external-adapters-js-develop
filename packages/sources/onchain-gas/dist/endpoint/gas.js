"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransactionsInPastBlocks = exports.execute = exports.inputParameters = exports.supportedEndpoints = void 0;
const ea_bootstrap_1 = require("@chainlink/ea-bootstrap");
const config_1 = require("../config");
exports.supportedEndpoints = ['gas'];
exports.inputParameters = {
    numBlocks: false,
    blockIdx: false,
};
const execute = async (request) => {
    const validator = new ea_bootstrap_1.Validator(request, exports.inputParameters);
    if (validator.error)
        throw validator.error;
    throw Error('The OnChain Gas adapter does not support making HTTP requests. Make sure WS is enabled in the adapter configuration.');
};
exports.execute = execute;
const getTransactionsInPastBlocks = async (id, jsonrpc, latestHexedBlockNum, numBlocksToQuery = config_1.DEFAULT_NUM_BLOCKS, config) => {
    const latestBlockNum = parseInt(latestHexedBlockNum, 16);
    const numBlocks = Math.min(config_1.MAX_BLOCKS_TO_QUERY, numBlocksToQuery);
    if (numBlocksToQuery > config_1.MAX_BLOCKS_TO_QUERY) {
        ea_bootstrap_1.Logger.info(`Can only query a maximum of ${config_1.MAX_BLOCKS_TO_QUERY} blocks`);
    }
    const getBlocks = [];
    for (let blockNum = latestBlockNum; blockNum > latestBlockNum - numBlocks; blockNum--) {
        const hexedBlockNum = `0x${blockNum.toString(16)}`;
        getBlocks.push(getBlock(id, hexedBlockNum, jsonrpc, config));
    }
    const blocks = await Promise.all(getBlocks);
    return blocks.map((block) => getMedianGasPrice(block));
};
exports.getTransactionsInPastBlocks = getTransactionsInPastBlocks;
const getBlock = async (id, hexedBlockNumber, jsonrpc, config) => {
    const requestConfig = {
        url: config.rpcUrl,
        data: {
            jsonrpc: jsonrpc,
            method: 'eth_getBlockByNumber',
            params: [hexedBlockNumber, true],
            id,
        },
        method: 'post',
    };
    return await ea_bootstrap_1.Requester.request(requestConfig);
};
const getMedianGasPrice = (block) => {
    const blockTransactions = block.data.result.transactions;
    const gasPrices = blockTransactions.map(({ gasPrice: hexedGasPrice }) => parseInt(hexedGasPrice, 16));
    const sortedPrices = gasPrices.sort((a, b) => b - a);
    const mid = Math.floor(sortedPrices.length / 2);
    if (sortedPrices.length % 2 === 0) {
        return (sortedPrices[mid - 1] + sortedPrices[mid]) / 2;
    }
    return sortedPrices[mid];
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VuZHBvaW50L2dhcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwREFBc0U7QUFFdEUsc0NBQW1FO0FBRXRELFFBQUEsa0JBQWtCLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUU1QixRQUFBLGVBQWUsR0FBb0I7SUFDOUMsU0FBUyxFQUFFLEtBQUs7SUFDaEIsUUFBUSxFQUFFLEtBQUs7Q0FDaEIsQ0FBQTtBQUVNLE1BQU0sT0FBTyxHQUE4QixLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUU7SUFDbEUsTUFBTSxTQUFTLEdBQUcsSUFBSSx3QkFBUyxDQUFDLE9BQU8sRUFBRSx1QkFBZSxDQUFDLENBQUE7SUFDekQsSUFBSSxTQUFTLENBQUMsS0FBSztRQUFFLE1BQU0sU0FBUyxDQUFDLEtBQUssQ0FBQTtJQUMxQyxNQUFNLEtBQUssQ0FDVCxzSEFBc0gsQ0FDdkgsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQU5ZLFFBQUEsT0FBTyxXQU1uQjtBQVlNLE1BQU0sMkJBQTJCLEdBQUcsS0FBSyxFQUM5QyxFQUFVLEVBQ1YsT0FBZSxFQUNmLG1CQUEyQixFQUMzQixnQkFBZ0IsR0FBRywyQkFBa0IsRUFDckMsTUFBYyxFQUNLLEVBQUU7SUFDckIsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ3hELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsNEJBQW1CLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQTtJQUNqRSxJQUFJLGdCQUFnQixHQUFHLDRCQUFtQixFQUFFO1FBQzFDLHFCQUFNLENBQUMsSUFBSSxDQUFDLCtCQUErQiw0QkFBbUIsU0FBUyxDQUFDLENBQUE7S0FDekU7SUFDRCxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUE7SUFDcEIsS0FBSyxJQUFJLFFBQVEsR0FBRyxjQUFjLEVBQUUsUUFBUSxHQUFHLGNBQWMsR0FBRyxTQUFTLEVBQUUsUUFBUSxFQUFFLEVBQUU7UUFDckYsTUFBTSxhQUFhLEdBQUcsS0FBSyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUE7UUFDbEQsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQTtLQUM3RDtJQUNELE1BQU0sTUFBTSxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUMzQyxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7QUFDeEQsQ0FBQyxDQUFBO0FBbkJZLFFBQUEsMkJBQTJCLCtCQW1CdkM7QUFFRCxNQUFNLFFBQVEsR0FBRyxLQUFLLEVBQ3BCLEVBQVUsRUFDVixnQkFBd0IsRUFDeEIsT0FBZSxFQUNmLE1BQWMsRUFDRSxFQUFFO0lBQ2xCLE1BQU0sYUFBYSxHQUFHO1FBQ3BCLEdBQUcsRUFBRSxNQUFNLENBQUMsTUFBTTtRQUNsQixJQUFJLEVBQUU7WUFDSixPQUFPLEVBQUUsT0FBTztZQUNoQixNQUFNLEVBQUUsc0JBQXNCO1lBQzlCLE1BQU0sRUFBRSxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQztZQUNoQyxFQUFFO1NBQ0g7UUFDRCxNQUFNLEVBQUUsTUFBTTtLQUNmLENBQUE7SUFDRCxPQUFPLE1BQU0sd0JBQVMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUE7QUFDL0MsQ0FBQyxDQUFBO0FBRUQsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLEtBQVksRUFBVSxFQUFFO0lBQ2pELE1BQU0saUJBQWlCLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFBO0lBQ3hELE1BQU0sU0FBUyxHQUFHLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUUsQ0FDdEUsUUFBUSxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUMsQ0FDNUIsQ0FBQTtJQUNELE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFDcEQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQy9DLElBQUksWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ2pDLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtLQUN2RDtJQUNELE9BQU8sWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQzFCLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZhbGlkYXRvciwgTG9nZ2VyLCBSZXF1ZXN0ZXIgfSBmcm9tICdAY2hhaW5saW5rL2VhLWJvb3RzdHJhcCdcbmltcG9ydCB7IENvbmZpZywgRXhlY3V0ZVdpdGhDb25maWcsIElucHV0UGFyYW1ldGVycyB9IGZyb20gJ0BjaGFpbmxpbmsvdHlwZXMnXG5pbXBvcnQgeyBERUZBVUxUX05VTV9CTE9DS1MsIE1BWF9CTE9DS1NfVE9fUVVFUlkgfSBmcm9tICcuLi9jb25maWcnXG5cbmV4cG9ydCBjb25zdCBzdXBwb3J0ZWRFbmRwb2ludHMgPSBbJ2dhcyddXG5cbmV4cG9ydCBjb25zdCBpbnB1dFBhcmFtZXRlcnM6IElucHV0UGFyYW1ldGVycyA9IHtcbiAgbnVtQmxvY2tzOiBmYWxzZSxcbiAgYmxvY2tJZHg6IGZhbHNlLFxufVxuXG5leHBvcnQgY29uc3QgZXhlY3V0ZTogRXhlY3V0ZVdpdGhDb25maWc8Q29uZmlnPiA9IGFzeW5jIChyZXF1ZXN0KSA9PiB7XG4gIGNvbnN0IHZhbGlkYXRvciA9IG5ldyBWYWxpZGF0b3IocmVxdWVzdCwgaW5wdXRQYXJhbWV0ZXJzKVxuICBpZiAodmFsaWRhdG9yLmVycm9yKSB0aHJvdyB2YWxpZGF0b3IuZXJyb3JcbiAgdGhyb3cgRXJyb3IoXG4gICAgJ1RoZSBPbkNoYWluIEdhcyBhZGFwdGVyIGRvZXMgbm90IHN1cHBvcnQgbWFraW5nIEhUVFAgcmVxdWVzdHMuIE1ha2Ugc3VyZSBXUyBpcyBlbmFibGVkIGluIHRoZSBhZGFwdGVyIGNvbmZpZ3VyYXRpb24uJyxcbiAgKVxufVxuXG5pbnRlcmZhY2UgQmxvY2sge1xuICBkYXRhOiB7XG4gICAgcmVzdWx0OiB7XG4gICAgICB0cmFuc2FjdGlvbnM6IHtcbiAgICAgICAgZ2FzUHJpY2U6IHN0cmluZ1xuICAgICAgfVtdXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBnZXRUcmFuc2FjdGlvbnNJblBhc3RCbG9ja3MgPSBhc3luYyAoXG4gIGlkOiBzdHJpbmcsXG4gIGpzb25ycGM6IHN0cmluZyxcbiAgbGF0ZXN0SGV4ZWRCbG9ja051bTogc3RyaW5nLFxuICBudW1CbG9ja3NUb1F1ZXJ5ID0gREVGQVVMVF9OVU1fQkxPQ0tTLFxuICBjb25maWc6IENvbmZpZyxcbik6IFByb21pc2U8bnVtYmVyW10+ID0+IHtcbiAgY29uc3QgbGF0ZXN0QmxvY2tOdW0gPSBwYXJzZUludChsYXRlc3RIZXhlZEJsb2NrTnVtLCAxNilcbiAgY29uc3QgbnVtQmxvY2tzID0gTWF0aC5taW4oTUFYX0JMT0NLU19UT19RVUVSWSwgbnVtQmxvY2tzVG9RdWVyeSlcbiAgaWYgKG51bUJsb2Nrc1RvUXVlcnkgPiBNQVhfQkxPQ0tTX1RPX1FVRVJZKSB7XG4gICAgTG9nZ2VyLmluZm8oYENhbiBvbmx5IHF1ZXJ5IGEgbWF4aW11bSBvZiAke01BWF9CTE9DS1NfVE9fUVVFUll9IGJsb2Nrc2ApXG4gIH1cbiAgY29uc3QgZ2V0QmxvY2tzID0gW11cbiAgZm9yIChsZXQgYmxvY2tOdW0gPSBsYXRlc3RCbG9ja051bTsgYmxvY2tOdW0gPiBsYXRlc3RCbG9ja051bSAtIG51bUJsb2NrczsgYmxvY2tOdW0tLSkge1xuICAgIGNvbnN0IGhleGVkQmxvY2tOdW0gPSBgMHgke2Jsb2NrTnVtLnRvU3RyaW5nKDE2KX1gXG4gICAgZ2V0QmxvY2tzLnB1c2goZ2V0QmxvY2soaWQsIGhleGVkQmxvY2tOdW0sIGpzb25ycGMsIGNvbmZpZykpXG4gIH1cbiAgY29uc3QgYmxvY2tzID0gYXdhaXQgUHJvbWlzZS5hbGwoZ2V0QmxvY2tzKVxuICByZXR1cm4gYmxvY2tzLm1hcCgoYmxvY2spID0+IGdldE1lZGlhbkdhc1ByaWNlKGJsb2NrKSlcbn1cblxuY29uc3QgZ2V0QmxvY2sgPSBhc3luYyAoXG4gIGlkOiBzdHJpbmcsXG4gIGhleGVkQmxvY2tOdW1iZXI6IHN0cmluZyxcbiAganNvbnJwYzogc3RyaW5nLFxuICBjb25maWc6IENvbmZpZyxcbik6IFByb21pc2U8QmxvY2s+ID0+IHtcbiAgY29uc3QgcmVxdWVzdENvbmZpZyA9IHtcbiAgICB1cmw6IGNvbmZpZy5ycGNVcmwsXG4gICAgZGF0YToge1xuICAgICAganNvbnJwYzoganNvbnJwYyxcbiAgICAgIG1ldGhvZDogJ2V0aF9nZXRCbG9ja0J5TnVtYmVyJyxcbiAgICAgIHBhcmFtczogW2hleGVkQmxvY2tOdW1iZXIsIHRydWVdLFxuICAgICAgaWQsXG4gICAgfSxcbiAgICBtZXRob2Q6ICdwb3N0JyxcbiAgfVxuICByZXR1cm4gYXdhaXQgUmVxdWVzdGVyLnJlcXVlc3QocmVxdWVzdENvbmZpZylcbn1cblxuY29uc3QgZ2V0TWVkaWFuR2FzUHJpY2UgPSAoYmxvY2s6IEJsb2NrKTogbnVtYmVyID0+IHtcbiAgY29uc3QgYmxvY2tUcmFuc2FjdGlvbnMgPSBibG9jay5kYXRhLnJlc3VsdC50cmFuc2FjdGlvbnNcbiAgY29uc3QgZ2FzUHJpY2VzID0gYmxvY2tUcmFuc2FjdGlvbnMubWFwKCh7IGdhc1ByaWNlOiBoZXhlZEdhc1ByaWNlIH0pID0+XG4gICAgcGFyc2VJbnQoaGV4ZWRHYXNQcmljZSwgMTYpLFxuICApXG4gIGNvbnN0IHNvcnRlZFByaWNlcyA9IGdhc1ByaWNlcy5zb3J0KChhLCBiKSA9PiBiIC0gYSlcbiAgY29uc3QgbWlkID0gTWF0aC5mbG9vcihzb3J0ZWRQcmljZXMubGVuZ3RoIC8gMilcbiAgaWYgKHNvcnRlZFByaWNlcy5sZW5ndGggJSAyID09PSAwKSB7XG4gICAgcmV0dXJuIChzb3J0ZWRQcmljZXNbbWlkIC0gMV0gKyBzb3J0ZWRQcmljZXNbbWlkXSkgLyAyXG4gIH1cbiAgcmV0dXJuIHNvcnRlZFByaWNlc1ttaWRdXG59XG4iXX0=