"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("./lib");
describe('generateImageName', () => {
    beforeEach(() => {
        process.env.ADAPTER_NAME = '';
        process.env.BRANCH = '';
        process.env.IMAGE_PREFIX = '';
        process.env.LATEST = '';
    });
    afterAll(() => {
        process.env.ADAPTER_NAME = '';
        process.env.BRANCH = '';
        process.env.IMAGE_PREFIX = '';
        process.env.LATEST = '';
    });
    describe('when no adapter name is provided', () => it('should error and exit', async () => {
        await expect(lib_1.generateImageName()).rejects.toThrowErrorMatchingInlineSnapshot(`"A descoped adapter name must be available as an environment variable under ADAPTER_NAME"`);
    }));
    describe('when an invalid adapter name is provided', () => {
        it('should error and exit', async () => {
            process.env.ADAPTER_NAME = 'invalid-adapter';
            await expect(lib_1.generateImageName()).rejects.toThrowErrorMatchingInlineSnapshot(`"Invalid adapter name provided, no matching adapter name found in workspace packages."`);
        });
    });
    describe('when an adapter name is provided', () => {
        const name = 'coinmarketcap-adapter';
        const prefix = 'aws/';
        const branch = 'develop';
        const latest = 'TRUE';
        const table = [
            { name, branch: '', prefix: '', latest: '' },
            { name, branch, prefix: '', latest: '' },
            { name, branch, prefix, latest: '' },
            { name, branch, prefix, latest },
            { name, branch: '', prefix, latest: '' },
            { name, branch: '', prefix, latest },
            { name, branch: '', prefix: '', latest },
        ];
        it.each(table)('should generate a valid name with name:$name, branch:$branch, prefix:$prefix, latest:$latest', async ({ name, branch, prefix, latest }) => {
            process.env.ADAPTER_NAME = name;
            process.env.BRANCH = branch;
            process.env.IMAGE_PREFIX = prefix;
            process.env.LATEST = latest;
            expect(await lib_1.generateImageName()).toMatchSnapshot();
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZ2VuZXJhdGUtaW1hZ2UtbmFtZS9saWIudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUF5QztBQUV6QyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO0lBQ2pDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUE7UUFDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFBO1FBQ3ZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQTtRQUM3QixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUE7SUFDekIsQ0FBQyxDQUFDLENBQUE7SUFFRixRQUFRLENBQUMsR0FBRyxFQUFFO1FBQ1osT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFBO1FBQzdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQTtRQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUE7UUFDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFBO0lBQ3pCLENBQUMsQ0FBQyxDQUFBO0lBRUYsUUFBUSxDQUFDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRSxDQUNoRCxFQUFFLENBQUMsdUJBQXVCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDckMsTUFBTSxNQUFNLENBQUMsdUJBQWlCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxrQ0FBa0MsQ0FDMUUsMkZBQTJGLENBQzVGLENBQUE7SUFDSCxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRUwsUUFBUSxDQUFDLDBDQUEwQyxFQUFFLEdBQUcsRUFBRTtRQUN4RCxFQUFFLENBQUMsdUJBQXVCLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsaUJBQWlCLENBQUE7WUFFNUMsTUFBTSxNQUFNLENBQUMsdUJBQWlCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxrQ0FBa0MsQ0FDMUUsd0ZBQXdGLENBQ3pGLENBQUE7UUFDSCxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0lBQ0YsUUFBUSxDQUFDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtRQUNoRCxNQUFNLElBQUksR0FBRyx1QkFBdUIsQ0FBQTtRQUNwQyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUE7UUFDckIsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFBO1FBQ3hCLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQTtRQUNyQixNQUFNLEtBQUssR0FBRztZQUNaLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFO1lBRTVDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUU7WUFDeEMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFO1lBQ3BDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFO1lBRWhDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUU7WUFDeEMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFO1lBRXBDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUU7U0FDekMsQ0FBQTtRQUNELEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQ1osOEZBQThGLEVBQzlGLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUU7WUFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFBO1lBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtZQUMzQixPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUE7WUFDakMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO1lBRTNCLE1BQU0sQ0FBQyxNQUFNLHVCQUFpQixFQUFFLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQTtRQUNyRCxDQUFDLENBQ0YsQ0FBQTtJQUNILENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZW5lcmF0ZUltYWdlTmFtZSB9IGZyb20gJy4vbGliJ1xuXG5kZXNjcmliZSgnZ2VuZXJhdGVJbWFnZU5hbWUnLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHByb2Nlc3MuZW52LkFEQVBURVJfTkFNRSA9ICcnXG4gICAgcHJvY2Vzcy5lbnYuQlJBTkNIID0gJydcbiAgICBwcm9jZXNzLmVudi5JTUFHRV9QUkVGSVggPSAnJ1xuICAgIHByb2Nlc3MuZW52LkxBVEVTVCA9ICcnXG4gIH0pXG5cbiAgYWZ0ZXJBbGwoKCkgPT4ge1xuICAgIHByb2Nlc3MuZW52LkFEQVBURVJfTkFNRSA9ICcnXG4gICAgcHJvY2Vzcy5lbnYuQlJBTkNIID0gJydcbiAgICBwcm9jZXNzLmVudi5JTUFHRV9QUkVGSVggPSAnJ1xuICAgIHByb2Nlc3MuZW52LkxBVEVTVCA9ICcnXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ3doZW4gbm8gYWRhcHRlciBuYW1lIGlzIHByb3ZpZGVkJywgKCkgPT5cbiAgICBpdCgnc2hvdWxkIGVycm9yIGFuZCBleGl0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgZXhwZWN0KGdlbmVyYXRlSW1hZ2VOYW1lKCkpLnJlamVjdHMudG9UaHJvd0Vycm9yTWF0Y2hpbmdJbmxpbmVTbmFwc2hvdChcbiAgICAgICAgYFwiQSBkZXNjb3BlZCBhZGFwdGVyIG5hbWUgbXVzdCBiZSBhdmFpbGFibGUgYXMgYW4gZW52aXJvbm1lbnQgdmFyaWFibGUgdW5kZXIgQURBUFRFUl9OQU1FXCJgLFxuICAgICAgKVxuICAgIH0pKVxuXG4gIGRlc2NyaWJlKCd3aGVuIGFuIGludmFsaWQgYWRhcHRlciBuYW1lIGlzIHByb3ZpZGVkJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgZXJyb3IgYW5kIGV4aXQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBwcm9jZXNzLmVudi5BREFQVEVSX05BTUUgPSAnaW52YWxpZC1hZGFwdGVyJ1xuXG4gICAgICBhd2FpdCBleHBlY3QoZ2VuZXJhdGVJbWFnZU5hbWUoKSkucmVqZWN0cy50b1Rocm93RXJyb3JNYXRjaGluZ0lubGluZVNuYXBzaG90KFxuICAgICAgICBgXCJJbnZhbGlkIGFkYXB0ZXIgbmFtZSBwcm92aWRlZCwgbm8gbWF0Y2hpbmcgYWRhcHRlciBuYW1lIGZvdW5kIGluIHdvcmtzcGFjZSBwYWNrYWdlcy5cImAsXG4gICAgICApXG4gICAgfSlcbiAgfSlcbiAgZGVzY3JpYmUoJ3doZW4gYW4gYWRhcHRlciBuYW1lIGlzIHByb3ZpZGVkJywgKCkgPT4ge1xuICAgIGNvbnN0IG5hbWUgPSAnY29pbm1hcmtldGNhcC1hZGFwdGVyJ1xuICAgIGNvbnN0IHByZWZpeCA9ICdhd3MvJ1xuICAgIGNvbnN0IGJyYW5jaCA9ICdkZXZlbG9wJ1xuICAgIGNvbnN0IGxhdGVzdCA9ICdUUlVFJ1xuICAgIGNvbnN0IHRhYmxlID0gW1xuICAgICAgeyBuYW1lLCBicmFuY2g6ICcnLCBwcmVmaXg6ICcnLCBsYXRlc3Q6ICcnIH0sXG5cbiAgICAgIHsgbmFtZSwgYnJhbmNoLCBwcmVmaXg6ICcnLCBsYXRlc3Q6ICcnIH0sXG4gICAgICB7IG5hbWUsIGJyYW5jaCwgcHJlZml4LCBsYXRlc3Q6ICcnIH0sXG4gICAgICB7IG5hbWUsIGJyYW5jaCwgcHJlZml4LCBsYXRlc3QgfSxcblxuICAgICAgeyBuYW1lLCBicmFuY2g6ICcnLCBwcmVmaXgsIGxhdGVzdDogJycgfSxcbiAgICAgIHsgbmFtZSwgYnJhbmNoOiAnJywgcHJlZml4LCBsYXRlc3QgfSxcblxuICAgICAgeyBuYW1lLCBicmFuY2g6ICcnLCBwcmVmaXg6ICcnLCBsYXRlc3QgfSxcbiAgICBdXG4gICAgaXQuZWFjaCh0YWJsZSkoXG4gICAgICAnc2hvdWxkIGdlbmVyYXRlIGEgdmFsaWQgbmFtZSB3aXRoIG5hbWU6JG5hbWUsIGJyYW5jaDokYnJhbmNoLCBwcmVmaXg6JHByZWZpeCwgbGF0ZXN0OiRsYXRlc3QnLFxuICAgICAgYXN5bmMgKHsgbmFtZSwgYnJhbmNoLCBwcmVmaXgsIGxhdGVzdCB9KSA9PiB7XG4gICAgICAgIHByb2Nlc3MuZW52LkFEQVBURVJfTkFNRSA9IG5hbWVcbiAgICAgICAgcHJvY2Vzcy5lbnYuQlJBTkNIID0gYnJhbmNoXG4gICAgICAgIHByb2Nlc3MuZW52LklNQUdFX1BSRUZJWCA9IHByZWZpeFxuICAgICAgICBwcm9jZXNzLmVudi5MQVRFU1QgPSBsYXRlc3RcblxuICAgICAgICBleHBlY3QoYXdhaXQgZ2VuZXJhdGVJbWFnZU5hbWUoKSkudG9NYXRjaFNuYXBzaG90KClcbiAgICAgIH0sXG4gICAgKVxuICB9KVxufSlcbiJdfQ==