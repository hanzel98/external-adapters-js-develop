"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergePropertiesTable = void 0;
exports.mergePropertiesTable = [
    [
        [
            'source',
            {},
            { ENABLE_CACHE: { type: 'string' } },
            {},
            {},
            {},
            'collideMe', // collisionNamespace
        ],
        { ENABLE_CACHE: { type: 'string', originalKey: 'ENABLE_CACHE' } },
    ],
    [
        [
            'source',
            {},
            { ENABLE_CACHE: { type: 'string' } },
            {},
            {},
            {},
            'collideMe', // collisionNamespace
        ],
        { ENABLE_CACHE: { type: 'string', originalKey: 'ENABLE_CACHE' } },
    ],
    [
        [
            'source',
            { ENABLE_CACHE: { type: 'string' } },
            { ENABLE_CACHE: { type: 'string' } },
            {},
            {},
            {},
            'collideMe', // collisionNamespace
        ],
        {
            // there's no original key because the base properties aren't modified
            // this is fine though because we assume the original base properties start
            // with an empty object
            ENABLE_CACHE: { type: 'string' },
            COLLIDE_ME_ENABLE_CACHE: { type: 'string', originalKey: 'ENABLE_CACHE' },
        },
    ],
    [
        [
            'source',
            { ENABLE_CACHE: { type: 'string' } },
            { ENABLE_CACHE: { type: 'string' } },
            { ENABLE_CACHE: true },
            {},
            {},
            'collideMe', // collisionNamespace
        ],
        {
            ENABLE_CACHE: { type: 'string' },
        },
    ],
    [
        [
            'source',
            {},
            { ENABLE_CACHE: { type: 'string' } },
            { ENABLE_CACHE: true },
            { ENABLE_CACHE: true },
            {},
            'collideMe', // collisionNamespace
        ],
        {},
    ],
    [
        [
            'source',
            {},
            { ENABLE_CACHE: { type: 'string' } },
            {},
            {},
            { source: true },
            'collideMe', // collisionNamespace
        ],
        {
            ENABLE_CACHE: { type: 'string', originalKey: 'ENABLE_CACHE' },
        },
    ],
    [
        [
            'source',
            { ENABLE_CACHE: { type: 'string' } },
            { ENABLE_CACHE: { type: 'string' } },
            {},
            {},
            { source: true },
            'collideMe', // collisionNamespace
        ],
        {
            ENABLE_CACHE: { type: 'string' },
            COLLIDE_ME_ENABLE_CACHE: { type: 'string', originalKey: 'COLLIDE_ME_ENABLE_CACHE' },
        },
    ],
    [
        [
            'source',
            {},
            { ENABLE_CACHE: { type: 'string' } },
            {},
            { ENABLE_CACHE: true },
            {},
            '1forge', // collisionNamespace
        ],
        { ONEFORGE_ENABLE_CACHE: { type: 'string', originalKey: 'ENABLE_CACHE' } },
    ],
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZml4dHVyZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc2NoZW1hLWZsYXR0ZW4vZml4dHVyZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBVWEsUUFBQSxvQkFBb0IsR0FBMkQ7SUFDMUY7UUFDRTtZQUNFLFFBQVE7WUFDUixFQUFFO1lBQ0YsRUFBRSxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUU7WUFDcEMsRUFBRTtZQUNGLEVBQUU7WUFDRixFQUFFO1lBQ0YsV0FBVyxFQUFFLHFCQUFxQjtTQUNuQztRQUNELEVBQUUsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsY0FBYyxFQUFFLEVBQUU7S0FDbEU7SUFDRDtRQUNFO1lBQ0UsUUFBUTtZQUNSLEVBQUU7WUFDRixFQUFFLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRTtZQUNwQyxFQUFFO1lBQ0YsRUFBRTtZQUNGLEVBQUU7WUFDRixXQUFXLEVBQUUscUJBQXFCO1NBQ25DO1FBQ0QsRUFBRSxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsRUFBRTtLQUNsRTtJQUNEO1FBQ0U7WUFDRSxRQUFRO1lBQ1IsRUFBRSxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUU7WUFDcEMsRUFBRSxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUU7WUFDcEMsRUFBRTtZQUNGLEVBQUU7WUFDRixFQUFFO1lBQ0YsV0FBVyxFQUFFLHFCQUFxQjtTQUNuQztRQUNEO1lBQ0Usc0VBQXNFO1lBQ3RFLDJFQUEyRTtZQUMzRSx1QkFBdUI7WUFDdkIsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRTtZQUNoQyx1QkFBdUIsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBRTtTQUN6RTtLQUNGO0lBQ0Q7UUFDRTtZQUNFLFFBQVE7WUFDUixFQUFFLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRTtZQUNwQyxFQUFFLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRTtZQUNwQyxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUU7WUFDdEIsRUFBRTtZQUNGLEVBQUU7WUFDRixXQUFXLEVBQUUscUJBQXFCO1NBQ25DO1FBQ0Q7WUFDRSxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFO1NBQ2pDO0tBQ0Y7SUFDRDtRQUNFO1lBQ0UsUUFBUTtZQUNSLEVBQUU7WUFDRixFQUFFLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRTtZQUNwQyxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUU7WUFDdEIsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFO1lBQ3RCLEVBQUU7WUFDRixXQUFXLEVBQUUscUJBQXFCO1NBQ25DO1FBQ0QsRUFBRTtLQUNIO0lBQ0Q7UUFDRTtZQUNFLFFBQVE7WUFDUixFQUFFO1lBQ0YsRUFBRSxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUU7WUFDcEMsRUFBRTtZQUNGLEVBQUU7WUFDRixFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7WUFDaEIsV0FBVyxFQUFFLHFCQUFxQjtTQUNuQztRQUNEO1lBQ0UsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsY0FBYyxFQUFFO1NBQzlEO0tBQ0Y7SUFFRDtRQUNFO1lBQ0UsUUFBUTtZQUNSLEVBQUUsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFO1lBQ3BDLEVBQUUsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFO1lBQ3BDLEVBQUU7WUFDRixFQUFFO1lBQ0YsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO1lBQ2hCLFdBQVcsRUFBRSxxQkFBcUI7U0FDbkM7UUFDRDtZQUNFLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUU7WUFDaEMsdUJBQXVCLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSx5QkFBeUIsRUFBRTtTQUNwRjtLQUNGO0lBRUQ7UUFDRTtZQUNFLFFBQVE7WUFDUixFQUFFO1lBQ0YsRUFBRSxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUU7WUFDcEMsRUFBRTtZQUNGLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRTtZQUN0QixFQUFFO1lBQ0YsUUFBUSxFQUFFLHFCQUFxQjtTQUNoQztRQUNELEVBQUUscUJBQXFCLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsRUFBRTtLQUMzRTtDQUNGLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJ0eXBlIE1lcmdlUHJvcGVydGllc0FyZ3MgPSBbXG4gIHN0cmluZyxcbiAgUmVjb3JkPHN0cmluZywgYW55PixcbiAgUmVjb3JkPHN0cmluZywgYW55PixcbiAgUmVjb3JkPHN0cmluZywgdHJ1ZT4sXG4gIFJlY29yZDxzdHJpbmcsIHRydWU+LFxuICBSZWNvcmQ8c3RyaW5nLCB0cnVlPixcbiAgc3RyaW5nLFxuXVxudHlwZSBFeHBlY3RlZE1lcmdlUHJvcGVydGllc091dHB1dCA9IGFueVxuZXhwb3J0IGNvbnN0IG1lcmdlUHJvcGVydGllc1RhYmxlOiBbTWVyZ2VQcm9wZXJ0aWVzQXJncywgRXhwZWN0ZWRNZXJnZVByb3BlcnRpZXNPdXRwdXRdW10gPSBbXG4gIFtcbiAgICBbXG4gICAgICAnc291cmNlJywgLy8gYmFzZVBhY2thZ2VUeXBlXG4gICAgICB7fSwgLy9iYXNlXG4gICAgICB7IEVOQUJMRV9DQUNIRTogeyB0eXBlOiAnc3RyaW5nJyB9IH0sIC8vYWRkaXRpb25hbFxuICAgICAge30sIC8vIGNvbGxpc2lvbklnbm9yZUxpc3RcbiAgICAgIHt9LCAvLyBmb3JjZVJlbmFtZUxpc3RcbiAgICAgIHt9LCAvL2NvbGxpc2lvblBhY2thZ2VUeXBlTGlzdFxuICAgICAgJ2NvbGxpZGVNZScsIC8vIGNvbGxpc2lvbk5hbWVzcGFjZVxuICAgIF0sXG4gICAgeyBFTkFCTEVfQ0FDSEU6IHsgdHlwZTogJ3N0cmluZycsIG9yaWdpbmFsS2V5OiAnRU5BQkxFX0NBQ0hFJyB9IH0sXG4gIF0sXG4gIFtcbiAgICBbXG4gICAgICAnc291cmNlJywgLy8gYmFzZVBhY2thZ2VUeXBlXG4gICAgICB7fSwgLy9iYXNlXG4gICAgICB7IEVOQUJMRV9DQUNIRTogeyB0eXBlOiAnc3RyaW5nJyB9IH0sIC8vYWRkaXRpb25hbFxuICAgICAge30sIC8vIGNvbGxpc2lvbklnbm9yZUxpc3RcbiAgICAgIHt9LCAvLyBmb3JjZVJlbmFtZUxpc3RcbiAgICAgIHt9LCAvL2NvbGxpc2lvblBhY2thZ2VUeXBlTGlzdFxuICAgICAgJ2NvbGxpZGVNZScsIC8vIGNvbGxpc2lvbk5hbWVzcGFjZVxuICAgIF0sXG4gICAgeyBFTkFCTEVfQ0FDSEU6IHsgdHlwZTogJ3N0cmluZycsIG9yaWdpbmFsS2V5OiAnRU5BQkxFX0NBQ0hFJyB9IH0sXG4gIF0sXG4gIFtcbiAgICBbXG4gICAgICAnc291cmNlJywgLy8gYmFzZVBhY2thZ2VUeXBlXG4gICAgICB7IEVOQUJMRV9DQUNIRTogeyB0eXBlOiAnc3RyaW5nJyB9IH0sIC8vYmFzZVxuICAgICAgeyBFTkFCTEVfQ0FDSEU6IHsgdHlwZTogJ3N0cmluZycgfSB9LCAvL2FkZGl0aW9uYWxcbiAgICAgIHt9LCAvLyBjb2xsaXNpb25JZ25vcmVMaXN0XG4gICAgICB7fSwgLy8gZm9yY2VSZW5hbWVMaXN0XG4gICAgICB7fSwgLy9jb2xsaXNpb25QYWNrYWdlVHlwZUxpc3RcbiAgICAgICdjb2xsaWRlTWUnLCAvLyBjb2xsaXNpb25OYW1lc3BhY2VcbiAgICBdLFxuICAgIHtcbiAgICAgIC8vIHRoZXJlJ3Mgbm8gb3JpZ2luYWwga2V5IGJlY2F1c2UgdGhlIGJhc2UgcHJvcGVydGllcyBhcmVuJ3QgbW9kaWZpZWRcbiAgICAgIC8vIHRoaXMgaXMgZmluZSB0aG91Z2ggYmVjYXVzZSB3ZSBhc3N1bWUgdGhlIG9yaWdpbmFsIGJhc2UgcHJvcGVydGllcyBzdGFydFxuICAgICAgLy8gd2l0aCBhbiBlbXB0eSBvYmplY3RcbiAgICAgIEVOQUJMRV9DQUNIRTogeyB0eXBlOiAnc3RyaW5nJyB9LFxuICAgICAgQ09MTElERV9NRV9FTkFCTEVfQ0FDSEU6IHsgdHlwZTogJ3N0cmluZycsIG9yaWdpbmFsS2V5OiAnRU5BQkxFX0NBQ0hFJyB9LFxuICAgIH0sXG4gIF0sXG4gIFtcbiAgICBbXG4gICAgICAnc291cmNlJywgLy8gYmFzZVBhY2thZ2VUeXBlXG4gICAgICB7IEVOQUJMRV9DQUNIRTogeyB0eXBlOiAnc3RyaW5nJyB9IH0sIC8vYmFzZVxuICAgICAgeyBFTkFCTEVfQ0FDSEU6IHsgdHlwZTogJ3N0cmluZycgfSB9LCAvL2FkZGl0aW9uYWxcbiAgICAgIHsgRU5BQkxFX0NBQ0hFOiB0cnVlIH0sIC8vIGNvbGxpc2lvbklnbm9yZUxpc3RcbiAgICAgIHt9LCAvLyBmb3JjZVJlbmFtZUxpc3RcbiAgICAgIHt9LCAvL2NvbGxpc2lvblBhY2thZ2VUeXBlTGlzdFxuICAgICAgJ2NvbGxpZGVNZScsIC8vIGNvbGxpc2lvbk5hbWVzcGFjZVxuICAgIF0sXG4gICAge1xuICAgICAgRU5BQkxFX0NBQ0hFOiB7IHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgfSxcbiAgXSxcbiAgW1xuICAgIFtcbiAgICAgICdzb3VyY2UnLCAvLyBiYXNlUGFja2FnZVR5cGVcbiAgICAgIHt9LCAvL2Jhc2VcbiAgICAgIHsgRU5BQkxFX0NBQ0hFOiB7IHR5cGU6ICdzdHJpbmcnIH0gfSwgLy9hZGRpdGlvbmFsXG4gICAgICB7IEVOQUJMRV9DQUNIRTogdHJ1ZSB9LCAvLyBjb2xsaXNpb25JZ25vcmVMaXN0XG4gICAgICB7IEVOQUJMRV9DQUNIRTogdHJ1ZSB9LCAvLyBmb3JjZVJlbmFtZUxpc3RcbiAgICAgIHt9LCAvL2NvbGxpc2lvblBhY2thZ2VUeXBlTGlzdFxuICAgICAgJ2NvbGxpZGVNZScsIC8vIGNvbGxpc2lvbk5hbWVzcGFjZVxuICAgIF0sXG4gICAge30sXG4gIF0sXG4gIFtcbiAgICBbXG4gICAgICAnc291cmNlJywgLy8gYmFzZVBhY2thZ2VUeXBlXG4gICAgICB7fSwgLy9iYXNlXG4gICAgICB7IEVOQUJMRV9DQUNIRTogeyB0eXBlOiAnc3RyaW5nJyB9IH0sIC8vYWRkaXRpb25hbFxuICAgICAge30sIC8vIGNvbGxpc2lvbklnbm9yZUxpc3RcbiAgICAgIHt9LCAvLyBmb3JjZVJlbmFtZUxpc3RcbiAgICAgIHsgc291cmNlOiB0cnVlIH0sIC8vY29sbGlzaW9uUGFja2FnZVR5cGVMaXN0XG4gICAgICAnY29sbGlkZU1lJywgLy8gY29sbGlzaW9uTmFtZXNwYWNlXG4gICAgXSxcbiAgICB7XG4gICAgICBFTkFCTEVfQ0FDSEU6IHsgdHlwZTogJ3N0cmluZycsIG9yaWdpbmFsS2V5OiAnRU5BQkxFX0NBQ0hFJyB9LFxuICAgIH0sXG4gIF0sXG5cbiAgW1xuICAgIFtcbiAgICAgICdzb3VyY2UnLCAvLyBiYXNlUGFja2FnZVR5cGVcbiAgICAgIHsgRU5BQkxFX0NBQ0hFOiB7IHR5cGU6ICdzdHJpbmcnIH0gfSwgLy9iYXNlXG4gICAgICB7IEVOQUJMRV9DQUNIRTogeyB0eXBlOiAnc3RyaW5nJyB9IH0sIC8vYWRkaXRpb25hbFxuICAgICAge30sIC8vIGNvbGxpc2lvbklnbm9yZUxpc3RcbiAgICAgIHt9LCAvLyBmb3JjZVJlbmFtZUxpc3RcbiAgICAgIHsgc291cmNlOiB0cnVlIH0sIC8vY29sbGlzaW9uUGFja2FnZVR5cGVMaXN0XG4gICAgICAnY29sbGlkZU1lJywgLy8gY29sbGlzaW9uTmFtZXNwYWNlXG4gICAgXSxcbiAgICB7XG4gICAgICBFTkFCTEVfQ0FDSEU6IHsgdHlwZTogJ3N0cmluZycgfSxcbiAgICAgIENPTExJREVfTUVfRU5BQkxFX0NBQ0hFOiB7IHR5cGU6ICdzdHJpbmcnLCBvcmlnaW5hbEtleTogJ0NPTExJREVfTUVfRU5BQkxFX0NBQ0hFJyB9LFxuICAgIH0sXG4gIF0sXG5cbiAgW1xuICAgIFtcbiAgICAgICdzb3VyY2UnLCAvLyBiYXNlUGFja2FnZVR5cGVcbiAgICAgIHt9LCAvL2Jhc2VcbiAgICAgIHsgRU5BQkxFX0NBQ0hFOiB7IHR5cGU6ICdzdHJpbmcnIH0gfSwgLy9hZGRpdGlvbmFsXG4gICAgICB7fSwgLy8gY29sbGlzaW9uSWdub3JlTGlzdFxuICAgICAgeyBFTkFCTEVfQ0FDSEU6IHRydWUgfSwgLy8gZm9yY2VSZW5hbWVMaXN0XG4gICAgICB7fSwgLy9jb2xsaXNpb25QYWNrYWdlVHlwZUxpc3RcbiAgICAgICcxZm9yZ2UnLCAvLyBjb2xsaXNpb25OYW1lc3BhY2VcbiAgICBdLFxuICAgIHsgT05FRk9SR0VfRU5BQkxFX0NBQ0hFOiB7IHR5cGU6ICdzdHJpbmcnLCBvcmlnaW5hbEtleTogJ0VOQUJMRV9DQUNIRScgfSB9LFxuICBdLFxuXVxuIl19